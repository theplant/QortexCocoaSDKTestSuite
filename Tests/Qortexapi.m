// Generated by github.com/hypermusk/hypermusk
// DO NOT EDIT


#import "qortexapi.h"

static QXQortexapi * _qortexapi;
static NSDateFormatter * _dateFormatter;

@implementation QXQortexapi : NSObject
+ (QXQortexapi *) get {
	if(!_qortexapi) {
		_qortexapi = [[QXQortexapi alloc] init];
		if ([_qortexapi RequestTimeoutInterval] == 0) {
			[_qortexapi setRequestTimeoutInterval:10];
		}
	}
	return _qortexapi;
}

+ (NSDateFormatter *) dateFormatter {
	if(!_dateFormatter) {
		_dateFormatter = [[NSDateFormatter alloc] init];
		[_dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZ"];
	}
	return _dateFormatter;
}

+ (NSDate *) dateFromString:(NSString *)dateString {
	if(!dateString) {
		return nil;
	}

	NSError *error;
	NSRegularExpression *regexp = [NSRegularExpression regularExpressionWithPattern:@"\\.[0-9]*" options:0 error:&error];
	NSAssert(!error, @"Error in regexp");

	NSRange range = NSMakeRange(0, [dateString length]);
	dateString = [regexp stringByReplacingMatchesInString:dateString options:0 range:range withTemplate:@""];

	NSDate *date;
	[[QXQortexapi dateFormatter] getObjectValue:&date forString:dateString range:nil error:&error];
	if(error) {
		if ([[QXQortexapi get] Verbose]) NSLog(@"Error formatting date %@: %@ (%@)", dateString, [error localizedDescription], error);
		return nil;
	}
	return date;
}

+ (NSString *) stringFromDate:(NSDate *) date {
	if(!date) {
		return nil;
	}
	NSString * dateString = [[QXQortexapi dateFormatter] stringFromDate:date];
	dateString = [[[dateString substringToIndex:(dateString.length - 3)] stringByAppendingString:@":"] stringByAppendingString:[dateString substringFromIndex:(dateString.length - 2)]];
	return dateString;
}

+ (NSDictionary *) request:(NSURL*)url req:(NSDictionary *)req error:(NSError **)error {
	QXQortexapi * _api = [QXQortexapi get];
	NSMutableURLRequest *httpRequest = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:[_api RequestTimeoutInterval]];

	[httpRequest setHTTPMethod:@"POST"];
	[httpRequest setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
	NSData *requestBody = [NSJSONSerialization dataWithJSONObject:req options:NSJSONWritingPrettyPrinted error:error];
	if([_api Verbose]) {
		NSLog(@"Request: %@", [NSString stringWithUTF8String:[requestBody bytes]]);
	}
	[httpRequest setHTTPBody:requestBody];
	if(*error != nil) {
		return nil;
	}
	NSURLResponse  *response = nil;
	NSData *returnData = [NSURLConnection sendSynchronousRequest:httpRequest returningResponse:&response error:error];
	if(*error != nil || returnData == nil) {
		return nil;
	}
	if([_api Verbose]) {
		NSLog(@"Response: %@", [NSString stringWithUTF8String:[returnData bytes]]);
	}
	return [NSJSONSerialization JSONObjectWithData:returnData options:NSJSONReadingAllowFragments error:error];
}

+ (void)request:(NSURL*)url
	 parameters:(NSDictionary *)parameters
completionHandler:(void (^)(NSDictionary *results, NSError *error))completionHandler {
	__block NSError *error = nil;
	NSOperationQueue *queue = [[NSOperationQueue alloc] init];

	NSMutableURLRequest *httpRequest = [NSMutableURLRequest requestWithURL:url];
	[httpRequest setHTTPMethod:@"POST"];
	[httpRequest setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
	QXQortexapi * _api = [QXQortexapi get];

	NSData *requestBody = [NSJSONSerialization dataWithJSONObject:parameters options:NSJSONWritingPrettyPrinted error:&error];
	if([_api Verbose]) {
		NSLog(@"Request: %@", [NSString stringWithUTF8String:[requestBody bytes]]);
	}
	[httpRequest setHTTPBody:requestBody];

	[NSURLConnection sendAsynchronousRequest:httpRequest
					   queue:queue
			       completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {
						   if([_api Verbose]) {
							   NSLog(@"Response: %@", [NSString stringWithUTF8String:[data bytes]]);
							   NSLog(@"Connection Error: %@", connectionError);
						   }

						   if (completionHandler) {
							   NSDictionary *results = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];

								dispatch_async(dispatch_get_main_queue(), ^{
									completionHandler(results, error);
								});
						   }
						}];
}

+ (NSError *)errorWithDictionary:(NSDictionary *)dict {
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return nil;
	}
	if ([[dict allKeys] count] == 0) {
		return nil;
	}
	NSMutableDictionary *userInfo = [NSMutableDictionary alloc];
	id reason = [dict valueForKey:@"Reason"];
	if ([reason isKindOfClass:[NSDictionary class]]) {
		userInfo = [userInfo initWithDictionary:reason];
	} else {
		userInfo = [userInfo init];
	}
	[userInfo setObject:[dict valueForKey:@"Message"] forKey:NSLocalizedDescriptionKey];

	NSString *code = [dict valueForKey:@"Code"];
	NSNumberFormatter *f = [[NSNumberFormatter alloc] init];
	[f setNumberStyle:NSNumberFormatterDecimalStyle];
	NSNumber *codeNumber = [f numberFromString:code];
	NSInteger intCode = -1;
	if (codeNumber != nil) {
		intCode = [codeNumber integerValue];
	}
	NSError *err = [NSError errorWithDomain:@"QortexapiError" code:intCode userInfo:userInfo];
	return err;
}

@end


// --- TaskSelectorItem ---
@implementation QXTaskSelectorItem

@synthesize StoreKey;
@synthesize DisplayText;
@synthesize IsCurrent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStoreKey:[dict valueForKey:@"StoreKey"]];
	[self setDisplayText:[dict valueForKey:@"DisplayText"]];
	[self setIsCurrent:[[dict valueForKey:@"IsCurrent"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.StoreKey forKey:@"StoreKey"];
	[dict setValue:self.DisplayText forKey:@"DisplayText"];
	[dict setValue:[NSNumber numberWithBool:self.IsCurrent] forKey:@"IsCurrent"];

	return dict;
}

@end

// --- Blog ---
@implementation QXBlog

@synthesize Title;
@synthesize Description;
@synthesize SideContent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setDescription:[dict valueForKey:@"Description"]];
	[self setSideContent:[dict valueForKey:@"SideContent"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Description forKey:@"Description"];
	[dict setValue:self.SideContent forKey:@"SideContent"];

	return dict;
}

@end

// --- EmbedOrg ---
@implementation QXEmbedOrg

@synthesize Id;
@synthesize Name;
@synthesize LogoURL;
@synthesize NoNeedToShare;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setNoNeedToShare:[[dict valueForKey:@"NoNeedToShare"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:[NSNumber numberWithBool:self.NoNeedToShare] forKey:@"NoNeedToShare"];

	return dict;
}

@end

// --- EmbedUser ---
@implementation QXEmbedUser

@synthesize Id;
@synthesize Email;
@synthesize Name;
@synthesize Title;
@synthesize Avatar;
@synthesize JID;
@synthesize Timezone;
@synthesize OrgName;
@synthesize IsSuperUser;
@synthesize IsShare;
@synthesize OrganizationId;
@synthesize OriginalOrgId;
@synthesize ProfileURL;
@synthesize NoDetail;
@synthesize UnfollowSharedGroup;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setAvatar:[dict valueForKey:@"Avatar"]];
	[self setJID:[dict valueForKey:@"JID"]];
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setOrgName:[dict valueForKey:@"OrgName"]];
	[self setIsSuperUser:[[dict valueForKey:@"IsSuperUser"] boolValue]];
	[self setIsShare:[[dict valueForKey:@"IsShare"] boolValue]];
	[self setOrganizationId:[dict valueForKey:@"OrganizationId"]];
	[self setOriginalOrgId:[dict valueForKey:@"OriginalOrgId"]];
	[self setProfileURL:[dict valueForKey:@"ProfileURL"]];
	[self setNoDetail:[[dict valueForKey:@"NoDetail"] boolValue]];
	[self setUnfollowSharedGroup:[[dict valueForKey:@"UnfollowSharedGroup"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Avatar forKey:@"Avatar"];
	[dict setValue:self.JID forKey:@"JID"];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:self.OrgName forKey:@"OrgName"];
	[dict setValue:[NSNumber numberWithBool:self.IsSuperUser] forKey:@"IsSuperUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsShare] forKey:@"IsShare"];
	[dict setValue:self.OrganizationId forKey:@"OrganizationId"];
	[dict setValue:self.OriginalOrgId forKey:@"OriginalOrgId"];
	[dict setValue:self.ProfileURL forKey:@"ProfileURL"];
	[dict setValue:[NSNumber numberWithBool:self.NoDetail] forKey:@"NoDetail"];
	[dict setValue:[NSNumber numberWithBool:self.UnfollowSharedGroup] forKey:@"UnfollowSharedGroup"];

	return dict;
}

@end

// --- PanelStatus ---
@implementation QXPanelStatus

@synthesize HasDraft;
@synthesize HasWatchList;
@synthesize HasChat;
@synthesize ShowMarkUnreadThreshold;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setHasDraft:[[dict valueForKey:@"HasDraft"] boolValue]];
	[self setHasWatchList:[[dict valueForKey:@"HasWatchList"] boolValue]];
	[self setHasChat:[[dict valueForKey:@"HasChat"] boolValue]];
	[self setShowMarkUnreadThreshold:[dict valueForKey:@"ShowMarkUnreadThreshold"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.HasDraft] forKey:@"HasDraft"];
	[dict setValue:[NSNumber numberWithBool:self.HasWatchList] forKey:@"HasWatchList"];
	[dict setValue:[NSNumber numberWithBool:self.HasChat] forKey:@"HasChat"];
	[dict setValue:self.ShowMarkUnreadThreshold forKey:@"ShowMarkUnreadThreshold"];

	return dict;
}

@end

// --- OrgSettings ---
@implementation QXOrgSettings

@synthesize AllowUsersCreateGroups;
@synthesize AllowUsersInvitePeople;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAllowUsersCreateGroups:[[dict valueForKey:@"AllowUsersCreateGroups"] boolValue]];
	[self setAllowUsersInvitePeople:[[dict valueForKey:@"AllowUsersInvitePeople"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersCreateGroups] forKey:@"AllowUsersCreateGroups"];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersInvitePeople] forKey:@"AllowUsersInvitePeople"];

	return dict;
}

@end

// --- TagIndex ---
@implementation QXTagIndex

@synthesize Tag;
@synthesize Index;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTag:[dict valueForKey:@"Tag"]];
	[self setIndex:[dict valueForKey:@"Index"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Tag forKey:@"Tag"];
	[dict setValue:self.Index forKey:@"Index"];

	return dict;
}

@end

// --- EmbedGroup ---
@implementation QXEmbedGroup

@synthesize Id;
@synthesize Name;
@synthesize IconName;
@synthesize Link;
@synthesize TaskLink;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setIconName:[dict valueForKey:@"IconName"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setTaskLink:[dict valueForKey:@"TaskLink"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.IconName forKey:@"IconName"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.TaskLink forKey:@"TaskLink"];

	return dict;
}

@end

// --- GroupSelectorItem ---
@implementation QXGroupSelectorItem

@synthesize Id;
@synthesize Name;
@synthesize IsSelected;
@synthesize Accessible;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setIsSelected:[[dict valueForKey:@"IsSelected"] boolValue]];
	[self setAccessible:[[dict valueForKey:@"Accessible"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:[NSNumber numberWithBool:self.IsSelected] forKey:@"IsSelected"];
	[dict setValue:[NSNumber numberWithBool:self.Accessible] forKey:@"Accessible"];

	return dict;
}

@end

// --- Attachment ---
@implementation QXAttachment

@synthesize Id;
@synthesize OwnerId;
@synthesize Category;
@synthesize Filename;
@synthesize ShortFilename;
@synthesize ContentType;
@synthesize ContentId;
@synthesize MD5;
@synthesize ContentLength;
@synthesize Error;
@synthesize GroupId;
@synthesize UploadTime;
@synthesize Width;
@synthesize Height;
@synthesize URL;
@synthesize S1ThumbURL;
@synthesize MThumbURL;
@synthesize LThumbURL;
@synthesize ImageIconURL;
@synthesize FileIconURL;
@synthesize HumanSize;
@synthesize IsImage;
@synthesize FileKind;
@synthesize CrocodocStatus;
@synthesize SessionId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setOwnerId:[dict valueForKey:@"OwnerId"]];
	[self setCategory:[dict valueForKey:@"Category"]];
	[self setFilename:[dict valueForKey:@"Filename"]];
	[self setShortFilename:[dict valueForKey:@"ShortFilename"]];
	[self setContentType:[dict valueForKey:@"ContentType"]];
	[self setContentId:[dict valueForKey:@"ContentId"]];
	[self setMD5:[dict valueForKey:@"MD5"]];
	[self setContentLength:[dict valueForKey:@"ContentLength"]];
	[self setError:[dict valueForKey:@"Error"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUploadTime:[QXQortexapi dateFromString:[dict valueForKey:@"UploadTime"]]];
	[self setWidth:[dict valueForKey:@"Width"]];
	[self setHeight:[dict valueForKey:@"Height"]];
	[self setURL:[dict valueForKey:@"URL"]];
	[self setS1ThumbURL:[dict valueForKey:@"S1ThumbURL"]];
	[self setMThumbURL:[dict valueForKey:@"MThumbURL"]];
	[self setLThumbURL:[dict valueForKey:@"LThumbURL"]];
	[self setImageIconURL:[dict valueForKey:@"ImageIconURL"]];
	[self setFileIconURL:[dict valueForKey:@"FileIconURL"]];
	[self setHumanSize:[dict valueForKey:@"HumanSize"]];
	[self setIsImage:[[dict valueForKey:@"IsImage"] boolValue]];
	[self setFileKind:[dict valueForKey:@"FileKind"]];
	[self setCrocodocStatus:[dict valueForKey:@"CrocodocStatus"]];
	[self setSessionId:[dict valueForKey:@"SessionId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.OwnerId forKey:@"OwnerId"];
	[dict setValue:self.Category forKey:@"Category"];
	[dict setValue:self.Filename forKey:@"Filename"];
	[dict setValue:self.ShortFilename forKey:@"ShortFilename"];
	[dict setValue:self.ContentType forKey:@"ContentType"];
	[dict setValue:self.ContentId forKey:@"ContentId"];
	[dict setValue:self.MD5 forKey:@"MD5"];
	[dict setValue:self.ContentLength forKey:@"ContentLength"];
	[dict setValue:self.Error forKey:@"Error"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:[QXQortexapi stringFromDate:self.UploadTime] forKey:@"UploadTime"];
	[dict setValue:self.Width forKey:@"Width"];
	[dict setValue:self.Height forKey:@"Height"];
	[dict setValue:self.URL forKey:@"URL"];
	[dict setValue:self.S1ThumbURL forKey:@"S1ThumbURL"];
	[dict setValue:self.MThumbURL forKey:@"MThumbURL"];
	[dict setValue:self.LThumbURL forKey:@"LThumbURL"];
	[dict setValue:self.ImageIconURL forKey:@"ImageIconURL"];
	[dict setValue:self.FileIconURL forKey:@"FileIconURL"];
	[dict setValue:self.HumanSize forKey:@"HumanSize"];
	[dict setValue:[NSNumber numberWithBool:self.IsImage] forKey:@"IsImage"];
	[dict setValue:self.FileKind forKey:@"FileKind"];
	[dict setValue:self.CrocodocStatus forKey:@"CrocodocStatus"];
	[dict setValue:self.SessionId forKey:@"SessionId"];

	return dict;
}

@end

// --- AssignableUser ---
@implementation QXAssignableUser

@synthesize UserId;
@synthesize Name;
@synthesize IsAssigned;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setIsAssigned:[[dict valueForKey:@"IsAssigned"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:[NSNumber numberWithBool:self.IsAssigned] forKey:@"IsAssigned"];

	return dict;
}

@end

// --- TimeTrackingItem ---
@implementation QXTimeTrackingItem

@synthesize Id;
@synthesize UserName;
@synthesize FinishDate;
@synthesize SpentTime;
@synthesize TimeUnit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setUserName:[dict valueForKey:@"UserName"]];
	[self setFinishDate:[dict valueForKey:@"FinishDate"]];
	[self setSpentTime:[dict valueForKey:@"SpentTime"]];
	[self setTimeUnit:[dict valueForKey:@"TimeUnit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.UserName forKey:@"UserName"];
	[dict setValue:self.FinishDate forKey:@"FinishDate"];
	[dict setValue:self.SpentTime forKey:@"SpentTime"];
	[dict setValue:self.TimeUnit forKey:@"TimeUnit"];

	return dict;
}

@end

// --- LinkedEntry ---
@implementation QXLinkedEntry

@synthesize Id;
@synthesize EType;
@synthesize Title;
@synthesize GroupId;
@synthesize AuthorId;
@synthesize IsRoot;
@synthesize RootId;
@synthesize RootEntryTitle;
@synthesize Link;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEType:[dict valueForKey:@"EType"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAuthorId:[dict valueForKey:@"AuthorId"]];
	[self setIsRoot:[[dict valueForKey:@"IsRoot"] boolValue]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setRootEntryTitle:[dict valueForKey:@"RootEntryTitle"]];
	[self setLink:[dict valueForKey:@"Link"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AuthorId forKey:@"AuthorId"];
	[dict setValue:[NSNumber numberWithBool:self.IsRoot] forKey:@"IsRoot"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:self.RootEntryTitle forKey:@"RootEntryTitle"];
	[dict setValue:self.Link forKey:@"Link"];

	return dict;
}

@end

// --- BasedOnPost ---
@implementation QXBasedOnPost

@synthesize RootHtmlTitle;
@synthesize Link;
@synthesize IsComment;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setRootHtmlTitle:[dict valueForKey:@"RootHtmlTitle"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setIsComment:[[dict valueForKey:@"IsComment"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.RootHtmlTitle forKey:@"RootHtmlTitle"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:[NSNumber numberWithBool:self.IsComment] forKey:@"IsComment"];

	return dict;
}

@end

// --- GroupCount ---
@implementation QXGroupCount

@synthesize GroupId;
@synthesize UnreadCount;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUnreadCount:[dict valueForKey:@"UnreadCount"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UnreadCount forKey:@"UnreadCount"];

	return dict;
}

@end

// --- GroupHeader ---
@implementation QXGroupHeader

@synthesize HasToFollow;
@synthesize IsFollowing;
@synthesize IsManaging;
@synthesize HasFileTab;
@synthesize HasToDoTab;
@synthesize IsQortexSupport;
@synthesize SelectedGroup;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setHasToFollow:[[dict valueForKey:@"HasToFollow"] boolValue]];
	[self setIsFollowing:[[dict valueForKey:@"IsFollowing"] boolValue]];
	[self setIsManaging:[[dict valueForKey:@"IsManaging"] boolValue]];
	[self setHasFileTab:[[dict valueForKey:@"HasFileTab"] boolValue]];
	[self setHasToDoTab:[[dict valueForKey:@"HasToDoTab"] boolValue]];
	[self setIsQortexSupport:[[dict valueForKey:@"IsQortexSupport"] boolValue]];
	[self setSelectedGroup:[[dict valueForKey:@"SelectedGroup"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.HasToFollow] forKey:@"HasToFollow"];
	[dict setValue:[NSNumber numberWithBool:self.IsFollowing] forKey:@"IsFollowing"];
	[dict setValue:[NSNumber numberWithBool:self.IsManaging] forKey:@"IsManaging"];
	[dict setValue:[NSNumber numberWithBool:self.HasFileTab] forKey:@"HasFileTab"];
	[dict setValue:[NSNumber numberWithBool:self.HasToDoTab] forKey:@"HasToDoTab"];
	[dict setValue:[NSNumber numberWithBool:self.IsQortexSupport] forKey:@"IsQortexSupport"];
	[dict setValue:[NSNumber numberWithBool:self.SelectedGroup] forKey:@"SelectedGroup"];

	return dict;
}

@end

// --- InlineHelp ---
@implementation QXInlineHelp

@synthesize QortexOverview;
@synthesize WhatNext;
@synthesize WhatChats;
@synthesize InviteOthersURL;
@synthesize WhatChatsURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setQortexOverview:[[dict valueForKey:@"QortexOverview"] boolValue]];
	[self setWhatNext:[[dict valueForKey:@"WhatNext"] boolValue]];
	[self setWhatChats:[[dict valueForKey:@"WhatChats"] boolValue]];
	[self setInviteOthersURL:[dict valueForKey:@"InviteOthersURL"]];
	[self setWhatChatsURL:[dict valueForKey:@"WhatChatsURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.QortexOverview] forKey:@"QortexOverview"];
	[dict setValue:[NSNumber numberWithBool:self.WhatNext] forKey:@"WhatNext"];
	[dict setValue:[NSNumber numberWithBool:self.WhatChats] forKey:@"WhatChats"];
	[dict setValue:self.InviteOthersURL forKey:@"InviteOthersURL"];
	[dict setValue:self.WhatChatsURL forKey:@"WhatChatsURL"];

	return dict;
}

@end

// --- EmailChanger ---
@implementation QXEmailChanger

@synthesize Token;
@synthesize Email;
@synthesize SharingToken;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];

	return dict;
}

@end

// --- Newsletter ---
@implementation QXNewsletter

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- ContactInfo ---
@implementation QXContactInfo

@synthesize FirstName;
@synthesize LastName;
@synthesize CompanyName;
@synthesize CompanySize;
@synthesize Email;
@synthesize Phone;
@synthesize Country;
@synthesize City;
@synthesize HelpContent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFirstName:[dict valueForKey:@"FirstName"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setCompanyName:[dict valueForKey:@"CompanyName"]];
	[self setCompanySize:[dict valueForKey:@"CompanySize"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setCountry:[dict valueForKey:@"Country"]];
	[self setCity:[dict valueForKey:@"City"]];
	[self setHelpContent:[dict valueForKey:@"HelpContent"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FirstName forKey:@"FirstName"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.CompanyName forKey:@"CompanyName"];
	[dict setValue:self.CompanySize forKey:@"CompanySize"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Country forKey:@"Country"];
	[dict setValue:self.City forKey:@"City"];
	[dict setValue:self.HelpContent forKey:@"HelpContent"];

	return dict;
}

@end

// --- TotalStats ---
@implementation QXTotalStats

@synthesize OrgCount;
@synthesize MemberCount;
@synthesize GroupCount;
@synthesize EntryCount;
@synthesize CommentCount;
@synthesize ChatCount;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgCount:[dict valueForKey:@"OrgCount"]];
	[self setMemberCount:[dict valueForKey:@"MemberCount"]];
	[self setGroupCount:[dict valueForKey:@"GroupCount"]];
	[self setEntryCount:[dict valueForKey:@"EntryCount"]];
	[self setCommentCount:[dict valueForKey:@"CommentCount"]];
	[self setChatCount:[dict valueForKey:@"ChatCount"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgCount forKey:@"OrgCount"];
	[dict setValue:self.MemberCount forKey:@"MemberCount"];
	[dict setValue:self.GroupCount forKey:@"GroupCount"];
	[dict setValue:self.EntryCount forKey:@"EntryCount"];
	[dict setValue:self.CommentCount forKey:@"CommentCount"];
	[dict setValue:self.ChatCount forKey:@"ChatCount"];

	return dict;
}

@end

// --- AccessReq ---
@implementation QXAccessReq

@synthesize Email;
@synthesize PriorityCode;
@synthesize AccessCode;
@synthesize Status;
@synthesize ApprovedBy;
@synthesize CreatedAt;
@synthesize UpdatedAt;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPriorityCode:[dict valueForKey:@"PriorityCode"]];
	[self setAccessCode:[dict valueForKey:@"AccessCode"]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setApprovedBy:[dict valueForKey:@"ApprovedBy"]];
	[self setCreatedAt:[dict valueForKey:@"CreatedAt"]];
	[self setUpdatedAt:[dict valueForKey:@"UpdatedAt"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.PriorityCode forKey:@"PriorityCode"];
	[dict setValue:self.AccessCode forKey:@"AccessCode"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.ApprovedBy forKey:@"ApprovedBy"];
	[dict setValue:self.CreatedAt forKey:@"CreatedAt"];
	[dict setValue:self.UpdatedAt forKey:@"UpdatedAt"];

	return dict;
}

@end

// --- InnerMessage ---
@implementation QXInnerMessage

@synthesize ByUser;
@synthesize GroupName;
@synthesize GroupLink;
@synthesize OrgName;
@synthesize IsDeletedGroupMessage;
@synthesize IsCreatedGroupMessage;
@synthesize IsSetupOrgMessage;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setByUser:[dict valueForKey:@"ByUser"]];
	[self setGroupName:[dict valueForKey:@"GroupName"]];
	[self setGroupLink:[dict valueForKey:@"GroupLink"]];
	[self setOrgName:[dict valueForKey:@"OrgName"]];
	[self setIsDeletedGroupMessage:[[dict valueForKey:@"IsDeletedGroupMessage"] boolValue]];
	[self setIsCreatedGroupMessage:[[dict valueForKey:@"IsCreatedGroupMessage"] boolValue]];
	[self setIsSetupOrgMessage:[[dict valueForKey:@"IsSetupOrgMessage"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ByUser forKey:@"ByUser"];
	[dict setValue:self.GroupName forKey:@"GroupName"];
	[dict setValue:self.GroupLink forKey:@"GroupLink"];
	[dict setValue:self.OrgName forKey:@"OrgName"];
	[dict setValue:[NSNumber numberWithBool:self.IsDeletedGroupMessage] forKey:@"IsDeletedGroupMessage"];
	[dict setValue:[NSNumber numberWithBool:self.IsCreatedGroupMessage] forKey:@"IsCreatedGroupMessage"];
	[dict setValue:[NSNumber numberWithBool:self.IsSetupOrgMessage] forKey:@"IsSetupOrgMessage"];

	return dict;
}

@end

// --- OrgUnreadInfo ---
@implementation QXOrgUnreadInfo

@synthesize OrgId;
@synthesize FeedUnreadCount;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];
	[self setFeedUnreadCount:[dict valueForKey:@"FeedUnreadCount"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];
	[dict setValue:self.FeedUnreadCount forKey:@"FeedUnreadCount"];

	return dict;
}

@end

// --- MarketableMemberInfo ---
@implementation QXMarketableMemberInfo

@synthesize Email;
@synthesize FirstName;
@synthesize LastName;
@synthesize Status;
@synthesize InvitOrg;
@synthesize GotoURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setFirstName:[dict valueForKey:@"FirstName"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setInvitOrg:[dict valueForKey:@"InvitOrg"]];
	[self setGotoURL:[dict valueForKey:@"GotoURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.FirstName forKey:@"FirstName"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.InvitOrg forKey:@"InvitOrg"];
	[dict setValue:self.GotoURL forKey:@"GotoURL"];

	return dict;
}

@end

// --- ToDoCSVItem ---
@implementation QXToDoCSVItem

@synthesize Creator;
@synthesize Title;
@synthesize Content;
@synthesize Status;
@synthesize EstimateTime;
@synthesize TotalSpentTime;
@synthesize TimeUnit;
@synthesize SpentTimeDetail;
@synthesize CreateTime;
@synthesize UpdateTime;
@synthesize Due;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setCreator:[dict valueForKey:@"Creator"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setEstimateTime:[dict valueForKey:@"EstimateTime"]];
	[self setTotalSpentTime:[dict valueForKey:@"TotalSpentTime"]];
	[self setTimeUnit:[dict valueForKey:@"TimeUnit"]];
	[self setSpentTimeDetail:[dict valueForKey:@"SpentTimeDetail"]];
	[self setCreateTime:[dict valueForKey:@"CreateTime"]];
	[self setUpdateTime:[dict valueForKey:@"UpdateTime"]];
	[self setDue:[dict valueForKey:@"Due"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Creator forKey:@"Creator"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.EstimateTime forKey:@"EstimateTime"];
	[dict setValue:self.TotalSpentTime forKey:@"TotalSpentTime"];
	[dict setValue:self.TimeUnit forKey:@"TimeUnit"];
	[dict setValue:self.SpentTimeDetail forKey:@"SpentTimeDetail"];
	[dict setValue:self.CreateTime forKey:@"CreateTime"];
	[dict setValue:self.UpdateTime forKey:@"UpdateTime"];
	[dict setValue:self.Due forKey:@"Due"];

	return dict;
}

@end

// --- TranslatedComment ---
@implementation QXTranslatedComment

@synthesize Id;
@synthesize Content;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setContent:[dict valueForKey:@"Content"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Content forKey:@"Content"];

	return dict;
}

@end

// --- SupportedLanguage ---
@implementation QXSupportedLanguage

@synthesize StoreKey;
@synthesize DisplayText;
@synthesize IsCurrent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStoreKey:[dict valueForKey:@"StoreKey"]];
	[self setDisplayText:[dict valueForKey:@"DisplayText"]];
	[self setIsCurrent:[[dict valueForKey:@"IsCurrent"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.StoreKey forKey:@"StoreKey"];
	[dict setValue:self.DisplayText forKey:@"DisplayText"];
	[dict setValue:[NSNumber numberWithBool:self.IsCurrent] forKey:@"IsCurrent"];

	return dict;
}

@end

// --- SelectionTextInFo ---
@implementation QXSelectionTextInFo

@synthesize Text;
@synthesize Occured;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setText:[dict valueForKey:@"Text"]];
	[self setOccured:[dict valueForKey:@"Occured"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Text forKey:@"Text"];
	[dict setValue:self.Occured forKey:@"Occured"];

	return dict;
}

@end

// --- BroadcastInput ---
@implementation QXBroadcastInput

@synthesize Id;
@synthesize Title;
@synthesize Content;
@synthesize ToOrgIds;
@synthesize BroadcastType;
@synthesize RootId;
@synthesize LocaleName;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setToOrgIds:[dict valueForKey:@"ToOrgIds"]];
	[self setBroadcastType:[dict valueForKey:@"BroadcastType"]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setLocaleName:[dict valueForKey:@"LocaleName"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.ToOrgIds forKey:@"ToOrgIds"];
	[dict setValue:self.BroadcastType forKey:@"BroadcastType"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:self.LocaleName forKey:@"LocaleName"];

	return dict;
}

@end

// --- QortexSupportInput ---
@implementation QXQortexSupportInput

@synthesize Id;
@synthesize Title;
@synthesize Content;
@synthesize ToOrgIds;
@synthesize RootId;
@synthesize Audiance;
@synthesize KnowledgeBase;
@synthesize InlineHelp;
@synthesize PublishedToUsers;
@synthesize LinkTitle;
@synthesize LocaleName;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setToOrgIds:[dict valueForKey:@"ToOrgIds"]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setAudiance:[dict valueForKey:@"Audiance"]];
	[self setKnowledgeBase:[[dict valueForKey:@"KnowledgeBase"] boolValue]];
	[self setInlineHelp:[[dict valueForKey:@"InlineHelp"] boolValue]];
	[self setPublishedToUsers:[[dict valueForKey:@"PublishedToUsers"] boolValue]];
	[self setLinkTitle:[dict valueForKey:@"LinkTitle"]];
	[self setLocaleName:[dict valueForKey:@"LocaleName"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.ToOrgIds forKey:@"ToOrgIds"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:self.Audiance forKey:@"Audiance"];
	[dict setValue:[NSNumber numberWithBool:self.KnowledgeBase] forKey:@"KnowledgeBase"];
	[dict setValue:[NSNumber numberWithBool:self.InlineHelp] forKey:@"InlineHelp"];
	[dict setValue:[NSNumber numberWithBool:self.PublishedToUsers] forKey:@"PublishedToUsers"];
	[dict setValue:self.LinkTitle forKey:@"LinkTitle"];
	[dict setValue:self.LocaleName forKey:@"LocaleName"];

	return dict;
}

@end

// --- GroupInput ---
@implementation QXGroupInput

@synthesize Id;
@synthesize Name;
@synthesize Description;
@synthesize LogoURL;
@synthesize IconName;
@synthesize Slug;
@synthesize IsPrivate;
@synthesize IsShared;
@synthesize GroupOwners;
@synthesize InvitedOrgIds;
@synthesize AutoGenSlug;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setDescription:[dict valueForKey:@"Description"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setIconName:[dict valueForKey:@"IconName"]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setIsPrivate:[[dict valueForKey:@"IsPrivate"] boolValue]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setGroupOwners:[dict valueForKey:@"GroupOwners"]];
	[self setInvitedOrgIds:[dict valueForKey:@"InvitedOrgIds"]];
	[self setAutoGenSlug:[[dict valueForKey:@"AutoGenSlug"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Description forKey:@"Description"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.IconName forKey:@"IconName"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:[NSNumber numberWithBool:self.IsPrivate] forKey:@"IsPrivate"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:self.GroupOwners forKey:@"GroupOwners"];
	[dict setValue:self.InvitedOrgIds forKey:@"InvitedOrgIds"];
	[dict setValue:[NSNumber numberWithBool:self.AutoGenSlug] forKey:@"AutoGenSlug"];

	return dict;
}

@end

// --- OrgSettingsInput ---
@implementation QXOrgSettingsInput

@synthesize AllowUsersCreateGroups;
@synthesize AllowUsersInvitePeople;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAllowUsersCreateGroups:[[dict valueForKey:@"AllowUsersCreateGroups"] boolValue]];
	[self setAllowUsersInvitePeople:[[dict valueForKey:@"AllowUsersInvitePeople"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersCreateGroups] forKey:@"AllowUsersCreateGroups"];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersInvitePeople] forKey:@"AllowUsersInvitePeople"];

	return dict;
}

@end

// --- OrganizationInput ---
@implementation QXOrganizationInput

@synthesize Id;
@synthesize Name;
@synthesize Summary;
@synthesize Address;
@synthesize Phone;
@synthesize Website;
@synthesize Country;
@synthesize Size;
@synthesize Domains;
@synthesize QortexURL;
@synthesize LogoURL;
@synthesize SharingToken;
@synthesize ContactWay;
@synthesize NeedDemo;
@synthesize RestrictSubscriptionMail;
@synthesize AnyoneCanJoin;
@synthesize LanguageCodes;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setSummary:[dict valueForKey:@"Summary"]];
	[self setAddress:[dict valueForKey:@"Address"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setWebsite:[dict valueForKey:@"Website"]];
	[self setCountry:[dict valueForKey:@"Country"]];
	[self setSize:[dict valueForKey:@"Size"]];
	[self setDomains:[dict valueForKey:@"Domains"]];
	[self setQortexURL:[dict valueForKey:@"QortexURL"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];
	[self setContactWay:[dict valueForKey:@"ContactWay"]];
	[self setNeedDemo:[[dict valueForKey:@"NeedDemo"] boolValue]];
	[self setRestrictSubscriptionMail:[[dict valueForKey:@"RestrictSubscriptionMail"] boolValue]];
	[self setAnyoneCanJoin:[[dict valueForKey:@"AnyoneCanJoin"] boolValue]];
	[self setLanguageCodes:[dict valueForKey:@"LanguageCodes"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Summary forKey:@"Summary"];
	[dict setValue:self.Address forKey:@"Address"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Website forKey:@"Website"];
	[dict setValue:self.Country forKey:@"Country"];
	[dict setValue:self.Size forKey:@"Size"];
	[dict setValue:self.Domains forKey:@"Domains"];
	[dict setValue:self.QortexURL forKey:@"QortexURL"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];
	[dict setValue:self.ContactWay forKey:@"ContactWay"];
	[dict setValue:[NSNumber numberWithBool:self.NeedDemo] forKey:@"NeedDemo"];
	[dict setValue:[NSNumber numberWithBool:self.RestrictSubscriptionMail] forKey:@"RestrictSubscriptionMail"];
	[dict setValue:[NSNumber numberWithBool:self.AnyoneCanJoin] forKey:@"AnyoneCanJoin"];
	[dict setValue:self.LanguageCodes forKey:@"LanguageCodes"];

	return dict;
}

@end

// --- LikeInput ---
@implementation QXLikeInput

@synthesize EntryId;
@synthesize GroupId;
@synthesize Like;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setLike:[dict valueForKey:@"Like"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Like forKey:@"Like"];

	return dict;
}

@end

// --- PreferencesInput ---
@implementation QXPreferencesInput

@synthesize Timezone;
@synthesize TimezoneOffset;
@synthesize PreferFullName;
@synthesize EnterForNewLine;
@synthesize AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse;
@synthesize ShowMarkUnreadThreshold;
@synthesize AdminModeOn;
@synthesize PreferMarkdown;
@synthesize AutoFollowPublicGroup;
@synthesize EnableHTML5Notification;
@synthesize UserLocationCityName;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setTimezoneOffset:[dict valueForKey:@"TimezoneOffset"]];
	[self setPreferFullName:[dict valueForKey:@"PreferFullName"]];
	[self setEnterForNewLine:[dict valueForKey:@"EnterForNewLine"]];
	[self setAsideGroupsCollapse:[dict valueForKey:@"AsideGroupsCollapse"]];
	[self setAsideOtherGroupsCollapse:[dict valueForKey:@"AsideOtherGroupsCollapse"]];
	[self setShowMarkUnreadThreshold:[dict valueForKey:@"ShowMarkUnreadThreshold"]];
	[self setAdminModeOn:[dict valueForKey:@"AdminModeOn"]];
	[self setPreferMarkdown:[dict valueForKey:@"PreferMarkdown"]];
	[self setAutoFollowPublicGroup:[dict valueForKey:@"AutoFollowPublicGroup"]];
	[self setEnableHTML5Notification:[dict valueForKey:@"EnableHTML5Notification"]];
	[self setUserLocationCityName:[dict valueForKey:@"UserLocationCityName"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:self.TimezoneOffset forKey:@"TimezoneOffset"];
	[dict setValue:self.PreferFullName forKey:@"PreferFullName"];
	[dict setValue:self.EnterForNewLine forKey:@"EnterForNewLine"];
	[dict setValue:self.AsideGroupsCollapse forKey:@"AsideGroupsCollapse"];
	[dict setValue:self.AsideOtherGroupsCollapse forKey:@"AsideOtherGroupsCollapse"];
	[dict setValue:self.ShowMarkUnreadThreshold forKey:@"ShowMarkUnreadThreshold"];
	[dict setValue:self.AdminModeOn forKey:@"AdminModeOn"];
	[dict setValue:self.PreferMarkdown forKey:@"PreferMarkdown"];
	[dict setValue:self.AutoFollowPublicGroup forKey:@"AutoFollowPublicGroup"];
	[dict setValue:self.EnableHTML5Notification forKey:@"EnableHTML5Notification"];
	[dict setValue:self.UserLocationCityName forKey:@"UserLocationCityName"];

	return dict;
}

@end

// --- MemberAccountInput ---
@implementation QXMemberAccountInput

@synthesize FirstName;
@synthesize LastName;
@synthesize AvatarURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFirstName:[dict valueForKey:@"FirstName"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setAvatarURL:[dict valueForKey:@"AvatarURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FirstName forKey:@"FirstName"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.AvatarURL forKey:@"AvatarURL"];

	return dict;
}

@end

// --- NewsletterInput ---
@implementation QXNewsletterInput

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- ShareChatInput ---
@implementation QXShareChatInput

@synthesize Title;
@synthesize Content;
@synthesize BasedConvId;
@synthesize BaseOnEntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setBasedConvId:[dict valueForKey:@"BasedConvId"]];
	[self setBaseOnEntryId:[dict valueForKey:@"BaseOnEntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.BasedConvId forKey:@"BasedConvId"];
	[dict setValue:self.BaseOnEntryId forKey:@"BaseOnEntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- ContactInput ---
@implementation QXContactInput

@synthesize FirstName;
@synthesize LastName;
@synthesize CompanyName;
@synthesize CompanySize;
@synthesize Email;
@synthesize Phone;
@synthesize Country;
@synthesize City;
@synthesize HelpContent;
@synthesize Fake;
@synthesize IsAgreed;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFirstName:[dict valueForKey:@"FirstName"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setCompanyName:[dict valueForKey:@"CompanyName"]];
	[self setCompanySize:[dict valueForKey:@"CompanySize"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setCountry:[dict valueForKey:@"Country"]];
	[self setCity:[dict valueForKey:@"City"]];
	[self setHelpContent:[dict valueForKey:@"HelpContent"]];
	[self setFake:[[dict valueForKey:@"Fake"] boolValue]];
	[self setIsAgreed:[[dict valueForKey:@"IsAgreed"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FirstName forKey:@"FirstName"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.CompanyName forKey:@"CompanyName"];
	[dict setValue:self.CompanySize forKey:@"CompanySize"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Country forKey:@"Country"];
	[dict setValue:self.City forKey:@"City"];
	[dict setValue:self.HelpContent forKey:@"HelpContent"];
	[dict setValue:[NSNumber numberWithBool:self.Fake] forKey:@"Fake"];
	[dict setValue:[NSNumber numberWithBool:self.IsAgreed] forKey:@"IsAgreed"];

	return dict;
}

@end

// --- UserProfileInput ---
@implementation QXUserProfileInput

@synthesize Summary;
@synthesize Title;
@synthesize Department;
@synthesize Location;
@synthesize Expertise;
@synthesize Interests;
@synthesize BirthMonth;
@synthesize BirthDay;
@synthesize WorkPhone;
@synthesize Mobile;
@synthesize Twitter;
@synthesize Skype;
@synthesize Facebook;
@synthesize OtherWebsites;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSummary:[dict valueForKey:@"Summary"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setDepartment:[dict valueForKey:@"Department"]];
	[self setLocation:[dict valueForKey:@"Location"]];
	[self setExpertise:[dict valueForKey:@"Expertise"]];
	[self setInterests:[dict valueForKey:@"Interests"]];
	[self setBirthMonth:[dict valueForKey:@"BirthMonth"]];
	[self setBirthDay:[dict valueForKey:@"BirthDay"]];
	[self setWorkPhone:[dict valueForKey:@"WorkPhone"]];
	[self setMobile:[dict valueForKey:@"Mobile"]];
	[self setTwitter:[dict valueForKey:@"Twitter"]];
	[self setSkype:[dict valueForKey:@"Skype"]];
	[self setFacebook:[dict valueForKey:@"Facebook"]];
	[self setOtherWebsites:[dict valueForKey:@"OtherWebsites"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Summary forKey:@"Summary"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Department forKey:@"Department"];
	[dict setValue:self.Location forKey:@"Location"];
	[dict setValue:self.Expertise forKey:@"Expertise"];
	[dict setValue:self.Interests forKey:@"Interests"];
	[dict setValue:self.BirthMonth forKey:@"BirthMonth"];
	[dict setValue:self.BirthDay forKey:@"BirthDay"];
	[dict setValue:self.WorkPhone forKey:@"WorkPhone"];
	[dict setValue:self.Mobile forKey:@"Mobile"];
	[dict setValue:self.Twitter forKey:@"Twitter"];
	[dict setValue:self.Skype forKey:@"Skype"];
	[dict setValue:self.Facebook forKey:@"Facebook"];
	[dict setValue:self.OtherWebsites forKey:@"OtherWebsites"];

	return dict;
}

@end

// --- MailUpdatesInput ---
@implementation QXMailUpdatesInput

@synthesize IndividualIsOn;
@synthesize SendLag;
@synthesize AckRequest;
@synthesize AckConfirmation;
@synthesize Todo;
@synthesize TodoConfirmation;
@synthesize SystemMessage;
@synthesize EntryNotification;
@synthesize Like;
@synthesize SendTimeIsOn;
@synthesize Mon;
@synthesize Tue;
@synthesize Wed;
@synthesize Thu;
@synthesize Fri;
@synthesize Sat;
@synthesize Sun;
@synthesize SendHoursIsOn;
@synthesize StartAt;
@synthesize EndAt;
@synthesize DailyIsOn;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIndividualIsOn:[[dict valueForKey:@"IndividualIsOn"] boolValue]];
	[self setSendLag:[dict valueForKey:@"SendLag"]];
	[self setAckRequest:[[dict valueForKey:@"AckRequest"] boolValue]];
	[self setAckConfirmation:[[dict valueForKey:@"AckConfirmation"] boolValue]];
	[self setTodo:[[dict valueForKey:@"Todo"] boolValue]];
	[self setTodoConfirmation:[[dict valueForKey:@"TodoConfirmation"] boolValue]];
	[self setSystemMessage:[[dict valueForKey:@"SystemMessage"] boolValue]];
	[self setEntryNotification:[[dict valueForKey:@"EntryNotification"] boolValue]];
	[self setLike:[[dict valueForKey:@"Like"] boolValue]];
	[self setSendTimeIsOn:[[dict valueForKey:@"SendTimeIsOn"] boolValue]];
	[self setMon:[[dict valueForKey:@"Mon"] boolValue]];
	[self setTue:[[dict valueForKey:@"Tue"] boolValue]];
	[self setWed:[[dict valueForKey:@"Wed"] boolValue]];
	[self setThu:[[dict valueForKey:@"Thu"] boolValue]];
	[self setFri:[[dict valueForKey:@"Fri"] boolValue]];
	[self setSat:[[dict valueForKey:@"Sat"] boolValue]];
	[self setSun:[[dict valueForKey:@"Sun"] boolValue]];
	[self setSendHoursIsOn:[[dict valueForKey:@"SendHoursIsOn"] boolValue]];
	[self setStartAt:[dict valueForKey:@"StartAt"]];
	[self setEndAt:[dict valueForKey:@"EndAt"]];
	[self setDailyIsOn:[[dict valueForKey:@"DailyIsOn"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IndividualIsOn] forKey:@"IndividualIsOn"];
	[dict setValue:self.SendLag forKey:@"SendLag"];
	[dict setValue:[NSNumber numberWithBool:self.AckRequest] forKey:@"AckRequest"];
	[dict setValue:[NSNumber numberWithBool:self.AckConfirmation] forKey:@"AckConfirmation"];
	[dict setValue:[NSNumber numberWithBool:self.Todo] forKey:@"Todo"];
	[dict setValue:[NSNumber numberWithBool:self.TodoConfirmation] forKey:@"TodoConfirmation"];
	[dict setValue:[NSNumber numberWithBool:self.SystemMessage] forKey:@"SystemMessage"];
	[dict setValue:[NSNumber numberWithBool:self.EntryNotification] forKey:@"EntryNotification"];
	[dict setValue:[NSNumber numberWithBool:self.Like] forKey:@"Like"];
	[dict setValue:[NSNumber numberWithBool:self.SendTimeIsOn] forKey:@"SendTimeIsOn"];
	[dict setValue:[NSNumber numberWithBool:self.Mon] forKey:@"Mon"];
	[dict setValue:[NSNumber numberWithBool:self.Tue] forKey:@"Tue"];
	[dict setValue:[NSNumber numberWithBool:self.Wed] forKey:@"Wed"];
	[dict setValue:[NSNumber numberWithBool:self.Thu] forKey:@"Thu"];
	[dict setValue:[NSNumber numberWithBool:self.Fri] forKey:@"Fri"];
	[dict setValue:[NSNumber numberWithBool:self.Sat] forKey:@"Sat"];
	[dict setValue:[NSNumber numberWithBool:self.Sun] forKey:@"Sun"];
	[dict setValue:[NSNumber numberWithBool:self.SendHoursIsOn] forKey:@"SendHoursIsOn"];
	[dict setValue:self.StartAt forKey:@"StartAt"];
	[dict setValue:self.EndAt forKey:@"EndAt"];
	[dict setValue:[NSNumber numberWithBool:self.DailyIsOn] forKey:@"DailyIsOn"];

	return dict;
}

@end

// --- MailPreferenceInput ---
@implementation QXMailPreferenceInput

@synthesize Expecting;
@synthesize SendInterval;
@synthesize SendLag;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setExpecting:[[dict valueForKey:@"Expecting"] boolValue]];
	[self setSendInterval:[dict valueForKey:@"SendInterval"]];
	[self setSendLag:[dict valueForKey:@"SendLag"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Expecting] forKey:@"Expecting"];
	[dict setValue:self.SendInterval forKey:@"SendInterval"];
	[dict setValue:self.SendLag forKey:@"SendLag"];

	return dict;
}

@end

// --- TaskInput ---
@implementation QXTaskInput

@synthesize TaskId;
@synthesize GroupId;
@synthesize AssigneeId;
@synthesize TodoStatus;
@synthesize Label;
@synthesize EstimateTime;
@synthesize SpentTime;
@synthesize IsClaiming;
@synthesize ToUserIds;
@synthesize TimetrackingHistoryUpdate;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTaskId:[dict valueForKey:@"TaskId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAssigneeId:[dict valueForKey:@"AssigneeId"]];
	[self setTodoStatus:[dict valueForKey:@"TodoStatus"]];
	[self setLabel:[dict valueForKey:@"Label"]];
	[self setEstimateTime:[dict valueForKey:@"EstimateTime"]];
	[self setSpentTime:[dict valueForKey:@"SpentTime"]];
	[self setIsClaiming:[[dict valueForKey:@"IsClaiming"] boolValue]];
	[self setToUserIds:[dict valueForKey:@"ToUserIds"]];
	[self setTimetrackingHistoryUpdate:[dict valueForKey:@"TimetrackingHistoryUpdate"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.TaskId forKey:@"TaskId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AssigneeId forKey:@"AssigneeId"];
	[dict setValue:self.TodoStatus forKey:@"TodoStatus"];
	[dict setValue:self.Label forKey:@"Label"];
	[dict setValue:self.EstimateTime forKey:@"EstimateTime"];
	[dict setValue:self.SpentTime forKey:@"SpentTime"];
	[dict setValue:[NSNumber numberWithBool:self.IsClaiming] forKey:@"IsClaiming"];
	[dict setValue:self.ToUserIds forKey:@"ToUserIds"];
	[dict setValue:self.TimetrackingHistoryUpdate forKey:@"TimetrackingHistoryUpdate"];

	return dict;
}

@end

// --- TaskPwMap ---
@implementation QXTaskPwMap

@synthesize Id;
@synthesize PriorityWeight;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setPriorityWeight:[dict valueForKey:@"PriorityWeight"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.PriorityWeight forKey:@"PriorityWeight"];

	return dict;
}

@end

// --- MyCount ---
@implementation QXMyCount

@synthesize UserId;
@synthesize FollowedUnreadCount;
@synthesize NotificationUnreadCount;
@synthesize ActiveTasksCount;
@synthesize OfflineMessageCount;
@synthesize GroupCounts;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];
	[self setFollowedUnreadCount:[dict valueForKey:@"FollowedUnreadCount"]];
	[self setNotificationUnreadCount:[dict valueForKey:@"NotificationUnreadCount"]];
	[self setActiveTasksCount:[dict valueForKey:@"ActiveTasksCount"]];
	[self setOfflineMessageCount:[dict valueForKey:@"OfflineMessageCount"]];

	NSMutableArray * mGroupCounts = [[NSMutableArray alloc] init];
	NSArray * lGroupCounts = [dict valueForKey:@"GroupCounts"];
	if ([lGroupCounts isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupCounts) {
			[mGroupCounts addObject: [[QXGroupCount alloc] initWithDictionary:d]];
		}
		[self setGroupCounts:mGroupCounts];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];
	[dict setValue:self.FollowedUnreadCount forKey:@"FollowedUnreadCount"];
	[dict setValue:self.NotificationUnreadCount forKey:@"NotificationUnreadCount"];
	[dict setValue:self.ActiveTasksCount forKey:@"ActiveTasksCount"];
	[dict setValue:self.OfflineMessageCount forKey:@"OfflineMessageCount"];

	NSMutableArray * mGroupCounts = [[NSMutableArray alloc] init];
	for (QXGroupCount * p in GroupCounts) {
		[mGroupCounts addObject:[p dictionary]];
	}
	[dict setValue:mGroupCounts forKey:@"GroupCounts"];
	

	return dict;
}

@end

// --- TaskOutline ---
@implementation QXTaskOutline

@synthesize Id;
@synthesize EntryTitle;
@synthesize EntryLink;
@synthesize IsComment;
@synthesize Assignee;
@synthesize AuthorName;
@synthesize Group;
@synthesize Age;
@synthesize CreatedAt;
@synthesize Status;
@synthesize StatusCode;
@synthesize Due;
@synthesize Label;
@synthesize LabelCode;
@synthesize EstimateTime;
@synthesize EstimateTimeFloat64;
@synthesize SpentTime;
@synthesize PriorityWeight;
@synthesize Priority;
@synthesize CompleteAtStr;
@synthesize CompleteAtUnixNano;
@synthesize IsTitleCreatedBy;
@synthesize ActionNeeded;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEntryTitle:[dict valueForKey:@"EntryTitle"]];
	[self setEntryLink:[dict valueForKey:@"EntryLink"]];
	[self setIsComment:[[dict valueForKey:@"IsComment"] boolValue]];

	id dictAssignee = [dict valueForKey:@"Assignee"];
	if ([dictAssignee isKindOfClass:[NSDictionary class]]){
		[self setAssignee:[[QXEmbedUser alloc] initWithDictionary:dictAssignee]];
	}
	[self setAuthorName:[dict valueForKey:@"AuthorName"]];

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXEmbedGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setAge:[dict valueForKey:@"Age"]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setStatusCode:[dict valueForKey:@"StatusCode"]];
	[self setDue:[dict valueForKey:@"Due"]];
	[self setLabel:[dict valueForKey:@"Label"]];
	[self setLabelCode:[dict valueForKey:@"LabelCode"]];
	[self setEstimateTime:[dict valueForKey:@"EstimateTime"]];
	[self setEstimateTimeFloat64:[dict valueForKey:@"EstimateTimeFloat64"]];
	[self setSpentTime:[dict valueForKey:@"SpentTime"]];
	[self setPriorityWeight:[dict valueForKey:@"PriorityWeight"]];
	[self setPriority:[dict valueForKey:@"Priority"]];
	[self setCompleteAtStr:[dict valueForKey:@"CompleteAtStr"]];
	[self setCompleteAtUnixNano:[dict valueForKey:@"CompleteAtUnixNano"]];
	[self setIsTitleCreatedBy:[[dict valueForKey:@"IsTitleCreatedBy"] boolValue]];
	[self setActionNeeded:[[dict valueForKey:@"ActionNeeded"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.EntryTitle forKey:@"EntryTitle"];
	[dict setValue:self.EntryLink forKey:@"EntryLink"];
	[dict setValue:[NSNumber numberWithBool:self.IsComment] forKey:@"IsComment"];
	[dict setValue:[self.Assignee dictionary] forKey:@"Assignee"];
	
	[dict setValue:self.AuthorName forKey:@"AuthorName"];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Age forKey:@"Age"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.StatusCode forKey:@"StatusCode"];
	[dict setValue:self.Due forKey:@"Due"];
	[dict setValue:self.Label forKey:@"Label"];
	[dict setValue:self.LabelCode forKey:@"LabelCode"];
	[dict setValue:self.EstimateTime forKey:@"EstimateTime"];
	[dict setValue:self.EstimateTimeFloat64 forKey:@"EstimateTimeFloat64"];
	[dict setValue:self.SpentTime forKey:@"SpentTime"];
	[dict setValue:self.PriorityWeight forKey:@"PriorityWeight"];
	[dict setValue:self.Priority forKey:@"Priority"];
	[dict setValue:self.CompleteAtStr forKey:@"CompleteAtStr"];
	[dict setValue:self.CompleteAtUnixNano forKey:@"CompleteAtUnixNano"];
	[dict setValue:[NSNumber numberWithBool:self.IsTitleCreatedBy] forKey:@"IsTitleCreatedBy"];
	[dict setValue:[NSNumber numberWithBool:self.ActionNeeded] forKey:@"ActionNeeded"];

	return dict;
}

@end

// --- BlogEntry ---
@implementation QXBlogEntry

@synthesize Id;
@synthesize Title;
@synthesize HtmlTitle;
@synthesize Slug;
@synthesize CreatedAt;
@synthesize LocalCreatedAt;
@synthesize Permalink;
@synthesize CreateCommentURL;
@synthesize HtmlContent;
@synthesize HtmlContentPart;
@synthesize Author;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setHtmlTitle:[dict valueForKey:@"HtmlTitle"]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setLocalCreatedAt:[dict valueForKey:@"LocalCreatedAt"]];
	[self setPermalink:[dict valueForKey:@"Permalink"]];
	[self setCreateCommentURL:[dict valueForKey:@"CreateCommentURL"]];
	[self setHtmlContent:[dict valueForKey:@"HtmlContent"]];
	[self setHtmlContentPart:[dict valueForKey:@"HtmlContentPart"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.HtmlTitle forKey:@"HtmlTitle"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:self.LocalCreatedAt forKey:@"LocalCreatedAt"];
	[dict setValue:self.Permalink forKey:@"Permalink"];
	[dict setValue:self.CreateCommentURL forKey:@"CreateCommentURL"];
	[dict setValue:self.HtmlContent forKey:@"HtmlContent"];
	[dict setValue:self.HtmlContentPart forKey:@"HtmlContentPart"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	

	return dict;
}

@end

// --- GroupUsers ---
@implementation QXGroupUsers

@synthesize GroupId;
@synthesize EmbedUsers;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	NSMutableArray * mEmbedUsers = [[NSMutableArray alloc] init];
	NSArray * lEmbedUsers = [dict valueForKey:@"EmbedUsers"];
	if ([lEmbedUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEmbedUsers) {
			[mEmbedUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setEmbedUsers:mEmbedUsers];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	NSMutableArray * mEmbedUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in EmbedUsers) {
		[mEmbedUsers addObject:[p dictionary]];
	}
	[dict setValue:mEmbedUsers forKey:@"EmbedUsers"];
	

	return dict;
}

@end

// --- Invitation ---
@implementation QXInvitation

@synthesize Email;
@synthesize Token;
@synthesize SentAgo;
@synthesize ByUser;
@synthesize HideInPendingList;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setToken:[dict valueForKey:@"Token"]];
	[self setSentAgo:[dict valueForKey:@"SentAgo"]];

	id dictByUser = [dict valueForKey:@"ByUser"];
	if ([dictByUser isKindOfClass:[NSDictionary class]]){
		[self setByUser:[[QXEmbedUser alloc] initWithDictionary:dictByUser]];
	}
	[self setHideInPendingList:[[dict valueForKey:@"HideInPendingList"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.SentAgo forKey:@"SentAgo"];
	[dict setValue:[self.ByUser dictionary] forKey:@"ByUser"];
	
	[dict setValue:[NSNumber numberWithBool:self.HideInPendingList] forKey:@"HideInPendingList"];

	return dict;
}

@end

// --- AbandonInfo ---
@implementation QXAbandonInfo

@synthesize AbandonFromOrg;
@synthesize AvailableOrgs;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictAbandonFromOrg = [dict valueForKey:@"AbandonFromOrg"];
	if ([dictAbandonFromOrg isKindOfClass:[NSDictionary class]]){
		[self setAbandonFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictAbandonFromOrg]];
	}

	NSMutableArray * mAvailableOrgs = [[NSMutableArray alloc] init];
	NSArray * lAvailableOrgs = [dict valueForKey:@"AvailableOrgs"];
	if ([lAvailableOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAvailableOrgs) {
			[mAvailableOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setAvailableOrgs:mAvailableOrgs];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.AbandonFromOrg dictionary] forKey:@"AbandonFromOrg"];
	

	NSMutableArray * mAvailableOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in AvailableOrgs) {
		[mAvailableOrgs addObject:[p dictionary]];
	}
	[dict setValue:mAvailableOrgs forKey:@"AvailableOrgs"];
	

	return dict;
}

@end

// --- GroupSelector ---
@implementation QXGroupSelector

@synthesize Header;
@synthesize SelectedGroupId;
@synthesize SysMessage;
@synthesize FollowingNormalGroups;
@synthesize FollowingSharedGroups;
@synthesize UnFollowingNormalGroups;
@synthesize UnFollowingSharedGroups;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setHeader:[dict valueForKey:@"Header"]];
	[self setSelectedGroupId:[dict valueForKey:@"SelectedGroupId"]];

	id dictSysMessage = [dict valueForKey:@"SysMessage"];
	if ([dictSysMessage isKindOfClass:[NSDictionary class]]){
		[self setSysMessage:[[QXGroupSelectorItem alloc] initWithDictionary:dictSysMessage]];
	}

	NSMutableArray * mFollowingNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingNormalGroups = [dict valueForKey:@"FollowingNormalGroups"];
	if ([lFollowingNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingNormalGroups) {
			[mFollowingNormalGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setFollowingNormalGroups:mFollowingNormalGroups];
	}

	NSMutableArray * mFollowingSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingSharedGroups = [dict valueForKey:@"FollowingSharedGroups"];
	if ([lFollowingSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingSharedGroups) {
			[mFollowingSharedGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setFollowingSharedGroups:mFollowingSharedGroups];
	}

	NSMutableArray * mUnFollowingNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowingNormalGroups = [dict valueForKey:@"UnFollowingNormalGroups"];
	if ([lUnFollowingNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowingNormalGroups) {
			[mUnFollowingNormalGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setUnFollowingNormalGroups:mUnFollowingNormalGroups];
	}

	NSMutableArray * mUnFollowingSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowingSharedGroups = [dict valueForKey:@"UnFollowingSharedGroups"];
	if ([lUnFollowingSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowingSharedGroups) {
			[mUnFollowingSharedGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setUnFollowingSharedGroups:mUnFollowingSharedGroups];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Header forKey:@"Header"];
	[dict setValue:self.SelectedGroupId forKey:@"SelectedGroupId"];
	[dict setValue:[self.SysMessage dictionary] forKey:@"SysMessage"];
	

	NSMutableArray * mFollowingNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in FollowingNormalGroups) {
		[mFollowingNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingNormalGroups forKey:@"FollowingNormalGroups"];
	

	NSMutableArray * mFollowingSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in FollowingSharedGroups) {
		[mFollowingSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingSharedGroups forKey:@"FollowingSharedGroups"];
	

	NSMutableArray * mUnFollowingNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in UnFollowingNormalGroups) {
		[mUnFollowingNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowingNormalGroups forKey:@"UnFollowingNormalGroups"];
	

	NSMutableArray * mUnFollowingSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in UnFollowingSharedGroups) {
		[mUnFollowingSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowingSharedGroups forKey:@"UnFollowingSharedGroups"];
	

	return dict;
}

@end

// --- TimeTrackingUpdateLog ---
@implementation QXTimeTrackingUpdateLog

@synthesize IsUpdateLog;
@synthesize IsDeleteLog;
@synthesize IsSelfUpdate;
@synthesize OldSpentTime;
@synthesize NewSpentTime;
@synthesize Owner;
@synthesize Updater;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIsUpdateLog:[[dict valueForKey:@"IsUpdateLog"] boolValue]];
	[self setIsDeleteLog:[[dict valueForKey:@"IsDeleteLog"] boolValue]];
	[self setIsSelfUpdate:[[dict valueForKey:@"IsSelfUpdate"] boolValue]];
	[self setOldSpentTime:[dict valueForKey:@"OldSpentTime"]];
	[self setNewSpentTime:[dict valueForKey:@"NewSpentTime"]];

	id dictOwner = [dict valueForKey:@"Owner"];
	if ([dictOwner isKindOfClass:[NSDictionary class]]){
		[self setOwner:[[QXEmbedUser alloc] initWithDictionary:dictOwner]];
	}

	id dictUpdater = [dict valueForKey:@"Updater"];
	if ([dictUpdater isKindOfClass:[NSDictionary class]]){
		[self setUpdater:[[QXEmbedUser alloc] initWithDictionary:dictUpdater]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IsUpdateLog] forKey:@"IsUpdateLog"];
	[dict setValue:[NSNumber numberWithBool:self.IsDeleteLog] forKey:@"IsDeleteLog"];
	[dict setValue:[NSNumber numberWithBool:self.IsSelfUpdate] forKey:@"IsSelfUpdate"];
	[dict setValue:self.OldSpentTime forKey:@"OldSpentTime"];
	[dict setValue:self.NewSpentTime forKey:@"NewSpentTime"];
	[dict setValue:[self.Owner dictionary] forKey:@"Owner"];
	
	[dict setValue:[self.Updater dictionary] forKey:@"Updater"];
	

	return dict;
}

@end

// --- LanguageSelector ---
@implementation QXLanguageSelector

@synthesize IsFirst;
@synthesize Index;
@synthesize SupportedLanguages;
@synthesize PreferredLanguages;
@synthesize RestLanguages;
@synthesize UILanguages;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIsFirst:[[dict valueForKey:@"IsFirst"] boolValue]];
	[self setIndex:[dict valueForKey:@"Index"]];

	NSMutableArray * mSupportedLanguages = [[NSMutableArray alloc] init];
	NSArray * lSupportedLanguages = [dict valueForKey:@"SupportedLanguages"];
	if ([lSupportedLanguages isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lSupportedLanguages) {
			[mSupportedLanguages addObject: [[QXSupportedLanguage alloc] initWithDictionary:d]];
		}
		[self setSupportedLanguages:mSupportedLanguages];
	}

	NSMutableArray * mPreferredLanguages = [[NSMutableArray alloc] init];
	NSArray * lPreferredLanguages = [dict valueForKey:@"PreferredLanguages"];
	if ([lPreferredLanguages isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lPreferredLanguages) {
			[mPreferredLanguages addObject: [[QXSupportedLanguage alloc] initWithDictionary:d]];
		}
		[self setPreferredLanguages:mPreferredLanguages];
	}

	NSMutableArray * mRestLanguages = [[NSMutableArray alloc] init];
	NSArray * lRestLanguages = [dict valueForKey:@"RestLanguages"];
	if ([lRestLanguages isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lRestLanguages) {
			[mRestLanguages addObject: [[QXSupportedLanguage alloc] initWithDictionary:d]];
		}
		[self setRestLanguages:mRestLanguages];
	}

	NSMutableArray * mUILanguages = [[NSMutableArray alloc] init];
	NSArray * lUILanguages = [dict valueForKey:@"UILanguages"];
	if ([lUILanguages isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUILanguages) {
			[mUILanguages addObject: [[QXSupportedLanguage alloc] initWithDictionary:d]];
		}
		[self setUILanguages:mUILanguages];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IsFirst] forKey:@"IsFirst"];
	[dict setValue:self.Index forKey:@"Index"];

	NSMutableArray * mSupportedLanguages = [[NSMutableArray alloc] init];
	for (QXSupportedLanguage * p in SupportedLanguages) {
		[mSupportedLanguages addObject:[p dictionary]];
	}
	[dict setValue:mSupportedLanguages forKey:@"SupportedLanguages"];
	

	NSMutableArray * mPreferredLanguages = [[NSMutableArray alloc] init];
	for (QXSupportedLanguage * p in PreferredLanguages) {
		[mPreferredLanguages addObject:[p dictionary]];
	}
	[dict setValue:mPreferredLanguages forKey:@"PreferredLanguages"];
	

	NSMutableArray * mRestLanguages = [[NSMutableArray alloc] init];
	for (QXSupportedLanguage * p in RestLanguages) {
		[mRestLanguages addObject:[p dictionary]];
	}
	[dict setValue:mRestLanguages forKey:@"RestLanguages"];
	

	NSMutableArray * mUILanguages = [[NSMutableArray alloc] init];
	for (QXSupportedLanguage * p in UILanguages) {
		[mUILanguages addObject:[p dictionary]];
	}
	[dict setValue:mUILanguages forKey:@"UILanguages"];
	

	return dict;
}

@end

// --- AdvancedToDoSettings ---
@implementation QXAdvancedToDoSettings

@synthesize Enabled;
@synthesize EnableTimeEstimate;
@synthesize EnableTimeTracking;
@synthesize TimeUnit;
@synthesize ProjectManager;
@synthesize Labels;
@synthesize NotYetOpenStatuses;
@synthesize OpenStatuses;
@synthesize ClosedStatuses;
@synthesize DefaultNotYetOpenStatus;
@synthesize DefaultOpenStatus;
@synthesize DefaultClosedStatus;
@synthesize LabelCounter;
@synthesize NotYetOpenStatusCounter;
@synthesize OpenStatusCounter;
@synthesize ClosedStatusCounter;
@synthesize EnabledSharingOrgs;
@synthesize ShowedThrowawayStatusSuggestion;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEnabled:[[dict valueForKey:@"Enabled"] boolValue]];
	[self setEnableTimeEstimate:[[dict valueForKey:@"EnableTimeEstimate"] boolValue]];
	[self setEnableTimeTracking:[[dict valueForKey:@"EnableTimeTracking"] boolValue]];
	[self setTimeUnit:[dict valueForKey:@"TimeUnit"]];

	id dictProjectManager = [dict valueForKey:@"ProjectManager"];
	if ([dictProjectManager isKindOfClass:[NSDictionary class]]){
		[self setProjectManager:[[QXEmbedUser alloc] initWithDictionary:dictProjectManager]];
	}

	NSMutableArray * mLabels = [[NSMutableArray alloc] init];
	NSArray * lLabels = [dict valueForKey:@"Labels"];
	if ([lLabels isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lLabels) {
			[mLabels addObject: [[QXTagIndex alloc] initWithDictionary:d]];
		}
		[self setLabels:mLabels];
	}

	NSMutableArray * mNotYetOpenStatuses = [[NSMutableArray alloc] init];
	NSArray * lNotYetOpenStatuses = [dict valueForKey:@"NotYetOpenStatuses"];
	if ([lNotYetOpenStatuses isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNotYetOpenStatuses) {
			[mNotYetOpenStatuses addObject: [[QXTagIndex alloc] initWithDictionary:d]];
		}
		[self setNotYetOpenStatuses:mNotYetOpenStatuses];
	}

	NSMutableArray * mOpenStatuses = [[NSMutableArray alloc] init];
	NSArray * lOpenStatuses = [dict valueForKey:@"OpenStatuses"];
	if ([lOpenStatuses isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOpenStatuses) {
			[mOpenStatuses addObject: [[QXTagIndex alloc] initWithDictionary:d]];
		}
		[self setOpenStatuses:mOpenStatuses];
	}

	NSMutableArray * mClosedStatuses = [[NSMutableArray alloc] init];
	NSArray * lClosedStatuses = [dict valueForKey:@"ClosedStatuses"];
	if ([lClosedStatuses isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lClosedStatuses) {
			[mClosedStatuses addObject: [[QXTagIndex alloc] initWithDictionary:d]];
		}
		[self setClosedStatuses:mClosedStatuses];
	}

	id dictDefaultNotYetOpenStatus = [dict valueForKey:@"DefaultNotYetOpenStatus"];
	if ([dictDefaultNotYetOpenStatus isKindOfClass:[NSDictionary class]]){
		[self setDefaultNotYetOpenStatus:[[QXTagIndex alloc] initWithDictionary:dictDefaultNotYetOpenStatus]];
	}

	id dictDefaultOpenStatus = [dict valueForKey:@"DefaultOpenStatus"];
	if ([dictDefaultOpenStatus isKindOfClass:[NSDictionary class]]){
		[self setDefaultOpenStatus:[[QXTagIndex alloc] initWithDictionary:dictDefaultOpenStatus]];
	}

	id dictDefaultClosedStatus = [dict valueForKey:@"DefaultClosedStatus"];
	if ([dictDefaultClosedStatus isKindOfClass:[NSDictionary class]]){
		[self setDefaultClosedStatus:[[QXTagIndex alloc] initWithDictionary:dictDefaultClosedStatus]];
	}
	[self setLabelCounter:[dict valueForKey:@"LabelCounter"]];
	[self setNotYetOpenStatusCounter:[dict valueForKey:@"NotYetOpenStatusCounter"]];
	[self setOpenStatusCounter:[dict valueForKey:@"OpenStatusCounter"]];
	[self setClosedStatusCounter:[dict valueForKey:@"ClosedStatusCounter"]];
	[self setEnabledSharingOrgs:[dict valueForKey:@"EnabledSharingOrgs"]];
	[self setShowedThrowawayStatusSuggestion:[[dict valueForKey:@"ShowedThrowawayStatusSuggestion"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Enabled] forKey:@"Enabled"];
	[dict setValue:[NSNumber numberWithBool:self.EnableTimeEstimate] forKey:@"EnableTimeEstimate"];
	[dict setValue:[NSNumber numberWithBool:self.EnableTimeTracking] forKey:@"EnableTimeTracking"];
	[dict setValue:self.TimeUnit forKey:@"TimeUnit"];
	[dict setValue:[self.ProjectManager dictionary] forKey:@"ProjectManager"];
	

	NSMutableArray * mLabels = [[NSMutableArray alloc] init];
	for (QXTagIndex * p in Labels) {
		[mLabels addObject:[p dictionary]];
	}
	[dict setValue:mLabels forKey:@"Labels"];
	

	NSMutableArray * mNotYetOpenStatuses = [[NSMutableArray alloc] init];
	for (QXTagIndex * p in NotYetOpenStatuses) {
		[mNotYetOpenStatuses addObject:[p dictionary]];
	}
	[dict setValue:mNotYetOpenStatuses forKey:@"NotYetOpenStatuses"];
	

	NSMutableArray * mOpenStatuses = [[NSMutableArray alloc] init];
	for (QXTagIndex * p in OpenStatuses) {
		[mOpenStatuses addObject:[p dictionary]];
	}
	[dict setValue:mOpenStatuses forKey:@"OpenStatuses"];
	

	NSMutableArray * mClosedStatuses = [[NSMutableArray alloc] init];
	for (QXTagIndex * p in ClosedStatuses) {
		[mClosedStatuses addObject:[p dictionary]];
	}
	[dict setValue:mClosedStatuses forKey:@"ClosedStatuses"];
	
	[dict setValue:[self.DefaultNotYetOpenStatus dictionary] forKey:@"DefaultNotYetOpenStatus"];
	
	[dict setValue:[self.DefaultOpenStatus dictionary] forKey:@"DefaultOpenStatus"];
	
	[dict setValue:[self.DefaultClosedStatus dictionary] forKey:@"DefaultClosedStatus"];
	
	[dict setValue:self.LabelCounter forKey:@"LabelCounter"];
	[dict setValue:self.NotYetOpenStatusCounter forKey:@"NotYetOpenStatusCounter"];
	[dict setValue:self.OpenStatusCounter forKey:@"OpenStatusCounter"];
	[dict setValue:self.ClosedStatusCounter forKey:@"ClosedStatusCounter"];
	[dict setValue:self.EnabledSharingOrgs forKey:@"EnabledSharingOrgs"];
	[dict setValue:[NSNumber numberWithBool:self.ShowedThrowawayStatusSuggestion] forKey:@"ShowedThrowawayStatusSuggestion"];

	return dict;
}

@end

// --- TranslatedThread ---
@implementation QXTranslatedThread

@synthesize Title;
@synthesize Content;
@synthesize Comments;
@synthesize IsCommentOnly;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	NSArray * lComments = [dict valueForKey:@"Comments"];
	if ([lComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lComments) {
			[mComments addObject: [[QXTranslatedComment alloc] initWithDictionary:d]];
		}
		[self setComments:mComments];
	}
	[self setIsCommentOnly:[[dict valueForKey:@"IsCommentOnly"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	for (QXTranslatedComment * p in Comments) {
		[mComments addObject:[p dictionary]];
	}
	[dict setValue:mComments forKey:@"Comments"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsCommentOnly] forKey:@"IsCommentOnly"];

	return dict;
}

@end

// --- EntryVersion ---
@implementation QXEntryVersion

@synthesize Id;
@synthesize GroupId;
@synthesize UpdatedAt;
@synthesize LocalUpdatedAt;
@synthesize UpdatedAtUnixNano;
@synthesize CurrentVersionEditor;
@synthesize IsNewVersion;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUpdatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"UpdatedAt"]]];
	[self setLocalUpdatedAt:[dict valueForKey:@"LocalUpdatedAt"]];
	[self setUpdatedAtUnixNano:[dict valueForKey:@"UpdatedAtUnixNano"]];

	id dictCurrentVersionEditor = [dict valueForKey:@"CurrentVersionEditor"];
	if ([dictCurrentVersionEditor isKindOfClass:[NSDictionary class]]){
		[self setCurrentVersionEditor:[[QXEmbedUser alloc] initWithDictionary:dictCurrentVersionEditor]];
	}
	[self setIsNewVersion:[[dict valueForKey:@"IsNewVersion"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:[QXQortexapi stringFromDate:self.UpdatedAt] forKey:@"UpdatedAt"];
	[dict setValue:self.LocalUpdatedAt forKey:@"LocalUpdatedAt"];
	[dict setValue:self.UpdatedAtUnixNano forKey:@"UpdatedAtUnixNano"];
	[dict setValue:[self.CurrentVersionEditor dictionary] forKey:@"CurrentVersionEditor"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsNewVersion] forKey:@"IsNewVersion"];

	return dict;
}

@end

// --- Request ---
@implementation QXRequest

@synthesize Id;
@synthesize CurrentPrefixURL;
@synthesize Info;
@synthesize ActionButton;
@synthesize FromOrg;
@synthesize ToOrg;
@synthesize SharedGroup;
@synthesize SharedOrgIdHex;
@synthesize FromUserIdHex;
@synthesize SharedInvitee;
@synthesize SharedInviter;
@synthesize SharedResponsor;
@synthesize ToEmail;
@synthesize State;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setCurrentPrefixURL:[dict valueForKey:@"CurrentPrefixURL"]];
	[self setInfo:[dict valueForKey:@"Info"]];
	[self setActionButton:[dict valueForKey:@"ActionButton"]];

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	id dictToOrg = [dict valueForKey:@"ToOrg"];
	if ([dictToOrg isKindOfClass:[NSDictionary class]]){
		[self setToOrg:[[QXEmbedOrg alloc] initWithDictionary:dictToOrg]];
	}

	id dictSharedGroup = [dict valueForKey:@"SharedGroup"];
	if ([dictSharedGroup isKindOfClass:[NSDictionary class]]){
		[self setSharedGroup:[[QXEmbedGroup alloc] initWithDictionary:dictSharedGroup]];
	}
	[self setSharedOrgIdHex:[dict valueForKey:@"SharedOrgIdHex"]];
	[self setFromUserIdHex:[dict valueForKey:@"FromUserIdHex"]];

	id dictSharedInvitee = [dict valueForKey:@"SharedInvitee"];
	if ([dictSharedInvitee isKindOfClass:[NSDictionary class]]){
		[self setSharedInvitee:[[QXEmbedUser alloc] initWithDictionary:dictSharedInvitee]];
	}

	id dictSharedInviter = [dict valueForKey:@"SharedInviter"];
	if ([dictSharedInviter isKindOfClass:[NSDictionary class]]){
		[self setSharedInviter:[[QXEmbedUser alloc] initWithDictionary:dictSharedInviter]];
	}

	id dictSharedResponsor = [dict valueForKey:@"SharedResponsor"];
	if ([dictSharedResponsor isKindOfClass:[NSDictionary class]]){
		[self setSharedResponsor:[[QXEmbedUser alloc] initWithDictionary:dictSharedResponsor]];
	}
	[self setToEmail:[dict valueForKey:@"ToEmail"]];
	[self setState:[dict valueForKey:@"State"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.CurrentPrefixURL forKey:@"CurrentPrefixURL"];
	[dict setValue:self.Info forKey:@"Info"];
	[dict setValue:self.ActionButton forKey:@"ActionButton"];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	
	[dict setValue:[self.ToOrg dictionary] forKey:@"ToOrg"];
	
	[dict setValue:[self.SharedGroup dictionary] forKey:@"SharedGroup"];
	
	[dict setValue:self.SharedOrgIdHex forKey:@"SharedOrgIdHex"];
	[dict setValue:self.FromUserIdHex forKey:@"FromUserIdHex"];
	[dict setValue:[self.SharedInvitee dictionary] forKey:@"SharedInvitee"];
	
	[dict setValue:[self.SharedInviter dictionary] forKey:@"SharedInviter"];
	
	[dict setValue:[self.SharedResponsor dictionary] forKey:@"SharedResponsor"];
	
	[dict setValue:self.ToEmail forKey:@"ToEmail"];
	[dict setValue:self.State forKey:@"State"];

	return dict;
}

@end

// --- ShareRequest ---
@implementation QXShareRequest

@synthesize Id;
@synthesize FromUser;
@synthesize ToUser;
@synthesize Responser;
@synthesize FromOrg;
@synthesize ToOrg;
@synthesize JoinedOrgs;
@synthesize SharedGroup;
@synthesize Token;
@synthesize ToEmail;
@synthesize PendingDuration;
@synthesize IsNewAccount;
@synthesize IsPending;
@synthesize IsAccepted;
@synthesize IsRejected;
@synthesize IsForwarded;
@synthesize IsCanceled;
@synthesize IsStopped;
@synthesize Info;
@synthesize ActionButton;
@synthesize RequestBarHtml;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];

	id dictFromUser = [dict valueForKey:@"FromUser"];
	if ([dictFromUser isKindOfClass:[NSDictionary class]]){
		[self setFromUser:[[QXEmbedUser alloc] initWithDictionary:dictFromUser]];
	}

	id dictToUser = [dict valueForKey:@"ToUser"];
	if ([dictToUser isKindOfClass:[NSDictionary class]]){
		[self setToUser:[[QXEmbedUser alloc] initWithDictionary:dictToUser]];
	}

	id dictResponser = [dict valueForKey:@"Responser"];
	if ([dictResponser isKindOfClass:[NSDictionary class]]){
		[self setResponser:[[QXEmbedUser alloc] initWithDictionary:dictResponser]];
	}

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	id dictToOrg = [dict valueForKey:@"ToOrg"];
	if ([dictToOrg isKindOfClass:[NSDictionary class]]){
		[self setToOrg:[[QXEmbedOrg alloc] initWithDictionary:dictToOrg]];
	}

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	NSArray * lJoinedOrgs = [dict valueForKey:@"JoinedOrgs"];
	if ([lJoinedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lJoinedOrgs) {
			[mJoinedOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setJoinedOrgs:mJoinedOrgs];
	}

	id dictSharedGroup = [dict valueForKey:@"SharedGroup"];
	if ([dictSharedGroup isKindOfClass:[NSDictionary class]]){
		[self setSharedGroup:[[QXEmbedGroup alloc] initWithDictionary:dictSharedGroup]];
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setToEmail:[dict valueForKey:@"ToEmail"]];
	[self setPendingDuration:[dict valueForKey:@"PendingDuration"]];
	[self setIsNewAccount:[[dict valueForKey:@"IsNewAccount"] boolValue]];
	[self setIsPending:[[dict valueForKey:@"IsPending"] boolValue]];
	[self setIsAccepted:[[dict valueForKey:@"IsAccepted"] boolValue]];
	[self setIsRejected:[[dict valueForKey:@"IsRejected"] boolValue]];
	[self setIsForwarded:[[dict valueForKey:@"IsForwarded"] boolValue]];
	[self setIsCanceled:[[dict valueForKey:@"IsCanceled"] boolValue]];
	[self setIsStopped:[[dict valueForKey:@"IsStopped"] boolValue]];
	[self setInfo:[dict valueForKey:@"Info"]];
	[self setActionButton:[dict valueForKey:@"ActionButton"]];
	[self setRequestBarHtml:[dict valueForKey:@"RequestBarHtml"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:[self.FromUser dictionary] forKey:@"FromUser"];
	
	[dict setValue:[self.ToUser dictionary] forKey:@"ToUser"];
	
	[dict setValue:[self.Responser dictionary] forKey:@"Responser"];
	
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	
	[dict setValue:[self.ToOrg dictionary] forKey:@"ToOrg"];
	

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in JoinedOrgs) {
		[mJoinedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mJoinedOrgs forKey:@"JoinedOrgs"];
	
	[dict setValue:[self.SharedGroup dictionary] forKey:@"SharedGroup"];
	
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.ToEmail forKey:@"ToEmail"];
	[dict setValue:self.PendingDuration forKey:@"PendingDuration"];
	[dict setValue:[NSNumber numberWithBool:self.IsNewAccount] forKey:@"IsNewAccount"];
	[dict setValue:[NSNumber numberWithBool:self.IsPending] forKey:@"IsPending"];
	[dict setValue:[NSNumber numberWithBool:self.IsAccepted] forKey:@"IsAccepted"];
	[dict setValue:[NSNumber numberWithBool:self.IsRejected] forKey:@"IsRejected"];
	[dict setValue:[NSNumber numberWithBool:self.IsForwarded] forKey:@"IsForwarded"];
	[dict setValue:[NSNumber numberWithBool:self.IsCanceled] forKey:@"IsCanceled"];
	[dict setValue:[NSNumber numberWithBool:self.IsStopped] forKey:@"IsStopped"];
	[dict setValue:self.Info forKey:@"Info"];
	[dict setValue:self.ActionButton forKey:@"ActionButton"];
	[dict setValue:self.RequestBarHtml forKey:@"RequestBarHtml"];

	return dict;
}

@end

// --- GroupSharingInfo ---
@implementation QXGroupSharingInfo

@synthesize IsSharing;
@synthesize FromOrg;
@synthesize AccpetedOrgs;
@synthesize ForwardedOrgs;
@synthesize PendingToEmails;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIsSharing:[[dict valueForKey:@"IsSharing"] boolValue]];

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	NSMutableArray * mAccpetedOrgs = [[NSMutableArray alloc] init];
	NSArray * lAccpetedOrgs = [dict valueForKey:@"AccpetedOrgs"];
	if ([lAccpetedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAccpetedOrgs) {
			[mAccpetedOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setAccpetedOrgs:mAccpetedOrgs];
	}

	NSMutableArray * mForwardedOrgs = [[NSMutableArray alloc] init];
	NSArray * lForwardedOrgs = [dict valueForKey:@"ForwardedOrgs"];
	if ([lForwardedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lForwardedOrgs) {
			[mForwardedOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setForwardedOrgs:mForwardedOrgs];
	}
	[self setPendingToEmails:[dict valueForKey:@"PendingToEmails"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IsSharing] forKey:@"IsSharing"];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	

	NSMutableArray * mAccpetedOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in AccpetedOrgs) {
		[mAccpetedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mAccpetedOrgs forKey:@"AccpetedOrgs"];
	

	NSMutableArray * mForwardedOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in ForwardedOrgs) {
		[mForwardedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mForwardedOrgs forKey:@"ForwardedOrgs"];
	
	[dict setValue:self.PendingToEmails forKey:@"PendingToEmails"];

	return dict;
}

@end

// --- Message ---
@implementation QXMessage

@synthesize Id;
@synthesize ConversationId;
@synthesize UserId;
@synthesize Content;
@synthesize HtmlContent;
@synthesize CreatedAt;
@synthesize EmbedUser;
@synthesize ShowUser;
@synthesize IsOffline;
@synthesize HighlightedContent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setConversationId:[dict valueForKey:@"ConversationId"]];
	[self setUserId:[dict valueForKey:@"UserId"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setHtmlContent:[dict valueForKey:@"HtmlContent"]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];

	id dictEmbedUser = [dict valueForKey:@"EmbedUser"];
	if ([dictEmbedUser isKindOfClass:[NSDictionary class]]){
		[self setEmbedUser:[[QXEmbedUser alloc] initWithDictionary:dictEmbedUser]];
	}
	[self setShowUser:[[dict valueForKey:@"ShowUser"] boolValue]];
	[self setIsOffline:[[dict valueForKey:@"IsOffline"] boolValue]];
	[self setHighlightedContent:[dict valueForKey:@"HighlightedContent"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.ConversationId forKey:@"ConversationId"];
	[dict setValue:self.UserId forKey:@"UserId"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.HtmlContent forKey:@"HtmlContent"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[self.EmbedUser dictionary] forKey:@"EmbedUser"];
	
	[dict setValue:[NSNumber numberWithBool:self.ShowUser] forKey:@"ShowUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsOffline] forKey:@"IsOffline"];
	[dict setValue:self.HighlightedContent forKey:@"HighlightedContent"];

	return dict;
}

@end

// --- EntryInput ---
@implementation QXEntryInput

@synthesize Id;
@synthesize EType;
@synthesize Title;
@synthesize Content;
@synthesize GroupId;
@synthesize IsToGroup;
@synthesize ToUserIds;
@synthesize TodoUserIds;
@synthesize MentionedUserIds;
@synthesize IsAcknowledgement;
@synthesize IsToDo;
@synthesize TaskDue;
@synthesize TodoStatus;
@synthesize Priority;
@synthesize Label;
@synthesize EstimateTime;
@synthesize RootId;
@synthesize NewVersion;
@synthesize OldGroupId;
@synthesize LastUpdateAt;
@synthesize KnowledgeBase;
@synthesize AnyoneCanEdit;
@synthesize Presentation;
@synthesize IsFromEmail;
@synthesize IsPublished;
@synthesize Slug;
@synthesize Email;
@synthesize Name;
@synthesize InlineHelp;
@synthesize LinkTitle;
@synthesize BaseOnEntryId;
@synthesize PublishedToUsers;
@synthesize LocaleName;
@synthesize BasedPostId;
@synthesize GroupIdOfBasedPost;
@synthesize SelectionTextInFo;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEType:[dict valueForKey:@"EType"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setIsToGroup:[dict valueForKey:@"IsToGroup"]];
	[self setToUserIds:[dict valueForKey:@"ToUserIds"]];
	[self setTodoUserIds:[dict valueForKey:@"TodoUserIds"]];
	[self setMentionedUserIds:[dict valueForKey:@"MentionedUserIds"]];
	[self setIsAcknowledgement:[[dict valueForKey:@"IsAcknowledgement"] boolValue]];
	[self setIsToDo:[[dict valueForKey:@"IsToDo"] boolValue]];
	[self setTaskDue:[dict valueForKey:@"TaskDue"]];
	[self setTodoStatus:[dict valueForKey:@"TodoStatus"]];
	[self setPriority:[dict valueForKey:@"Priority"]];
	[self setLabel:[dict valueForKey:@"Label"]];
	[self setEstimateTime:[dict valueForKey:@"EstimateTime"]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setNewVersion:[[dict valueForKey:@"NewVersion"] boolValue]];
	[self setOldGroupId:[dict valueForKey:@"OldGroupId"]];
	[self setLastUpdateAt:[dict valueForKey:@"LastUpdateAt"]];
	[self setKnowledgeBase:[[dict valueForKey:@"KnowledgeBase"] boolValue]];
	[self setAnyoneCanEdit:[[dict valueForKey:@"AnyoneCanEdit"] boolValue]];
	[self setPresentation:[[dict valueForKey:@"Presentation"] boolValue]];
	[self setIsFromEmail:[[dict valueForKey:@"IsFromEmail"] boolValue]];
	[self setIsPublished:[[dict valueForKey:@"IsPublished"] boolValue]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setInlineHelp:[[dict valueForKey:@"InlineHelp"] boolValue]];
	[self setLinkTitle:[dict valueForKey:@"LinkTitle"]];
	[self setBaseOnEntryId:[dict valueForKey:@"BaseOnEntryId"]];
	[self setPublishedToUsers:[[dict valueForKey:@"PublishedToUsers"] boolValue]];
	[self setLocaleName:[dict valueForKey:@"LocaleName"]];
	[self setBasedPostId:[dict valueForKey:@"BasedPostId"]];
	[self setGroupIdOfBasedPost:[dict valueForKey:@"GroupIdOfBasedPost"]];

	id dictSelectionTextInFo = [dict valueForKey:@"SelectionTextInFo"];
	if ([dictSelectionTextInFo isKindOfClass:[NSDictionary class]]){
		[self setSelectionTextInFo:[[QXSelectionTextInFo alloc] initWithDictionary:dictSelectionTextInFo]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.IsToGroup forKey:@"IsToGroup"];
	[dict setValue:self.ToUserIds forKey:@"ToUserIds"];
	[dict setValue:self.TodoUserIds forKey:@"TodoUserIds"];
	[dict setValue:self.MentionedUserIds forKey:@"MentionedUserIds"];
	[dict setValue:[NSNumber numberWithBool:self.IsAcknowledgement] forKey:@"IsAcknowledgement"];
	[dict setValue:[NSNumber numberWithBool:self.IsToDo] forKey:@"IsToDo"];
	[dict setValue:self.TaskDue forKey:@"TaskDue"];
	[dict setValue:self.TodoStatus forKey:@"TodoStatus"];
	[dict setValue:self.Priority forKey:@"Priority"];
	[dict setValue:self.Label forKey:@"Label"];
	[dict setValue:self.EstimateTime forKey:@"EstimateTime"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:[NSNumber numberWithBool:self.NewVersion] forKey:@"NewVersion"];
	[dict setValue:self.OldGroupId forKey:@"OldGroupId"];
	[dict setValue:self.LastUpdateAt forKey:@"LastUpdateAt"];
	[dict setValue:[NSNumber numberWithBool:self.KnowledgeBase] forKey:@"KnowledgeBase"];
	[dict setValue:[NSNumber numberWithBool:self.AnyoneCanEdit] forKey:@"AnyoneCanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.Presentation] forKey:@"Presentation"];
	[dict setValue:[NSNumber numberWithBool:self.IsFromEmail] forKey:@"IsFromEmail"];
	[dict setValue:[NSNumber numberWithBool:self.IsPublished] forKey:@"IsPublished"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:[NSNumber numberWithBool:self.InlineHelp] forKey:@"InlineHelp"];
	[dict setValue:self.LinkTitle forKey:@"LinkTitle"];
	[dict setValue:self.BaseOnEntryId forKey:@"BaseOnEntryId"];
	[dict setValue:[NSNumber numberWithBool:self.PublishedToUsers] forKey:@"PublishedToUsers"];
	[dict setValue:self.LocaleName forKey:@"LocaleName"];
	[dict setValue:self.BasedPostId forKey:@"BasedPostId"];
	[dict setValue:self.GroupIdOfBasedPost forKey:@"GroupIdOfBasedPost"];
	[dict setValue:[self.SelectionTextInFo dictionary] forKey:@"SelectionTextInFo"];
	

	return dict;
}

@end

// --- QortexSupport ---
@implementation QXQortexSupport

@synthesize Audience;
@synthesize IsToOffical;
@synthesize IsToAllUsers;
@synthesize IsToAllAdmins;
@synthesize IsToOrganizations;
@synthesize FromOrg;
@synthesize ToOrgs;
@synthesize ToOrgsHtml;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAudience:[dict valueForKey:@"Audience"]];
	[self setIsToOffical:[[dict valueForKey:@"IsToOffical"] boolValue]];
	[self setIsToAllUsers:[[dict valueForKey:@"IsToAllUsers"] boolValue]];
	[self setIsToAllAdmins:[[dict valueForKey:@"IsToAllAdmins"] boolValue]];
	[self setIsToOrganizations:[[dict valueForKey:@"IsToOrganizations"] boolValue]];

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	NSMutableArray * mToOrgs = [[NSMutableArray alloc] init];
	NSArray * lToOrgs = [dict valueForKey:@"ToOrgs"];
	if ([lToOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToOrgs) {
			[mToOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setToOrgs:mToOrgs];
	}
	[self setToOrgsHtml:[dict valueForKey:@"ToOrgsHtml"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Audience forKey:@"Audience"];
	[dict setValue:[NSNumber numberWithBool:self.IsToOffical] forKey:@"IsToOffical"];
	[dict setValue:[NSNumber numberWithBool:self.IsToAllUsers] forKey:@"IsToAllUsers"];
	[dict setValue:[NSNumber numberWithBool:self.IsToAllAdmins] forKey:@"IsToAllAdmins"];
	[dict setValue:[NSNumber numberWithBool:self.IsToOrganizations] forKey:@"IsToOrganizations"];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	

	NSMutableArray * mToOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in ToOrgs) {
		[mToOrgs addObject:[p dictionary]];
	}
	[dict setValue:mToOrgs forKey:@"ToOrgs"];
	
	[dict setValue:self.ToOrgsHtml forKey:@"ToOrgsHtml"];

	return dict;
}

@end

// --- EmbedEntry ---
@implementation QXEmbedEntry

@synthesize Id;
@synthesize GroupId;
@synthesize GroupName;
@synthesize Title;
@synthesize HtmlTitle;
@synthesize EType;
@synthesize Author;
@synthesize ToUsers;
@synthesize Link;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setGroupName:[dict valueForKey:@"GroupName"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setHtmlTitle:[dict valueForKey:@"HtmlTitle"]];
	[self setEType:[dict valueForKey:@"EType"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	NSArray * lToUsers = [dict valueForKey:@"ToUsers"];
	if ([lToUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToUsers) {
			[mToUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setToUsers:mToUsers];
	}
	[self setLink:[dict valueForKey:@"Link"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.GroupName forKey:@"GroupName"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.HtmlTitle forKey:@"HtmlTitle"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in ToUsers) {
		[mToUsers addObject:[p dictionary]];
	}
	[dict setValue:mToUsers forKey:@"ToUsers"];
	
	[dict setValue:self.Link forKey:@"Link"];

	return dict;
}

@end

// --- RelatedEntry ---
@implementation QXRelatedEntry

@synthesize HtmlTitle;
@synthesize Link;
@synthesize LocalHumanCreatedAt;
@synthesize Author;
@synthesize IsComment;
@synthesize IsEmbedded;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setHtmlTitle:[dict valueForKey:@"HtmlTitle"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setLocalHumanCreatedAt:[dict valueForKey:@"LocalHumanCreatedAt"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}
	[self setIsComment:[[dict valueForKey:@"IsComment"] boolValue]];
	[self setIsEmbedded:[[dict valueForKey:@"IsEmbedded"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.HtmlTitle forKey:@"HtmlTitle"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.LocalHumanCreatedAt forKey:@"LocalHumanCreatedAt"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsComment] forKey:@"IsComment"];
	[dict setValue:[NSNumber numberWithBool:self.IsEmbedded] forKey:@"IsEmbedded"];

	return dict;
}

@end

// --- OpenAdvancedToDosBucket ---
@implementation QXOpenAdvancedToDosBucket

@synthesize Title;
@synthesize ToDoSettings;
@synthesize ToDos;
@synthesize LenOfToDos;
@synthesize EstimateTotal;
@synthesize EstimateUnit;
@synthesize Editable;
@synthesize Followers;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];

	id dictToDoSettings = [dict valueForKey:@"ToDoSettings"];
	if ([dictToDoSettings isKindOfClass:[NSDictionary class]]){
		[self setToDoSettings:[[QXAdvancedToDoSettings alloc] initWithDictionary:dictToDoSettings]];
	}

	NSMutableArray * mToDos = [[NSMutableArray alloc] init];
	NSArray * lToDos = [dict valueForKey:@"ToDos"];
	if ([lToDos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToDos) {
			[mToDos addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setToDos:mToDos];
	}
	[self setLenOfToDos:[dict valueForKey:@"LenOfToDos"]];
	[self setEstimateTotal:[dict valueForKey:@"EstimateTotal"]];
	[self setEstimateUnit:[dict valueForKey:@"EstimateUnit"]];
	[self setEditable:[[dict valueForKey:@"Editable"] boolValue]];

	NSMutableArray * mFollowers = [[NSMutableArray alloc] init];
	NSArray * lFollowers = [dict valueForKey:@"Followers"];
	if ([lFollowers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowers) {
			[mFollowers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setFollowers:mFollowers];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:[self.ToDoSettings dictionary] forKey:@"ToDoSettings"];
	

	NSMutableArray * mToDos = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in ToDos) {
		[mToDos addObject:[p dictionary]];
	}
	[dict setValue:mToDos forKey:@"ToDos"];
	
	[dict setValue:self.LenOfToDos forKey:@"LenOfToDos"];
	[dict setValue:self.EstimateTotal forKey:@"EstimateTotal"];
	[dict setValue:self.EstimateUnit forKey:@"EstimateUnit"];
	[dict setValue:[NSNumber numberWithBool:self.Editable] forKey:@"Editable"];

	NSMutableArray * mFollowers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in Followers) {
		[mFollowers addObject:[p dictionary]];
	}
	[dict setValue:mFollowers forKey:@"Followers"];
	

	return dict;
}

@end

// --- Group ---
@implementation QXGroup

@synthesize Id;
@synthesize Name;
@synthesize Description;
@synthesize GType;
@synthesize LogoURL;
@synthesize IconName;
@synthesize Link;
@synthesize TaskLink;
@synthesize Slug;
@synthesize Author;
@synthesize IsAdmin;
@synthesize IsPrivate;
@synthesize Editable;
@synthesize Managable;
@synthesize Accessible;
@synthesize FollowedByMe;
@synthesize AdministratedByMe;
@synthesize IsPreShared;
@synthesize IsShared;
@synthesize IsDefaultLogoURL;
@synthesize HostOrgName;
@synthesize IsDispayHostOrgName;
@synthesize EntriesCount;
@synthesize FollowersCount;
@synthesize IsAnnouncement;
@synthesize IsQortexSupport;
@synthesize GroupOwners;
@synthesize SharingInfo;
@synthesize GroupEmailAddress;
@synthesize ToDoSettings;
@synthesize TodoGroupingRoute;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setDescription:[dict valueForKey:@"Description"]];
	[self setGType:[dict valueForKey:@"GType"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setIconName:[dict valueForKey:@"IconName"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setTaskLink:[dict valueForKey:@"TaskLink"]];
	[self setSlug:[dict valueForKey:@"Slug"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}
	[self setIsAdmin:[[dict valueForKey:@"IsAdmin"] boolValue]];
	[self setIsPrivate:[[dict valueForKey:@"IsPrivate"] boolValue]];
	[self setEditable:[[dict valueForKey:@"Editable"] boolValue]];
	[self setManagable:[[dict valueForKey:@"Managable"] boolValue]];
	[self setAccessible:[[dict valueForKey:@"Accessible"] boolValue]];
	[self setFollowedByMe:[[dict valueForKey:@"FollowedByMe"] boolValue]];
	[self setAdministratedByMe:[[dict valueForKey:@"AdministratedByMe"] boolValue]];
	[self setIsPreShared:[[dict valueForKey:@"IsPreShared"] boolValue]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setIsDefaultLogoURL:[[dict valueForKey:@"IsDefaultLogoURL"] boolValue]];
	[self setHostOrgName:[dict valueForKey:@"HostOrgName"]];
	[self setIsDispayHostOrgName:[[dict valueForKey:@"IsDispayHostOrgName"] boolValue]];
	[self setEntriesCount:[dict valueForKey:@"EntriesCount"]];
	[self setFollowersCount:[dict valueForKey:@"FollowersCount"]];
	[self setIsAnnouncement:[[dict valueForKey:@"IsAnnouncement"] boolValue]];
	[self setIsQortexSupport:[[dict valueForKey:@"IsQortexSupport"] boolValue]];

	NSMutableArray * mGroupOwners = [[NSMutableArray alloc] init];
	NSArray * lGroupOwners = [dict valueForKey:@"GroupOwners"];
	if ([lGroupOwners isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupOwners) {
			[mGroupOwners addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setGroupOwners:mGroupOwners];
	}

	id dictSharingInfo = [dict valueForKey:@"SharingInfo"];
	if ([dictSharingInfo isKindOfClass:[NSDictionary class]]){
		[self setSharingInfo:[[QXGroupSharingInfo alloc] initWithDictionary:dictSharingInfo]];
	}
	[self setGroupEmailAddress:[dict valueForKey:@"GroupEmailAddress"]];

	id dictToDoSettings = [dict valueForKey:@"ToDoSettings"];
	if ([dictToDoSettings isKindOfClass:[NSDictionary class]]){
		[self setToDoSettings:[[QXAdvancedToDoSettings alloc] initWithDictionary:dictToDoSettings]];
	}
	[self setTodoGroupingRoute:[dict valueForKey:@"TodoGroupingRoute"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Description forKey:@"Description"];
	[dict setValue:self.GType forKey:@"GType"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.IconName forKey:@"IconName"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.TaskLink forKey:@"TaskLink"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsAdmin] forKey:@"IsAdmin"];
	[dict setValue:[NSNumber numberWithBool:self.IsPrivate] forKey:@"IsPrivate"];
	[dict setValue:[NSNumber numberWithBool:self.Editable] forKey:@"Editable"];
	[dict setValue:[NSNumber numberWithBool:self.Managable] forKey:@"Managable"];
	[dict setValue:[NSNumber numberWithBool:self.Accessible] forKey:@"Accessible"];
	[dict setValue:[NSNumber numberWithBool:self.FollowedByMe] forKey:@"FollowedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.AdministratedByMe] forKey:@"AdministratedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.IsPreShared] forKey:@"IsPreShared"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:[NSNumber numberWithBool:self.IsDefaultLogoURL] forKey:@"IsDefaultLogoURL"];
	[dict setValue:self.HostOrgName forKey:@"HostOrgName"];
	[dict setValue:[NSNumber numberWithBool:self.IsDispayHostOrgName] forKey:@"IsDispayHostOrgName"];
	[dict setValue:self.EntriesCount forKey:@"EntriesCount"];
	[dict setValue:self.FollowersCount forKey:@"FollowersCount"];
	[dict setValue:[NSNumber numberWithBool:self.IsAnnouncement] forKey:@"IsAnnouncement"];
	[dict setValue:[NSNumber numberWithBool:self.IsQortexSupport] forKey:@"IsQortexSupport"];

	NSMutableArray * mGroupOwners = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in GroupOwners) {
		[mGroupOwners addObject:[p dictionary]];
	}
	[dict setValue:mGroupOwners forKey:@"GroupOwners"];
	
	[dict setValue:[self.SharingInfo dictionary] forKey:@"SharingInfo"];
	
	[dict setValue:self.GroupEmailAddress forKey:@"GroupEmailAddress"];
	[dict setValue:[self.ToDoSettings dictionary] forKey:@"ToDoSettings"];
	
	[dict setValue:self.TodoGroupingRoute forKey:@"TodoGroupingRoute"];

	return dict;
}

@end

// --- Conversation ---
@implementation QXConversation

@synthesize Id;
@synthesize Title;
@synthesize UserIds;
@synthesize Participants;
@synthesize CreatedAt;
@synthesize EndedAt;
@synthesize LocalHumanCreatedAt;
@synthesize Topic;
@synthesize Private;
@synthesize IsClose;
@synthesize IsShared;
@synthesize HasOfflineMessage;
@synthesize OfflineLocalTime;
@synthesize SharedMessageIds;
@synthesize MessagesCount;
@synthesize Messages;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setUserIds:[dict valueForKey:@"UserIds"]];

	NSMutableArray * mParticipants = [[NSMutableArray alloc] init];
	NSArray * lParticipants = [dict valueForKey:@"Participants"];
	if ([lParticipants isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lParticipants) {
			[mParticipants addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setParticipants:mParticipants];
	}
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setEndedAt:[QXQortexapi dateFromString:[dict valueForKey:@"EndedAt"]]];
	[self setLocalHumanCreatedAt:[dict valueForKey:@"LocalHumanCreatedAt"]];
	[self setTopic:[dict valueForKey:@"Topic"]];
	[self setPrivate:[[dict valueForKey:@"Private"] boolValue]];
	[self setIsClose:[[dict valueForKey:@"IsClose"] boolValue]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setHasOfflineMessage:[[dict valueForKey:@"HasOfflineMessage"] boolValue]];
	[self setOfflineLocalTime:[dict valueForKey:@"OfflineLocalTime"]];
	[self setSharedMessageIds:[dict valueForKey:@"SharedMessageIds"]];
	[self setMessagesCount:[dict valueForKey:@"MessagesCount"]];

	NSMutableArray * mMessages = [[NSMutableArray alloc] init];
	NSArray * lMessages = [dict valueForKey:@"Messages"];
	if ([lMessages isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMessages) {
			[mMessages addObject: [[QXMessage alloc] initWithDictionary:d]];
		}
		[self setMessages:mMessages];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.UserIds forKey:@"UserIds"];

	NSMutableArray * mParticipants = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in Participants) {
		[mParticipants addObject:[p dictionary]];
	}
	[dict setValue:mParticipants forKey:@"Participants"];
	
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.EndedAt] forKey:@"EndedAt"];
	[dict setValue:self.LocalHumanCreatedAt forKey:@"LocalHumanCreatedAt"];
	[dict setValue:self.Topic forKey:@"Topic"];
	[dict setValue:[NSNumber numberWithBool:self.Private] forKey:@"Private"];
	[dict setValue:[NSNumber numberWithBool:self.IsClose] forKey:@"IsClose"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:[NSNumber numberWithBool:self.HasOfflineMessage] forKey:@"HasOfflineMessage"];
	[dict setValue:self.OfflineLocalTime forKey:@"OfflineLocalTime"];
	[dict setValue:self.SharedMessageIds forKey:@"SharedMessageIds"];
	[dict setValue:self.MessagesCount forKey:@"MessagesCount"];

	NSMutableArray * mMessages = [[NSMutableArray alloc] init];
	for (QXMessage * p in Messages) {
		[mMessages addObject:[p dictionary]];
	}
	[dict setValue:mMessages forKey:@"Messages"];
	

	return dict;
}

@end

// --- BasicOpenToDoOutlines ---
@implementation QXBasicOpenToDoOutlines

@synthesize Assignee;
@synthesize TaskOutlines;
@synthesize Editable;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictAssignee = [dict valueForKey:@"Assignee"];
	if ([dictAssignee isKindOfClass:[NSDictionary class]]){
		[self setAssignee:[[QXEmbedUser alloc] initWithDictionary:dictAssignee]];
	}

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	NSArray * lTaskOutlines = [dict valueForKey:@"TaskOutlines"];
	if ([lTaskOutlines isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskOutlines) {
			[mTaskOutlines addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setTaskOutlines:mTaskOutlines];
	}
	[self setEditable:[[dict valueForKey:@"Editable"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Assignee dictionary] forKey:@"Assignee"];
	

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in TaskOutlines) {
		[mTaskOutlines addObject:[p dictionary]];
	}
	[dict setValue:mTaskOutlines forKey:@"TaskOutlines"];
	
	[dict setValue:[NSNumber numberWithBool:self.Editable] forKey:@"Editable"];

	return dict;
}

@end

// --- TaskLog ---
@implementation QXTaskLog

@synthesize IsClaimed;
@synthesize IsAssigneeChanged;
@synthesize IsStatusChanged;
@synthesize IsEstimationChanged;
@synthesize IsTimeTrackingAdded;
@synthesize IsTimeTrackingUpdated;
@synthesize IsReopened;
@synthesize IsLabelChanged;
@synthesize CreatedAt;
@synthesize VersionAt;
@synthesize LocalHumanCreatedAt;
@synthesize Author;
@synthesize Assignee;
@synthesize OldAssignee;
@synthesize EstimatedTimeValue;
@synthesize TimeUnit;
@synthesize NewSpentTime;
@synthesize Status;
@synthesize Label;
@synthesize TimeTrackingUpdateLogs;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIsClaimed:[[dict valueForKey:@"IsClaimed"] boolValue]];
	[self setIsAssigneeChanged:[[dict valueForKey:@"IsAssigneeChanged"] boolValue]];
	[self setIsStatusChanged:[[dict valueForKey:@"IsStatusChanged"] boolValue]];
	[self setIsEstimationChanged:[[dict valueForKey:@"IsEstimationChanged"] boolValue]];
	[self setIsTimeTrackingAdded:[[dict valueForKey:@"IsTimeTrackingAdded"] boolValue]];
	[self setIsTimeTrackingUpdated:[[dict valueForKey:@"IsTimeTrackingUpdated"] boolValue]];
	[self setIsReopened:[[dict valueForKey:@"IsReopened"] boolValue]];
	[self setIsLabelChanged:[[dict valueForKey:@"IsLabelChanged"] boolValue]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setVersionAt:[QXQortexapi dateFromString:[dict valueForKey:@"VersionAt"]]];
	[self setLocalHumanCreatedAt:[dict valueForKey:@"LocalHumanCreatedAt"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	id dictAssignee = [dict valueForKey:@"Assignee"];
	if ([dictAssignee isKindOfClass:[NSDictionary class]]){
		[self setAssignee:[[QXEmbedUser alloc] initWithDictionary:dictAssignee]];
	}

	id dictOldAssignee = [dict valueForKey:@"OldAssignee"];
	if ([dictOldAssignee isKindOfClass:[NSDictionary class]]){
		[self setOldAssignee:[[QXEmbedUser alloc] initWithDictionary:dictOldAssignee]];
	}
	[self setEstimatedTimeValue:[dict valueForKey:@"EstimatedTimeValue"]];
	[self setTimeUnit:[dict valueForKey:@"TimeUnit"]];
	[self setNewSpentTime:[dict valueForKey:@"NewSpentTime"]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setLabel:[dict valueForKey:@"Label"]];

	NSMutableArray * mTimeTrackingUpdateLogs = [[NSMutableArray alloc] init];
	NSArray * lTimeTrackingUpdateLogs = [dict valueForKey:@"TimeTrackingUpdateLogs"];
	if ([lTimeTrackingUpdateLogs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTimeTrackingUpdateLogs) {
			[mTimeTrackingUpdateLogs addObject: [[QXTimeTrackingUpdateLog alloc] initWithDictionary:d]];
		}
		[self setTimeTrackingUpdateLogs:mTimeTrackingUpdateLogs];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IsClaimed] forKey:@"IsClaimed"];
	[dict setValue:[NSNumber numberWithBool:self.IsAssigneeChanged] forKey:@"IsAssigneeChanged"];
	[dict setValue:[NSNumber numberWithBool:self.IsStatusChanged] forKey:@"IsStatusChanged"];
	[dict setValue:[NSNumber numberWithBool:self.IsEstimationChanged] forKey:@"IsEstimationChanged"];
	[dict setValue:[NSNumber numberWithBool:self.IsTimeTrackingAdded] forKey:@"IsTimeTrackingAdded"];
	[dict setValue:[NSNumber numberWithBool:self.IsTimeTrackingUpdated] forKey:@"IsTimeTrackingUpdated"];
	[dict setValue:[NSNumber numberWithBool:self.IsReopened] forKey:@"IsReopened"];
	[dict setValue:[NSNumber numberWithBool:self.IsLabelChanged] forKey:@"IsLabelChanged"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.VersionAt] forKey:@"VersionAt"];
	[dict setValue:self.LocalHumanCreatedAt forKey:@"LocalHumanCreatedAt"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	
	[dict setValue:[self.Assignee dictionary] forKey:@"Assignee"];
	
	[dict setValue:[self.OldAssignee dictionary] forKey:@"OldAssignee"];
	
	[dict setValue:self.EstimatedTimeValue forKey:@"EstimatedTimeValue"];
	[dict setValue:self.TimeUnit forKey:@"TimeUnit"];
	[dict setValue:self.NewSpentTime forKey:@"NewSpentTime"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.Label forKey:@"Label"];

	NSMutableArray * mTimeTrackingUpdateLogs = [[NSMutableArray alloc] init];
	for (QXTimeTrackingUpdateLog * p in TimeTrackingUpdateLogs) {
		[mTimeTrackingUpdateLogs addObject:[p dictionary]];
	}
	[dict setValue:mTimeTrackingUpdateLogs forKey:@"TimeTrackingUpdateLogs"];
	

	return dict;
}

@end

// --- NotificationItem ---
@implementation QXNotificationItem

@synthesize Id;
@synthesize GroupId;
@synthesize ToUser;
@synthesize ForEntry;
@synthesize FromUser;
@synthesize FromOrg;
@synthesize CausedByEntry;
@synthesize NotifiedAt;
@synthesize ReadAt;
@synthesize Readed;
@synthesize Type;
@synthesize Link;
@synthesize SharingRequestToEmail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	id dictToUser = [dict valueForKey:@"ToUser"];
	if ([dictToUser isKindOfClass:[NSDictionary class]]){
		[self setToUser:[[QXEmbedUser alloc] initWithDictionary:dictToUser]];
	}

	id dictForEntry = [dict valueForKey:@"ForEntry"];
	if ([dictForEntry isKindOfClass:[NSDictionary class]]){
		[self setForEntry:[[QXEmbedEntry alloc] initWithDictionary:dictForEntry]];
	}

	id dictFromUser = [dict valueForKey:@"FromUser"];
	if ([dictFromUser isKindOfClass:[NSDictionary class]]){
		[self setFromUser:[[QXEmbedUser alloc] initWithDictionary:dictFromUser]];
	}

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	id dictCausedByEntry = [dict valueForKey:@"CausedByEntry"];
	if ([dictCausedByEntry isKindOfClass:[NSDictionary class]]){
		[self setCausedByEntry:[[QXEmbedEntry alloc] initWithDictionary:dictCausedByEntry]];
	}
	[self setNotifiedAt:[QXQortexapi dateFromString:[dict valueForKey:@"NotifiedAt"]]];
	[self setReadAt:[QXQortexapi dateFromString:[dict valueForKey:@"ReadAt"]]];
	[self setReaded:[[dict valueForKey:@"Readed"] boolValue]];
	[self setType:[dict valueForKey:@"Type"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setSharingRequestToEmail:[dict valueForKey:@"SharingRequestToEmail"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:[self.ToUser dictionary] forKey:@"ToUser"];
	
	[dict setValue:[self.ForEntry dictionary] forKey:@"ForEntry"];
	
	[dict setValue:[self.FromUser dictionary] forKey:@"FromUser"];
	
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	
	[dict setValue:[self.CausedByEntry dictionary] forKey:@"CausedByEntry"];
	
	[dict setValue:[QXQortexapi stringFromDate:self.NotifiedAt] forKey:@"NotifiedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.ReadAt] forKey:@"ReadAt"];
	[dict setValue:[NSNumber numberWithBool:self.Readed] forKey:@"Readed"];
	[dict setValue:self.Type forKey:@"Type"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.SharingRequestToEmail forKey:@"SharingRequestToEmail"];

	return dict;
}

@end

// --- LanguageSelectors ---
@implementation QXLanguageSelectors

@synthesize Selectors;
@synthesize LabelText;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mSelectors = [[NSMutableArray alloc] init];
	NSArray * lSelectors = [dict valueForKey:@"Selectors"];
	if ([lSelectors isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lSelectors) {
			[mSelectors addObject: [[QXLanguageSelector alloc] initWithDictionary:d]];
		}
		[self setSelectors:mSelectors];
	}
	[self setLabelText:[dict valueForKey:@"LabelText"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mSelectors = [[NSMutableArray alloc] init];
	for (QXLanguageSelector * p in Selectors) {
		[mSelectors addObject:[p dictionary]];
	}
	[dict setValue:mSelectors forKey:@"Selectors"];
	
	[dict setValue:self.LabelText forKey:@"LabelText"];

	return dict;
}

@end

// --- GroupTasksOutline ---
@implementation QXGroupTasksOutline

@synthesize Group;
@synthesize AcksAndPendingToDos;
@synthesize SimpleToDos;
@synthesize OpenToDos;
@synthesize OpenEstimateTotal;
@synthesize NotStartedToDos;
@synthesize NotStartedEstimateTotal;
@synthesize EstimateUnit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXEmbedGroup alloc] initWithDictionary:dictGroup]];
	}

	NSMutableArray * mAcksAndPendingToDos = [[NSMutableArray alloc] init];
	NSArray * lAcksAndPendingToDos = [dict valueForKey:@"AcksAndPendingToDos"];
	if ([lAcksAndPendingToDos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAcksAndPendingToDos) {
			[mAcksAndPendingToDos addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setAcksAndPendingToDos:mAcksAndPendingToDos];
	}

	NSMutableArray * mSimpleToDos = [[NSMutableArray alloc] init];
	NSArray * lSimpleToDos = [dict valueForKey:@"SimpleToDos"];
	if ([lSimpleToDos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lSimpleToDos) {
			[mSimpleToDos addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setSimpleToDos:mSimpleToDos];
	}

	NSMutableArray * mOpenToDos = [[NSMutableArray alloc] init];
	NSArray * lOpenToDos = [dict valueForKey:@"OpenToDos"];
	if ([lOpenToDos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOpenToDos) {
			[mOpenToDos addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setOpenToDos:mOpenToDos];
	}
	[self setOpenEstimateTotal:[dict valueForKey:@"OpenEstimateTotal"]];

	NSMutableArray * mNotStartedToDos = [[NSMutableArray alloc] init];
	NSArray * lNotStartedToDos = [dict valueForKey:@"NotStartedToDos"];
	if ([lNotStartedToDos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNotStartedToDos) {
			[mNotStartedToDos addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setNotStartedToDos:mNotStartedToDos];
	}
	[self setNotStartedEstimateTotal:[dict valueForKey:@"NotStartedEstimateTotal"]];
	[self setEstimateUnit:[dict valueForKey:@"EstimateUnit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	

	NSMutableArray * mAcksAndPendingToDos = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in AcksAndPendingToDos) {
		[mAcksAndPendingToDos addObject:[p dictionary]];
	}
	[dict setValue:mAcksAndPendingToDos forKey:@"AcksAndPendingToDos"];
	

	NSMutableArray * mSimpleToDos = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in SimpleToDos) {
		[mSimpleToDos addObject:[p dictionary]];
	}
	[dict setValue:mSimpleToDos forKey:@"SimpleToDos"];
	

	NSMutableArray * mOpenToDos = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in OpenToDos) {
		[mOpenToDos addObject:[p dictionary]];
	}
	[dict setValue:mOpenToDos forKey:@"OpenToDos"];
	
	[dict setValue:self.OpenEstimateTotal forKey:@"OpenEstimateTotal"];

	NSMutableArray * mNotStartedToDos = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in NotStartedToDos) {
		[mNotStartedToDos addObject:[p dictionary]];
	}
	[dict setValue:mNotStartedToDos forKey:@"NotStartedToDos"];
	
	[dict setValue:self.NotStartedEstimateTotal forKey:@"NotStartedEstimateTotal"];
	[dict setValue:self.EstimateUnit forKey:@"EstimateUnit"];

	return dict;
}

@end

// --- Preferences ---
@implementation QXPreferences

@synthesize Timezone;
@synthesize TimezoneOffset;
@synthesize PreferFullName;
@synthesize EnterForNewLine;
@synthesize AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse;
@synthesize ShowMarkUnreadThreshold;
@synthesize AdminModeOn;
@synthesize PreferMarkdown;
@synthesize AutoFollowPublicGroup;
@synthesize EnableHTML5Notification;
@synthesize PreferredLanguageSelectors;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setTimezoneOffset:[dict valueForKey:@"TimezoneOffset"]];
	[self setPreferFullName:[[dict valueForKey:@"PreferFullName"] boolValue]];
	[self setEnterForNewLine:[[dict valueForKey:@"EnterForNewLine"] boolValue]];
	[self setAsideGroupsCollapse:[[dict valueForKey:@"AsideGroupsCollapse"] boolValue]];
	[self setAsideOtherGroupsCollapse:[[dict valueForKey:@"AsideOtherGroupsCollapse"] boolValue]];
	[self setShowMarkUnreadThreshold:[dict valueForKey:@"ShowMarkUnreadThreshold"]];
	[self setAdminModeOn:[[dict valueForKey:@"AdminModeOn"] boolValue]];
	[self setPreferMarkdown:[[dict valueForKey:@"PreferMarkdown"] boolValue]];
	[self setAutoFollowPublicGroup:[[dict valueForKey:@"AutoFollowPublicGroup"] boolValue]];
	[self setEnableHTML5Notification:[[dict valueForKey:@"EnableHTML5Notification"] boolValue]];

	id dictPreferredLanguageSelectors = [dict valueForKey:@"PreferredLanguageSelectors"];
	if ([dictPreferredLanguageSelectors isKindOfClass:[NSDictionary class]]){
		[self setPreferredLanguageSelectors:[[QXLanguageSelectors alloc] initWithDictionary:dictPreferredLanguageSelectors]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:self.TimezoneOffset forKey:@"TimezoneOffset"];
	[dict setValue:[NSNumber numberWithBool:self.PreferFullName] forKey:@"PreferFullName"];
	[dict setValue:[NSNumber numberWithBool:self.EnterForNewLine] forKey:@"EnterForNewLine"];
	[dict setValue:[NSNumber numberWithBool:self.AsideGroupsCollapse] forKey:@"AsideGroupsCollapse"];
	[dict setValue:[NSNumber numberWithBool:self.AsideOtherGroupsCollapse] forKey:@"AsideOtherGroupsCollapse"];
	[dict setValue:self.ShowMarkUnreadThreshold forKey:@"ShowMarkUnreadThreshold"];
	[dict setValue:[NSNumber numberWithBool:self.AdminModeOn] forKey:@"AdminModeOn"];
	[dict setValue:[NSNumber numberWithBool:self.PreferMarkdown] forKey:@"PreferMarkdown"];
	[dict setValue:[NSNumber numberWithBool:self.AutoFollowPublicGroup] forKey:@"AutoFollowPublicGroup"];
	[dict setValue:[NSNumber numberWithBool:self.EnableHTML5Notification] forKey:@"EnableHTML5Notification"];
	[dict setValue:[self.PreferredLanguageSelectors dictionary] forKey:@"PreferredLanguageSelectors"];
	

	return dict;
}

@end

// --- GroupAside ---
@implementation QXGroupAside

@synthesize IsMyGroupsCollapse;
@synthesize IsOtherGroupsCollapse;
@synthesize ShowNewGroupButton;
@synthesize HaveOtherGroup;
@synthesize AnnounGroup;
@synthesize SMGroup;
@synthesize FollowingNormalGroups;
@synthesize FollowingSharedGroups;
@synthesize UnfollowedNormalGroups;
@synthesize UnfollowedSharedGroups;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIsMyGroupsCollapse:[[dict valueForKey:@"IsMyGroupsCollapse"] boolValue]];
	[self setIsOtherGroupsCollapse:[[dict valueForKey:@"IsOtherGroupsCollapse"] boolValue]];
	[self setShowNewGroupButton:[[dict valueForKey:@"ShowNewGroupButton"] boolValue]];
	[self setHaveOtherGroup:[[dict valueForKey:@"HaveOtherGroup"] boolValue]];

	id dictAnnounGroup = [dict valueForKey:@"AnnounGroup"];
	if ([dictAnnounGroup isKindOfClass:[NSDictionary class]]){
		[self setAnnounGroup:[[QXGroup alloc] initWithDictionary:dictAnnounGroup]];
	}

	id dictSMGroup = [dict valueForKey:@"SMGroup"];
	if ([dictSMGroup isKindOfClass:[NSDictionary class]]){
		[self setSMGroup:[[QXGroup alloc] initWithDictionary:dictSMGroup]];
	}

	NSMutableArray * mFollowingNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingNormalGroups = [dict valueForKey:@"FollowingNormalGroups"];
	if ([lFollowingNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingNormalGroups) {
			[mFollowingNormalGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowingNormalGroups:mFollowingNormalGroups];
	}

	NSMutableArray * mFollowingSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingSharedGroups = [dict valueForKey:@"FollowingSharedGroups"];
	if ([lFollowingSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingSharedGroups) {
			[mFollowingSharedGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowingSharedGroups:mFollowingSharedGroups];
	}

	NSMutableArray * mUnfollowedNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lUnfollowedNormalGroups = [dict valueForKey:@"UnfollowedNormalGroups"];
	if ([lUnfollowedNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnfollowedNormalGroups) {
			[mUnfollowedNormalGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setUnfollowedNormalGroups:mUnfollowedNormalGroups];
	}

	NSMutableArray * mUnfollowedSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lUnfollowedSharedGroups = [dict valueForKey:@"UnfollowedSharedGroups"];
	if ([lUnfollowedSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnfollowedSharedGroups) {
			[mUnfollowedSharedGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setUnfollowedSharedGroups:mUnfollowedSharedGroups];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IsMyGroupsCollapse] forKey:@"IsMyGroupsCollapse"];
	[dict setValue:[NSNumber numberWithBool:self.IsOtherGroupsCollapse] forKey:@"IsOtherGroupsCollapse"];
	[dict setValue:[NSNumber numberWithBool:self.ShowNewGroupButton] forKey:@"ShowNewGroupButton"];
	[dict setValue:[NSNumber numberWithBool:self.HaveOtherGroup] forKey:@"HaveOtherGroup"];
	[dict setValue:[self.AnnounGroup dictionary] forKey:@"AnnounGroup"];
	
	[dict setValue:[self.SMGroup dictionary] forKey:@"SMGroup"];
	

	NSMutableArray * mFollowingNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowingNormalGroups) {
		[mFollowingNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingNormalGroups forKey:@"FollowingNormalGroups"];
	

	NSMutableArray * mFollowingSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowingSharedGroups) {
		[mFollowingSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingSharedGroups forKey:@"FollowingSharedGroups"];
	

	NSMutableArray * mUnfollowedNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in UnfollowedNormalGroups) {
		[mUnfollowedNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnfollowedNormalGroups forKey:@"UnfollowedNormalGroups"];
	

	NSMutableArray * mUnfollowedSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in UnfollowedSharedGroups) {
		[mUnfollowedSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnfollowedSharedGroups forKey:@"UnfollowedSharedGroups"];
	

	return dict;
}

@end

// --- Organization ---
@implementation QXOrganization

@synthesize Id;
@synthesize Name;
@synthesize QortexURL;
@synthesize Summary;
@synthesize LogoURL;
@synthesize Address;
@synthesize Country;
@synthesize Phone;
@synthesize Website;
@synthesize Size;
@synthesize SizeText;
@synthesize SharingToken;
@synthesize Domains;
@synthesize RestrictSubscriptionMail;
@synthesize IsActive;
@synthesize AnyoneCanJoin;
@synthesize NeedDemo;
@synthesize ContactWay;
@synthesize EnableMultilingual;
@synthesize LanguageSelectors;
@synthesize SizeOptions;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setQortexURL:[dict valueForKey:@"QortexURL"]];
	[self setSummary:[dict valueForKey:@"Summary"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setAddress:[dict valueForKey:@"Address"]];
	[self setCountry:[dict valueForKey:@"Country"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setWebsite:[dict valueForKey:@"Website"]];
	[self setSize:[dict valueForKey:@"Size"]];
	[self setSizeText:[dict valueForKey:@"SizeText"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];
	[self setDomains:[dict valueForKey:@"Domains"]];
	[self setRestrictSubscriptionMail:[[dict valueForKey:@"RestrictSubscriptionMail"] boolValue]];
	[self setIsActive:[[dict valueForKey:@"IsActive"] boolValue]];
	[self setAnyoneCanJoin:[[dict valueForKey:@"AnyoneCanJoin"] boolValue]];
	[self setNeedDemo:[[dict valueForKey:@"NeedDemo"] boolValue]];
	[self setContactWay:[dict valueForKey:@"ContactWay"]];
	[self setEnableMultilingual:[[dict valueForKey:@"EnableMultilingual"] boolValue]];

	id dictLanguageSelectors = [dict valueForKey:@"LanguageSelectors"];
	if ([dictLanguageSelectors isKindOfClass:[NSDictionary class]]){
		[self setLanguageSelectors:[[QXLanguageSelectors alloc] initWithDictionary:dictLanguageSelectors]];
	}
	[self setSizeOptions:[dict valueForKey:@"SizeOptions"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.QortexURL forKey:@"QortexURL"];
	[dict setValue:self.Summary forKey:@"Summary"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.Address forKey:@"Address"];
	[dict setValue:self.Country forKey:@"Country"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Website forKey:@"Website"];
	[dict setValue:self.Size forKey:@"Size"];
	[dict setValue:self.SizeText forKey:@"SizeText"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];
	[dict setValue:self.Domains forKey:@"Domains"];
	[dict setValue:[NSNumber numberWithBool:self.RestrictSubscriptionMail] forKey:@"RestrictSubscriptionMail"];
	[dict setValue:[NSNumber numberWithBool:self.IsActive] forKey:@"IsActive"];
	[dict setValue:[NSNumber numberWithBool:self.AnyoneCanJoin] forKey:@"AnyoneCanJoin"];
	[dict setValue:[NSNumber numberWithBool:self.NeedDemo] forKey:@"NeedDemo"];
	[dict setValue:self.ContactWay forKey:@"ContactWay"];
	[dict setValue:[NSNumber numberWithBool:self.EnableMultilingual] forKey:@"EnableMultilingual"];
	[dict setValue:[self.LanguageSelectors dictionary] forKey:@"LanguageSelectors"];
	
	[dict setValue:self.SizeOptions forKey:@"SizeOptions"];

	return dict;
}

@end

// --- OpenAdvancedToDosPage ---
@implementation QXOpenAdvancedToDosPage

@synthesize Assignee;
@synthesize ActionNeededToDos;
@synthesize ToDosBuckets;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictAssignee = [dict valueForKey:@"Assignee"];
	if ([dictAssignee isKindOfClass:[NSDictionary class]]){
		[self setAssignee:[[QXEmbedUser alloc] initWithDictionary:dictAssignee]];
	}

	NSMutableArray * mActionNeededToDos = [[NSMutableArray alloc] init];
	NSArray * lActionNeededToDos = [dict valueForKey:@"ActionNeededToDos"];
	if ([lActionNeededToDos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lActionNeededToDos) {
			[mActionNeededToDos addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setActionNeededToDos:mActionNeededToDos];
	}

	NSMutableArray * mToDosBuckets = [[NSMutableArray alloc] init];
	NSArray * lToDosBuckets = [dict valueForKey:@"ToDosBuckets"];
	if ([lToDosBuckets isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToDosBuckets) {
			[mToDosBuckets addObject: [[QXOpenAdvancedToDosBucket alloc] initWithDictionary:d]];
		}
		[self setToDosBuckets:mToDosBuckets];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Assignee dictionary] forKey:@"Assignee"];
	

	NSMutableArray * mActionNeededToDos = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in ActionNeededToDos) {
		[mActionNeededToDos addObject:[p dictionary]];
	}
	[dict setValue:mActionNeededToDos forKey:@"ActionNeededToDos"];
	

	NSMutableArray * mToDosBuckets = [[NSMutableArray alloc] init];
	for (QXOpenAdvancedToDosBucket * p in ToDosBuckets) {
		[mToDosBuckets addObject:[p dictionary]];
	}
	[dict setValue:mToDosBuckets forKey:@"ToDosBuckets"];
	

	return dict;
}

@end

// --- ClosedAdvancedToDoOutline ---
@implementation QXClosedAdvancedToDoOutline

@synthesize Status;
@synthesize Count;
@synthesize WithLoadMoreLink;
@synthesize Tasks;
@synthesize Group;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictStatus = [dict valueForKey:@"Status"];
	if ([dictStatus isKindOfClass:[NSDictionary class]]){
		[self setStatus:[[QXTagIndex alloc] initWithDictionary:dictStatus]];
	}
	[self setCount:[dict valueForKey:@"Count"]];
	[self setWithLoadMoreLink:[[dict valueForKey:@"WithLoadMoreLink"] boolValue]];

	NSMutableArray * mTasks = [[NSMutableArray alloc] init];
	NSArray * lTasks = [dict valueForKey:@"Tasks"];
	if ([lTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTasks) {
			[mTasks addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setTasks:mTasks];
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Status dictionary] forKey:@"Status"];
	
	[dict setValue:self.Count forKey:@"Count"];
	[dict setValue:[NSNumber numberWithBool:self.WithLoadMoreLink] forKey:@"WithLoadMoreLink"];

	NSMutableArray * mTasks = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in Tasks) {
		[mTasks addObject:[p dictionary]];
	}
	[dict setValue:mTasks forKey:@"Tasks"];
	
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	

	return dict;
}

@end

// --- MyTask ---
@implementation QXMyTask

@synthesize PrefixURL;
@synthesize NeedActionTasks;
@synthesize GroupTasks;
@synthesize ClosedTasks;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setPrefixURL:[dict valueForKey:@"PrefixURL"]];

	NSMutableArray * mNeedActionTasks = [[NSMutableArray alloc] init];
	NSArray * lNeedActionTasks = [dict valueForKey:@"NeedActionTasks"];
	if ([lNeedActionTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNeedActionTasks) {
			[mNeedActionTasks addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setNeedActionTasks:mNeedActionTasks];
	}

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	NSArray * lGroupTasks = [dict valueForKey:@"GroupTasks"];
	if ([lGroupTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupTasks) {
			[mGroupTasks addObject: [[QXGroupTasksOutline alloc] initWithDictionary:d]];
		}
		[self setGroupTasks:mGroupTasks];
	}

	NSMutableArray * mClosedTasks = [[NSMutableArray alloc] init];
	NSArray * lClosedTasks = [dict valueForKey:@"ClosedTasks"];
	if ([lClosedTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lClosedTasks) {
			[mClosedTasks addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setClosedTasks:mClosedTasks];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.PrefixURL forKey:@"PrefixURL"];

	NSMutableArray * mNeedActionTasks = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in NeedActionTasks) {
		[mNeedActionTasks addObject:[p dictionary]];
	}
	[dict setValue:mNeedActionTasks forKey:@"NeedActionTasks"];
	

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	for (QXGroupTasksOutline * p in GroupTasks) {
		[mGroupTasks addObject:[p dictionary]];
	}
	[dict setValue:mGroupTasks forKey:@"GroupTasks"];
	

	NSMutableArray * mClosedTasks = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in ClosedTasks) {
		[mClosedTasks addObject:[p dictionary]];
	}
	[dict setValue:mClosedTasks forKey:@"ClosedTasks"];
	

	return dict;
}

@end

// --- MyNotifications ---
@implementation QXMyNotifications

@synthesize NotificationItems;
@synthesize HasMore;
@synthesize LatestNotifyTime;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	NSArray * lNotificationItems = [dict valueForKey:@"NotificationItems"];
	if ([lNotificationItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNotificationItems) {
			[mNotificationItems addObject: [[QXNotificationItem alloc] initWithDictionary:d]];
		}
		[self setNotificationItems:mNotificationItems];
	}
	[self setHasMore:[[dict valueForKey:@"HasMore"] boolValue]];
	[self setLatestNotifyTime:[dict valueForKey:@"LatestNotifyTime"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	for (QXNotificationItem * p in NotificationItems) {
		[mNotificationItems addObject:[p dictionary]];
	}
	[dict setValue:mNotificationItems forKey:@"NotificationItems"];
	
	[dict setValue:[NSNumber numberWithBool:self.HasMore] forKey:@"HasMore"];
	[dict setValue:self.LatestNotifyTime forKey:@"LatestNotifyTime"];

	return dict;
}

@end

// --- AdvancedTask ---
@implementation QXAdvancedTask

@synthesize CurrentAssignee;
@synthesize IsTimeEstimationEnabled;
@synthesize IsTimeTrackingEnabled;
@synthesize IsPendingEstimation;
@synthesize LabelCode;
@synthesize Label;
@synthesize StatusCode;
@synthesize Status;
@synthesize TimeUnit;
@synthesize EstimatedTimeValue;
@synthesize SpentTimeTracking;
@synthesize TotalSpentTime;
@synthesize AssignableUsers;
@synthesize TaskFlowNewStatuses;
@synthesize TaskFlowOpenStatuses;
@synthesize TaskFlowClosedStatuses;
@synthesize TaskLabels;
@synthesize TaskLogs;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictCurrentAssignee = [dict valueForKey:@"CurrentAssignee"];
	if ([dictCurrentAssignee isKindOfClass:[NSDictionary class]]){
		[self setCurrentAssignee:[[QXEmbedUser alloc] initWithDictionary:dictCurrentAssignee]];
	}
	[self setIsTimeEstimationEnabled:[[dict valueForKey:@"IsTimeEstimationEnabled"] boolValue]];
	[self setIsTimeTrackingEnabled:[[dict valueForKey:@"IsTimeTrackingEnabled"] boolValue]];
	[self setIsPendingEstimation:[[dict valueForKey:@"IsPendingEstimation"] boolValue]];
	[self setLabelCode:[dict valueForKey:@"LabelCode"]];
	[self setLabel:[dict valueForKey:@"Label"]];
	[self setStatusCode:[dict valueForKey:@"StatusCode"]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setTimeUnit:[dict valueForKey:@"TimeUnit"]];
	[self setEstimatedTimeValue:[dict valueForKey:@"EstimatedTimeValue"]];

	NSMutableArray * mSpentTimeTracking = [[NSMutableArray alloc] init];
	NSArray * lSpentTimeTracking = [dict valueForKey:@"SpentTimeTracking"];
	if ([lSpentTimeTracking isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lSpentTimeTracking) {
			[mSpentTimeTracking addObject: [[QXTimeTrackingItem alloc] initWithDictionary:d]];
		}
		[self setSpentTimeTracking:mSpentTimeTracking];
	}
	[self setTotalSpentTime:[dict valueForKey:@"TotalSpentTime"]];

	NSMutableArray * mAssignableUsers = [[NSMutableArray alloc] init];
	NSArray * lAssignableUsers = [dict valueForKey:@"AssignableUsers"];
	if ([lAssignableUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAssignableUsers) {
			[mAssignableUsers addObject: [[QXAssignableUser alloc] initWithDictionary:d]];
		}
		[self setAssignableUsers:mAssignableUsers];
	}
	[self setTaskFlowNewStatuses:[dict valueForKey:@"TaskFlowNewStatuses"]];
	[self setTaskFlowOpenStatuses:[dict valueForKey:@"TaskFlowOpenStatuses"]];
	[self setTaskFlowClosedStatuses:[dict valueForKey:@"TaskFlowClosedStatuses"]];
	[self setTaskLabels:[dict valueForKey:@"TaskLabels"]];

	NSMutableArray * mTaskLogs = [[NSMutableArray alloc] init];
	NSArray * lTaskLogs = [dict valueForKey:@"TaskLogs"];
	if ([lTaskLogs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskLogs) {
			[mTaskLogs addObject: [[QXTaskLog alloc] initWithDictionary:d]];
		}
		[self setTaskLogs:mTaskLogs];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.CurrentAssignee dictionary] forKey:@"CurrentAssignee"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsTimeEstimationEnabled] forKey:@"IsTimeEstimationEnabled"];
	[dict setValue:[NSNumber numberWithBool:self.IsTimeTrackingEnabled] forKey:@"IsTimeTrackingEnabled"];
	[dict setValue:[NSNumber numberWithBool:self.IsPendingEstimation] forKey:@"IsPendingEstimation"];
	[dict setValue:self.LabelCode forKey:@"LabelCode"];
	[dict setValue:self.Label forKey:@"Label"];
	[dict setValue:self.StatusCode forKey:@"StatusCode"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.TimeUnit forKey:@"TimeUnit"];
	[dict setValue:self.EstimatedTimeValue forKey:@"EstimatedTimeValue"];

	NSMutableArray * mSpentTimeTracking = [[NSMutableArray alloc] init];
	for (QXTimeTrackingItem * p in SpentTimeTracking) {
		[mSpentTimeTracking addObject:[p dictionary]];
	}
	[dict setValue:mSpentTimeTracking forKey:@"SpentTimeTracking"];
	
	[dict setValue:self.TotalSpentTime forKey:@"TotalSpentTime"];

	NSMutableArray * mAssignableUsers = [[NSMutableArray alloc] init];
	for (QXAssignableUser * p in AssignableUsers) {
		[mAssignableUsers addObject:[p dictionary]];
	}
	[dict setValue:mAssignableUsers forKey:@"AssignableUsers"];
	
	[dict setValue:self.TaskFlowNewStatuses forKey:@"TaskFlowNewStatuses"];
	[dict setValue:self.TaskFlowOpenStatuses forKey:@"TaskFlowOpenStatuses"];
	[dict setValue:self.TaskFlowClosedStatuses forKey:@"TaskFlowClosedStatuses"];
	[dict setValue:self.TaskLabels forKey:@"TaskLabels"];

	NSMutableArray * mTaskLogs = [[NSMutableArray alloc] init];
	for (QXTaskLog * p in TaskLogs) {
		[mTaskLogs addObject:[p dictionary]];
	}
	[dict setValue:mTaskLogs forKey:@"TaskLogs"];
	

	return dict;
}

@end

// --- SharingInvitation ---
@implementation QXSharingInvitation

@synthesize FromOrg;
@synthesize FromUserId;
@synthesize SharedGroup;
@synthesize IsNewAccount;
@synthesize Email;
@synthesize Token;
@synthesize JoinedOrgs;
@synthesize IsAccepted;
@synthesize IsRejected;
@synthesize IsPending;
@synthesize IsForwarded;
@synthesize IsCanceled;
@synthesize IsStopped;
@synthesize PendingDuration;
@synthesize ToOrgName;
@synthesize ToOrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}
	[self setFromUserId:[dict valueForKey:@"FromUserId"]];

	id dictSharedGroup = [dict valueForKey:@"SharedGroup"];
	if ([dictSharedGroup isKindOfClass:[NSDictionary class]]){
		[self setSharedGroup:[[QXGroup alloc] initWithDictionary:dictSharedGroup]];
	}
	[self setIsNewAccount:[[dict valueForKey:@"IsNewAccount"] boolValue]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setToken:[dict valueForKey:@"Token"]];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	NSArray * lJoinedOrgs = [dict valueForKey:@"JoinedOrgs"];
	if ([lJoinedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lJoinedOrgs) {
			[mJoinedOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setJoinedOrgs:mJoinedOrgs];
	}
	[self setIsAccepted:[[dict valueForKey:@"IsAccepted"] boolValue]];
	[self setIsRejected:[[dict valueForKey:@"IsRejected"] boolValue]];
	[self setIsPending:[[dict valueForKey:@"IsPending"] boolValue]];
	[self setIsForwarded:[[dict valueForKey:@"IsForwarded"] boolValue]];
	[self setIsCanceled:[[dict valueForKey:@"IsCanceled"] boolValue]];
	[self setIsStopped:[[dict valueForKey:@"IsStopped"] boolValue]];
	[self setPendingDuration:[dict valueForKey:@"PendingDuration"]];
	[self setToOrgName:[dict valueForKey:@"ToOrgName"]];
	[self setToOrgId:[dict valueForKey:@"ToOrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	
	[dict setValue:self.FromUserId forKey:@"FromUserId"];
	[dict setValue:[self.SharedGroup dictionary] forKey:@"SharedGroup"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsNewAccount] forKey:@"IsNewAccount"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Token forKey:@"Token"];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in JoinedOrgs) {
		[mJoinedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mJoinedOrgs forKey:@"JoinedOrgs"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsAccepted] forKey:@"IsAccepted"];
	[dict setValue:[NSNumber numberWithBool:self.IsRejected] forKey:@"IsRejected"];
	[dict setValue:[NSNumber numberWithBool:self.IsPending] forKey:@"IsPending"];
	[dict setValue:[NSNumber numberWithBool:self.IsForwarded] forKey:@"IsForwarded"];
	[dict setValue:[NSNumber numberWithBool:self.IsCanceled] forKey:@"IsCanceled"];
	[dict setValue:[NSNumber numberWithBool:self.IsStopped] forKey:@"IsStopped"];
	[dict setValue:self.PendingDuration forKey:@"PendingDuration"];
	[dict setValue:self.ToOrgName forKey:@"ToOrgName"];
	[dict setValue:self.ToOrgId forKey:@"ToOrgId"];

	return dict;
}

@end

// --- User ---
@implementation QXUser

@synthesize Id;
@synthesize Email;
@synthesize Firstame;
@synthesize LastName;
@synthesize Name;
@synthesize Title;
@synthesize Avatar;
@synthesize JID;
@synthesize Timezone;
@synthesize IsSuperUser;
@synthesize IsSharedUser;
@synthesize OrgId;
@synthesize OriginalOrgId;
@synthesize PrefixURL;
@synthesize ProfileURL;
@synthesize IsLoggedInUser;
@synthesize IsAvailable;
@synthesize IsDisabled;
@synthesize IsDeleted;
@synthesize FromSharedGroup;
@synthesize FromOrganizationName;
@synthesize Editable;
@synthesize Followable;
@synthesize FollowedByMe;
@synthesize FollowingTheGroup;
@synthesize Department;
@synthesize Location;
@synthesize FollowingGroups;
@synthesize Preferences;
@synthesize NoDetail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setFirstame:[dict valueForKey:@"Firstame"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setAvatar:[dict valueForKey:@"Avatar"]];
	[self setJID:[dict valueForKey:@"JID"]];
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setIsSuperUser:[[dict valueForKey:@"IsSuperUser"] boolValue]];
	[self setIsSharedUser:[[dict valueForKey:@"IsSharedUser"] boolValue]];
	[self setOrgId:[dict valueForKey:@"OrgId"]];
	[self setOriginalOrgId:[dict valueForKey:@"OriginalOrgId"]];
	[self setPrefixURL:[dict valueForKey:@"PrefixURL"]];
	[self setProfileURL:[dict valueForKey:@"ProfileURL"]];
	[self setIsLoggedInUser:[[dict valueForKey:@"IsLoggedInUser"] boolValue]];
	[self setIsAvailable:[[dict valueForKey:@"IsAvailable"] boolValue]];
	[self setIsDisabled:[[dict valueForKey:@"IsDisabled"] boolValue]];
	[self setIsDeleted:[[dict valueForKey:@"IsDeleted"] boolValue]];
	[self setFromSharedGroup:[[dict valueForKey:@"FromSharedGroup"] boolValue]];
	[self setFromOrganizationName:[dict valueForKey:@"FromOrganizationName"]];
	[self setEditable:[[dict valueForKey:@"Editable"] boolValue]];
	[self setFollowable:[[dict valueForKey:@"Followable"] boolValue]];
	[self setFollowedByMe:[[dict valueForKey:@"FollowedByMe"] boolValue]];
	[self setFollowingTheGroup:[[dict valueForKey:@"FollowingTheGroup"] boolValue]];
	[self setDepartment:[dict valueForKey:@"Department"]];
	[self setLocation:[dict valueForKey:@"Location"]];

	NSMutableArray * mFollowingGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingGroups = [dict valueForKey:@"FollowingGroups"];
	if ([lFollowingGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingGroups) {
			[mFollowingGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowingGroups:mFollowingGroups];
	}

	id dictPreferences = [dict valueForKey:@"Preferences"];
	if ([dictPreferences isKindOfClass:[NSDictionary class]]){
		[self setPreferences:[[QXPreferences alloc] initWithDictionary:dictPreferences]];
	}
	[self setNoDetail:[[dict valueForKey:@"NoDetail"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Firstame forKey:@"Firstame"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Avatar forKey:@"Avatar"];
	[dict setValue:self.JID forKey:@"JID"];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:[NSNumber numberWithBool:self.IsSuperUser] forKey:@"IsSuperUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsSharedUser] forKey:@"IsSharedUser"];
	[dict setValue:self.OrgId forKey:@"OrgId"];
	[dict setValue:self.OriginalOrgId forKey:@"OriginalOrgId"];
	[dict setValue:self.PrefixURL forKey:@"PrefixURL"];
	[dict setValue:self.ProfileURL forKey:@"ProfileURL"];
	[dict setValue:[NSNumber numberWithBool:self.IsLoggedInUser] forKey:@"IsLoggedInUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsAvailable] forKey:@"IsAvailable"];
	[dict setValue:[NSNumber numberWithBool:self.IsDisabled] forKey:@"IsDisabled"];
	[dict setValue:[NSNumber numberWithBool:self.IsDeleted] forKey:@"IsDeleted"];
	[dict setValue:[NSNumber numberWithBool:self.FromSharedGroup] forKey:@"FromSharedGroup"];
	[dict setValue:self.FromOrganizationName forKey:@"FromOrganizationName"];
	[dict setValue:[NSNumber numberWithBool:self.Editable] forKey:@"Editable"];
	[dict setValue:[NSNumber numberWithBool:self.Followable] forKey:@"Followable"];
	[dict setValue:[NSNumber numberWithBool:self.FollowedByMe] forKey:@"FollowedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.FollowingTheGroup] forKey:@"FollowingTheGroup"];
	[dict setValue:self.Department forKey:@"Department"];
	[dict setValue:self.Location forKey:@"Location"];

	NSMutableArray * mFollowingGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowingGroups) {
		[mFollowingGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingGroups forKey:@"FollowingGroups"];
	
	[dict setValue:[self.Preferences dictionary] forKey:@"Preferences"];
	
	[dict setValue:[NSNumber numberWithBool:self.NoDetail] forKey:@"NoDetail"];

	return dict;
}

@end

// --- Task ---
@implementation QXTask

@synthesize Id;
@synthesize GroupId;
@synthesize IsTaskOwner;
@synthesize IsTaskAssignee;
@synthesize IsOthers;
@synthesize IsCurrentUserDone;
@synthesize IsAcknowledgement;
@synthesize IsTodoForOne;
@synthesize IsTodoForAll;
@synthesize IsCompleted;
@synthesize IsClosed;
@synthesize IsToGroup;
@synthesize IsDueToday;
@synthesize IsOverDue;
@synthesize CreatedAt;
@synthesize Due;
@synthesize CompletedAt;
@synthesize LocalCreatedDate;
@synthesize LocalDue;
@synthesize LocalDueShortDate;
@synthesize DueInputValue;
@synthesize TotalUsersCount;
@synthesize CompletedUsersCount;
@synthesize PendingUsersCount;
@synthesize Owner;
@synthesize ToUsers;
@synthesize ToUsersText;
@synthesize PendingUsers;
@synthesize CompletedUsers;
@synthesize Assignee;
@synthesize ColorCssClass;
@synthesize ReopenColorCssClass;
@synthesize TaskBarHtml;
@synthesize TaskFlow;
@synthesize IsClaimed;
@synthesize IsAdvancedTask;
@synthesize AdvancedTask;
@synthesize NeedShowAppliedText;
@synthesize NeedToBeEditMode;
@synthesize IsEditing;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setIsTaskOwner:[[dict valueForKey:@"IsTaskOwner"] boolValue]];
	[self setIsTaskAssignee:[[dict valueForKey:@"IsTaskAssignee"] boolValue]];
	[self setIsOthers:[[dict valueForKey:@"IsOthers"] boolValue]];
	[self setIsCurrentUserDone:[[dict valueForKey:@"IsCurrentUserDone"] boolValue]];
	[self setIsAcknowledgement:[[dict valueForKey:@"IsAcknowledgement"] boolValue]];
	[self setIsTodoForOne:[[dict valueForKey:@"IsTodoForOne"] boolValue]];
	[self setIsTodoForAll:[[dict valueForKey:@"IsTodoForAll"] boolValue]];
	[self setIsCompleted:[[dict valueForKey:@"IsCompleted"] boolValue]];
	[self setIsClosed:[[dict valueForKey:@"IsClosed"] boolValue]];
	[self setIsToGroup:[[dict valueForKey:@"IsToGroup"] boolValue]];
	[self setIsDueToday:[[dict valueForKey:@"IsDueToday"] boolValue]];
	[self setIsOverDue:[[dict valueForKey:@"IsOverDue"] boolValue]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setDue:[QXQortexapi dateFromString:[dict valueForKey:@"Due"]]];
	[self setCompletedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CompletedAt"]]];
	[self setLocalCreatedDate:[dict valueForKey:@"LocalCreatedDate"]];
	[self setLocalDue:[dict valueForKey:@"LocalDue"]];
	[self setLocalDueShortDate:[dict valueForKey:@"LocalDueShortDate"]];
	[self setDueInputValue:[dict valueForKey:@"DueInputValue"]];
	[self setTotalUsersCount:[dict valueForKey:@"TotalUsersCount"]];
	[self setCompletedUsersCount:[dict valueForKey:@"CompletedUsersCount"]];
	[self setPendingUsersCount:[dict valueForKey:@"PendingUsersCount"]];

	id dictOwner = [dict valueForKey:@"Owner"];
	if ([dictOwner isKindOfClass:[NSDictionary class]]){
		[self setOwner:[[QXEmbedUser alloc] initWithDictionary:dictOwner]];
	}

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	NSArray * lToUsers = [dict valueForKey:@"ToUsers"];
	if ([lToUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToUsers) {
			[mToUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setToUsers:mToUsers];
	}
	[self setToUsersText:[dict valueForKey:@"ToUsersText"]];

	NSMutableArray * mPendingUsers = [[NSMutableArray alloc] init];
	NSArray * lPendingUsers = [dict valueForKey:@"PendingUsers"];
	if ([lPendingUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lPendingUsers) {
			[mPendingUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setPendingUsers:mPendingUsers];
	}

	NSMutableArray * mCompletedUsers = [[NSMutableArray alloc] init];
	NSArray * lCompletedUsers = [dict valueForKey:@"CompletedUsers"];
	if ([lCompletedUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lCompletedUsers) {
			[mCompletedUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setCompletedUsers:mCompletedUsers];
	}

	id dictAssignee = [dict valueForKey:@"Assignee"];
	if ([dictAssignee isKindOfClass:[NSDictionary class]]){
		[self setAssignee:[[QXEmbedUser alloc] initWithDictionary:dictAssignee]];
	}
	[self setColorCssClass:[dict valueForKey:@"ColorCssClass"]];
	[self setReopenColorCssClass:[dict valueForKey:@"ReopenColorCssClass"]];
	[self setTaskBarHtml:[dict valueForKey:@"TaskBarHtml"]];
	[self setTaskFlow:[dict valueForKey:@"TaskFlow"]];
	[self setIsClaimed:[[dict valueForKey:@"IsClaimed"] boolValue]];
	[self setIsAdvancedTask:[[dict valueForKey:@"IsAdvancedTask"] boolValue]];

	id dictAdvancedTask = [dict valueForKey:@"AdvancedTask"];
	if ([dictAdvancedTask isKindOfClass:[NSDictionary class]]){
		[self setAdvancedTask:[[QXAdvancedTask alloc] initWithDictionary:dictAdvancedTask]];
	}
	[self setNeedShowAppliedText:[[dict valueForKey:@"NeedShowAppliedText"] boolValue]];
	[self setNeedToBeEditMode:[[dict valueForKey:@"NeedToBeEditMode"] boolValue]];
	[self setIsEditing:[[dict valueForKey:@"IsEditing"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskOwner] forKey:@"IsTaskOwner"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskAssignee] forKey:@"IsTaskAssignee"];
	[dict setValue:[NSNumber numberWithBool:self.IsOthers] forKey:@"IsOthers"];
	[dict setValue:[NSNumber numberWithBool:self.IsCurrentUserDone] forKey:@"IsCurrentUserDone"];
	[dict setValue:[NSNumber numberWithBool:self.IsAcknowledgement] forKey:@"IsAcknowledgement"];
	[dict setValue:[NSNumber numberWithBool:self.IsTodoForOne] forKey:@"IsTodoForOne"];
	[dict setValue:[NSNumber numberWithBool:self.IsTodoForAll] forKey:@"IsTodoForAll"];
	[dict setValue:[NSNumber numberWithBool:self.IsCompleted] forKey:@"IsCompleted"];
	[dict setValue:[NSNumber numberWithBool:self.IsClosed] forKey:@"IsClosed"];
	[dict setValue:[NSNumber numberWithBool:self.IsToGroup] forKey:@"IsToGroup"];
	[dict setValue:[NSNumber numberWithBool:self.IsDueToday] forKey:@"IsDueToday"];
	[dict setValue:[NSNumber numberWithBool:self.IsOverDue] forKey:@"IsOverDue"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.Due] forKey:@"Due"];
	[dict setValue:[QXQortexapi stringFromDate:self.CompletedAt] forKey:@"CompletedAt"];
	[dict setValue:self.LocalCreatedDate forKey:@"LocalCreatedDate"];
	[dict setValue:self.LocalDue forKey:@"LocalDue"];
	[dict setValue:self.LocalDueShortDate forKey:@"LocalDueShortDate"];
	[dict setValue:self.DueInputValue forKey:@"DueInputValue"];
	[dict setValue:self.TotalUsersCount forKey:@"TotalUsersCount"];
	[dict setValue:self.CompletedUsersCount forKey:@"CompletedUsersCount"];
	[dict setValue:self.PendingUsersCount forKey:@"PendingUsersCount"];
	[dict setValue:[self.Owner dictionary] forKey:@"Owner"];
	

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in ToUsers) {
		[mToUsers addObject:[p dictionary]];
	}
	[dict setValue:mToUsers forKey:@"ToUsers"];
	
	[dict setValue:self.ToUsersText forKey:@"ToUsersText"];

	NSMutableArray * mPendingUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in PendingUsers) {
		[mPendingUsers addObject:[p dictionary]];
	}
	[dict setValue:mPendingUsers forKey:@"PendingUsers"];
	

	NSMutableArray * mCompletedUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in CompletedUsers) {
		[mCompletedUsers addObject:[p dictionary]];
	}
	[dict setValue:mCompletedUsers forKey:@"CompletedUsers"];
	
	[dict setValue:[self.Assignee dictionary] forKey:@"Assignee"];
	
	[dict setValue:self.ColorCssClass forKey:@"ColorCssClass"];
	[dict setValue:self.ReopenColorCssClass forKey:@"ReopenColorCssClass"];
	[dict setValue:self.TaskBarHtml forKey:@"TaskBarHtml"];
	[dict setValue:self.TaskFlow forKey:@"TaskFlow"];
	[dict setValue:[NSNumber numberWithBool:self.IsClaimed] forKey:@"IsClaimed"];
	[dict setValue:[NSNumber numberWithBool:self.IsAdvancedTask] forKey:@"IsAdvancedTask"];
	[dict setValue:[self.AdvancedTask dictionary] forKey:@"AdvancedTask"];
	
	[dict setValue:[NSNumber numberWithBool:self.NeedShowAppliedText] forKey:@"NeedShowAppliedText"];
	[dict setValue:[NSNumber numberWithBool:self.NeedToBeEditMode] forKey:@"NeedToBeEditMode"];
	[dict setValue:[NSNumber numberWithBool:self.IsEditing] forKey:@"IsEditing"];

	return dict;
}

@end

// --- GroupAdvancedSettingPage ---
@implementation QXGroupAdvancedSettingPage

@synthesize Group;
@synthesize Followers;
@synthesize CurrentOrg;
@synthesize SharingInfo;
@synthesize CreatingGroup;
@synthesize Editable;
@synthesize ThrowawayStatusSuggestions;
@synthesize ThrowawayNotYetOpenTagIndexes;
@synthesize ThrowawayOpenTagIndexes;
@synthesize ThrowawayClosedTagIndexes;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}

	NSMutableArray * mFollowers = [[NSMutableArray alloc] init];
	NSArray * lFollowers = [dict valueForKey:@"Followers"];
	if ([lFollowers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowers) {
			[mFollowers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setFollowers:mFollowers];
	}

	id dictCurrentOrg = [dict valueForKey:@"CurrentOrg"];
	if ([dictCurrentOrg isKindOfClass:[NSDictionary class]]){
		[self setCurrentOrg:[[QXOrganization alloc] initWithDictionary:dictCurrentOrg]];
	}

	id dictSharingInfo = [dict valueForKey:@"SharingInfo"];
	if ([dictSharingInfo isKindOfClass:[NSDictionary class]]){
		[self setSharingInfo:[[QXGroupSharingInfo alloc] initWithDictionary:dictSharingInfo]];
	}
	[self setCreatingGroup:[[dict valueForKey:@"CreatingGroup"] boolValue]];
	[self setEditable:[[dict valueForKey:@"Editable"] boolValue]];
	[self setThrowawayStatusSuggestions:[dict valueForKey:@"ThrowawayStatusSuggestions"]];
	[self setThrowawayNotYetOpenTagIndexes:[dict valueForKey:@"ThrowawayNotYetOpenTagIndexes"]];
	[self setThrowawayOpenTagIndexes:[dict valueForKey:@"ThrowawayOpenTagIndexes"]];
	[self setThrowawayClosedTagIndexes:[dict valueForKey:@"ThrowawayClosedTagIndexes"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	

	NSMutableArray * mFollowers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in Followers) {
		[mFollowers addObject:[p dictionary]];
	}
	[dict setValue:mFollowers forKey:@"Followers"];
	
	[dict setValue:[self.CurrentOrg dictionary] forKey:@"CurrentOrg"];
	
	[dict setValue:[self.SharingInfo dictionary] forKey:@"SharingInfo"];
	
	[dict setValue:[NSNumber numberWithBool:self.CreatingGroup] forKey:@"CreatingGroup"];
	[dict setValue:[NSNumber numberWithBool:self.Editable] forKey:@"Editable"];
	[dict setValue:self.ThrowawayStatusSuggestions forKey:@"ThrowawayStatusSuggestions"];
	[dict setValue:self.ThrowawayNotYetOpenTagIndexes forKey:@"ThrowawayNotYetOpenTagIndexes"];
	[dict setValue:self.ThrowawayOpenTagIndexes forKey:@"ThrowawayOpenTagIndexes"];
	[dict setValue:self.ThrowawayClosedTagIndexes forKey:@"ThrowawayClosedTagIndexes"];

	return dict;
}

@end

// --- Member ---
@implementation QXMember

@synthesize Name;
@synthesize Email;
@synthesize ComfirmationSentAt;
@synthesize SignupConfirmedAt;
@synthesize SignupStatus;
@synthesize JoinedOrgs;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setComfirmationSentAt:[dict valueForKey:@"ComfirmationSentAt"]];
	[self setSignupConfirmedAt:[dict valueForKey:@"SignupConfirmedAt"]];
	[self setSignupStatus:[dict valueForKey:@"SignupStatus"]];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	NSArray * lJoinedOrgs = [dict valueForKey:@"JoinedOrgs"];
	if ([lJoinedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lJoinedOrgs) {
			[mJoinedOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setJoinedOrgs:mJoinedOrgs];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.ComfirmationSentAt forKey:@"ComfirmationSentAt"];
	[dict setValue:self.SignupConfirmedAt forKey:@"SignupConfirmedAt"];
	[dict setValue:self.SignupStatus forKey:@"SignupStatus"];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in JoinedOrgs) {
		[mJoinedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mJoinedOrgs forKey:@"JoinedOrgs"];
	

	return dict;
}

@end

// --- OrgStats ---
@implementation QXOrgStats

@synthesize Organization;
@synthesize UserCount;
@synthesize GroupCount;
@synthesize SharedGroupCount;
@synthesize EntryCount;
@synthesize CommentCount;
@synthesize ChatCount;
@synthesize CreatedAt;
@synthesize LastUpdate;
@synthesize Author;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrganization = [dict valueForKey:@"Organization"];
	if ([dictOrganization isKindOfClass:[NSDictionary class]]){
		[self setOrganization:[[QXOrganization alloc] initWithDictionary:dictOrganization]];
	}
	[self setUserCount:[dict valueForKey:@"UserCount"]];
	[self setGroupCount:[dict valueForKey:@"GroupCount"]];
	[self setSharedGroupCount:[dict valueForKey:@"SharedGroupCount"]];
	[self setEntryCount:[dict valueForKey:@"EntryCount"]];
	[self setCommentCount:[dict valueForKey:@"CommentCount"]];
	[self setChatCount:[dict valueForKey:@"ChatCount"]];
	[self setCreatedAt:[dict valueForKey:@"CreatedAt"]];
	[self setLastUpdate:[dict valueForKey:@"LastUpdate"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Organization dictionary] forKey:@"Organization"];
	
	[dict setValue:self.UserCount forKey:@"UserCount"];
	[dict setValue:self.GroupCount forKey:@"GroupCount"];
	[dict setValue:self.SharedGroupCount forKey:@"SharedGroupCount"];
	[dict setValue:self.EntryCount forKey:@"EntryCount"];
	[dict setValue:self.CommentCount forKey:@"CommentCount"];
	[dict setValue:self.ChatCount forKey:@"ChatCount"];
	[dict setValue:self.CreatedAt forKey:@"CreatedAt"];
	[dict setValue:self.LastUpdate forKey:@"LastUpdate"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	

	return dict;
}

@end

// --- Entry ---
@implementation QXEntry

@synthesize Id;
@synthesize EType;
@synthesize Title;
@synthesize Slug;
@synthesize Content;
@synthesize TypeTitle;
@synthesize RootId;
@synthesize GroupId;
@synthesize AuthorId;
@synthesize CreatedAt;
@synthesize UpdatedAt;
@synthesize BumpedUpAt;
@synthesize VersionAt;
@synthesize BaseOnEntryId;
@synthesize AllAttachmentsURL;
@synthesize Permalink;
@synthesize IconName;
@synthesize LocalHumanCreatedAt;
@synthesize LocalHumanUpdatedAt;
@synthesize WholeLastUpdateAtAgo;
@synthesize WholeLastUpdateAt;
@synthesize LastUpdateAtAgo;
@synthesize WatchedAtAgo;
@synthesize NextRemindAtLater;
@synthesize MentionedUserIds;
@synthesize DomainURL;
@synthesize UpdatedAtUnixNano;
@synthesize LastUpdateAt;
@synthesize HtmlTitle;
@synthesize HtmlContent;
@synthesize HtmlContentPart;
@synthesize TaskHtmlContentPart;
@synthesize WatchlistHtml;
@synthesize ToUsersHtml;
@synthesize LikedByUsersHtml;
@synthesize Link;
@synthesize BaseOnLink;
@synthesize BaseOnLinkTitle;
@synthesize PresentationLink;
@synthesize UploadURL;
@synthesize IsShared;
@synthesize IsPublished;
@synthesize PublishedToUsers;
@synthesize IsCanPublish;
@synthesize IsPreferMarkdown;
@synthesize IsMuted;
@synthesize IsReminding;
@synthesize IsSmartReminding;
@synthesize IsNoReminding;
@synthesize InnerMessage;
@synthesize IsSystemMessage;
@synthesize IsInnerMessage;
@synthesize IsBroadcast;
@synthesize IsFromSuperOrg;
@synthesize IsFromSuperUser;
@synthesize IsFeedback;
@synthesize FromOrg;
@synthesize ToOrgs;
@synthesize ToOrgsHtml;
@synthesize IsHidePresentationTip;
@synthesize IsKnowledgeBase;
@synthesize IsPost;
@synthesize IsComment;
@synthesize IsTask;
@synthesize IsChat;
@synthesize IsTaskToDo;
@synthesize IsTaskAck;
@synthesize IsTaskLog;
@synthesize IsInWatchList;
@synthesize IsToGroup;
@synthesize CanEdit;
@synthesize CanReply;
@synthesize LikedByMe;
@synthesize HasInlineTask;
@synthesize TaskIsCompleted;
@synthesize IsRoot;
@synthesize IsUnread;
@synthesize IsUpdated;
@synthesize IsLastVersion;
@synthesize Presentation;
@synthesize AnyoneCanEdit;
@synthesize IsInGroup;
@synthesize IsFromEmail;
@synthesize InlineHelp;
@synthesize AllAttachmentsCount;
@synthesize CommentsCount;
@synthesize CurrentVersionCommentsCount;
@synthesize AllLikesCount;
@synthesize VersionCount;
@synthesize UnreadCommentCount;
@synthesize Author;
@synthesize CurrentVersionEditor;
@synthesize Group;
@synthesize Todo;
@synthesize Ack;
@synthesize Conversation;
@synthesize Versions;
@synthesize ToUsers;
@synthesize MentionedUsers;
@synthesize LikedByUsers;
@synthesize Attachments;
@synthesize CommentsAttachments;
@synthesize FirstPicture;
@synthesize ExternalComments;
@synthesize CurrentVersionComments;
@synthesize OtherVersionsComments;
@synthesize NewComment;
@synthesize NewEntry;
@synthesize GroupSlector;
@synthesize QortexSupportNotifyOptions;
@synthesize IsQortexSupport;
@synthesize QortexSupport;
@synthesize IsQortexSupportKnowledgeBase;
@synthesize LinkTitle;
@synthesize IsRequest;
@synthesize ShareRequest;
@synthesize VisibleForSuperUserInSuperOrg;
@synthesize VisibleForSuperOrg;
@synthesize CurrentLocaleName;
@synthesize LocaleTitleMap;
@synthesize LocaleContentMap;
@synthesize DerivedToDoEntries;
@synthesize RelatedToDoEntries;
@synthesize BasedOnPost;
@synthesize RelatedEntries;
@synthesize LinkedEntries;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEType:[dict valueForKey:@"EType"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setTypeTitle:[dict valueForKey:@"TypeTitle"]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAuthorId:[dict valueForKey:@"AuthorId"]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setUpdatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"UpdatedAt"]]];
	[self setBumpedUpAt:[QXQortexapi dateFromString:[dict valueForKey:@"BumpedUpAt"]]];
	[self setVersionAt:[QXQortexapi dateFromString:[dict valueForKey:@"VersionAt"]]];
	[self setBaseOnEntryId:[dict valueForKey:@"BaseOnEntryId"]];
	[self setAllAttachmentsURL:[dict valueForKey:@"AllAttachmentsURL"]];
	[self setPermalink:[dict valueForKey:@"Permalink"]];
	[self setIconName:[dict valueForKey:@"IconName"]];
	[self setLocalHumanCreatedAt:[dict valueForKey:@"LocalHumanCreatedAt"]];
	[self setLocalHumanUpdatedAt:[dict valueForKey:@"LocalHumanUpdatedAt"]];
	[self setWholeLastUpdateAtAgo:[dict valueForKey:@"WholeLastUpdateAtAgo"]];
	[self setWholeLastUpdateAt:[QXQortexapi dateFromString:[dict valueForKey:@"WholeLastUpdateAt"]]];
	[self setLastUpdateAtAgo:[dict valueForKey:@"LastUpdateAtAgo"]];
	[self setWatchedAtAgo:[dict valueForKey:@"WatchedAtAgo"]];
	[self setNextRemindAtLater:[dict valueForKey:@"NextRemindAtLater"]];
	[self setMentionedUserIds:[dict valueForKey:@"MentionedUserIds"]];
	[self setDomainURL:[dict valueForKey:@"DomainURL"]];
	[self setUpdatedAtUnixNano:[dict valueForKey:@"UpdatedAtUnixNano"]];
	[self setLastUpdateAt:[dict valueForKey:@"LastUpdateAt"]];
	[self setHtmlTitle:[dict valueForKey:@"HtmlTitle"]];
	[self setHtmlContent:[dict valueForKey:@"HtmlContent"]];
	[self setHtmlContentPart:[dict valueForKey:@"HtmlContentPart"]];
	[self setTaskHtmlContentPart:[dict valueForKey:@"TaskHtmlContentPart"]];
	[self setWatchlistHtml:[dict valueForKey:@"WatchlistHtml"]];
	[self setToUsersHtml:[dict valueForKey:@"ToUsersHtml"]];
	[self setLikedByUsersHtml:[dict valueForKey:@"LikedByUsersHtml"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setBaseOnLink:[dict valueForKey:@"BaseOnLink"]];
	[self setBaseOnLinkTitle:[dict valueForKey:@"BaseOnLinkTitle"]];
	[self setPresentationLink:[dict valueForKey:@"PresentationLink"]];
	[self setUploadURL:[dict valueForKey:@"UploadURL"]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setIsPublished:[[dict valueForKey:@"IsPublished"] boolValue]];
	[self setPublishedToUsers:[[dict valueForKey:@"PublishedToUsers"] boolValue]];
	[self setIsCanPublish:[[dict valueForKey:@"IsCanPublish"] boolValue]];
	[self setIsPreferMarkdown:[[dict valueForKey:@"IsPreferMarkdown"] boolValue]];
	[self setIsMuted:[[dict valueForKey:@"IsMuted"] boolValue]];
	[self setIsReminding:[[dict valueForKey:@"IsReminding"] boolValue]];
	[self setIsSmartReminding:[[dict valueForKey:@"IsSmartReminding"] boolValue]];
	[self setIsNoReminding:[[dict valueForKey:@"IsNoReminding"] boolValue]];

	id dictInnerMessage = [dict valueForKey:@"InnerMessage"];
	if ([dictInnerMessage isKindOfClass:[NSDictionary class]]){
		[self setInnerMessage:[[QXInnerMessage alloc] initWithDictionary:dictInnerMessage]];
	}
	[self setIsSystemMessage:[[dict valueForKey:@"IsSystemMessage"] boolValue]];
	[self setIsInnerMessage:[[dict valueForKey:@"IsInnerMessage"] boolValue]];
	[self setIsBroadcast:[[dict valueForKey:@"IsBroadcast"] boolValue]];
	[self setIsFromSuperOrg:[[dict valueForKey:@"IsFromSuperOrg"] boolValue]];
	[self setIsFromSuperUser:[[dict valueForKey:@"IsFromSuperUser"] boolValue]];
	[self setIsFeedback:[[dict valueForKey:@"IsFeedback"] boolValue]];

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	NSMutableArray * mToOrgs = [[NSMutableArray alloc] init];
	NSArray * lToOrgs = [dict valueForKey:@"ToOrgs"];
	if ([lToOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToOrgs) {
			[mToOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setToOrgs:mToOrgs];
	}
	[self setToOrgsHtml:[dict valueForKey:@"ToOrgsHtml"]];
	[self setIsHidePresentationTip:[[dict valueForKey:@"IsHidePresentationTip"] boolValue]];
	[self setIsKnowledgeBase:[[dict valueForKey:@"IsKnowledgeBase"] boolValue]];
	[self setIsPost:[[dict valueForKey:@"IsPost"] boolValue]];
	[self setIsComment:[[dict valueForKey:@"IsComment"] boolValue]];
	[self setIsTask:[[dict valueForKey:@"IsTask"] boolValue]];
	[self setIsChat:[[dict valueForKey:@"IsChat"] boolValue]];
	[self setIsTaskToDo:[[dict valueForKey:@"IsTaskToDo"] boolValue]];
	[self setIsTaskAck:[[dict valueForKey:@"IsTaskAck"] boolValue]];
	[self setIsTaskLog:[[dict valueForKey:@"IsTaskLog"] boolValue]];
	[self setIsInWatchList:[[dict valueForKey:@"IsInWatchList"] boolValue]];
	[self setIsToGroup:[dict valueForKey:@"IsToGroup"]];
	[self setCanEdit:[[dict valueForKey:@"CanEdit"] boolValue]];
	[self setCanReply:[[dict valueForKey:@"CanReply"] boolValue]];
	[self setLikedByMe:[[dict valueForKey:@"LikedByMe"] boolValue]];
	[self setHasInlineTask:[[dict valueForKey:@"HasInlineTask"] boolValue]];
	[self setTaskIsCompleted:[[dict valueForKey:@"TaskIsCompleted"] boolValue]];
	[self setIsRoot:[[dict valueForKey:@"IsRoot"] boolValue]];
	[self setIsUnread:[[dict valueForKey:@"IsUnread"] boolValue]];
	[self setIsUpdated:[[dict valueForKey:@"IsUpdated"] boolValue]];
	[self setIsLastVersion:[[dict valueForKey:@"IsLastVersion"] boolValue]];
	[self setPresentation:[[dict valueForKey:@"Presentation"] boolValue]];
	[self setAnyoneCanEdit:[[dict valueForKey:@"AnyoneCanEdit"] boolValue]];
	[self setIsInGroup:[[dict valueForKey:@"IsInGroup"] boolValue]];
	[self setIsFromEmail:[[dict valueForKey:@"IsFromEmail"] boolValue]];
	[self setInlineHelp:[[dict valueForKey:@"InlineHelp"] boolValue]];
	[self setAllAttachmentsCount:[dict valueForKey:@"AllAttachmentsCount"]];
	[self setCommentsCount:[dict valueForKey:@"CommentsCount"]];
	[self setCurrentVersionCommentsCount:[dict valueForKey:@"CurrentVersionCommentsCount"]];
	[self setAllLikesCount:[dict valueForKey:@"AllLikesCount"]];
	[self setVersionCount:[dict valueForKey:@"VersionCount"]];
	[self setUnreadCommentCount:[dict valueForKey:@"UnreadCommentCount"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	id dictCurrentVersionEditor = [dict valueForKey:@"CurrentVersionEditor"];
	if ([dictCurrentVersionEditor isKindOfClass:[NSDictionary class]]){
		[self setCurrentVersionEditor:[[QXEmbedUser alloc] initWithDictionary:dictCurrentVersionEditor]];
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}

	id dictTodo = [dict valueForKey:@"Todo"];
	if ([dictTodo isKindOfClass:[NSDictionary class]]){
		[self setTodo:[[QXTask alloc] initWithDictionary:dictTodo]];
	}

	id dictAck = [dict valueForKey:@"Ack"];
	if ([dictAck isKindOfClass:[NSDictionary class]]){
		[self setAck:[[QXTask alloc] initWithDictionary:dictAck]];
	}

	id dictConversation = [dict valueForKey:@"Conversation"];
	if ([dictConversation isKindOfClass:[NSDictionary class]]){
		[self setConversation:[[QXConversation alloc] initWithDictionary:dictConversation]];
	}

	NSMutableArray * mVersions = [[NSMutableArray alloc] init];
	NSArray * lVersions = [dict valueForKey:@"Versions"];
	if ([lVersions isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lVersions) {
			[mVersions addObject: [[QXEntryVersion alloc] initWithDictionary:d]];
		}
		[self setVersions:mVersions];
	}

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	NSArray * lToUsers = [dict valueForKey:@"ToUsers"];
	if ([lToUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToUsers) {
			[mToUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setToUsers:mToUsers];
	}

	NSMutableArray * mMentionedUsers = [[NSMutableArray alloc] init];
	NSArray * lMentionedUsers = [dict valueForKey:@"MentionedUsers"];
	if ([lMentionedUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMentionedUsers) {
			[mMentionedUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setMentionedUsers:mMentionedUsers];
	}

	NSMutableArray * mLikedByUsers = [[NSMutableArray alloc] init];
	NSArray * lLikedByUsers = [dict valueForKey:@"LikedByUsers"];
	if ([lLikedByUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lLikedByUsers) {
			[mLikedByUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setLikedByUsers:mLikedByUsers];
	}

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	NSArray * lAttachments = [dict valueForKey:@"Attachments"];
	if ([lAttachments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAttachments) {
			[mAttachments addObject: [[QXAttachment alloc] initWithDictionary:d]];
		}
		[self setAttachments:mAttachments];
	}

	NSMutableArray * mCommentsAttachments = [[NSMutableArray alloc] init];
	NSArray * lCommentsAttachments = [dict valueForKey:@"CommentsAttachments"];
	if ([lCommentsAttachments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lCommentsAttachments) {
			[mCommentsAttachments addObject: [[QXAttachment alloc] initWithDictionary:d]];
		}
		[self setCommentsAttachments:mCommentsAttachments];
	}

	id dictFirstPicture = [dict valueForKey:@"FirstPicture"];
	if ([dictFirstPicture isKindOfClass:[NSDictionary class]]){
		[self setFirstPicture:[[QXAttachment alloc] initWithDictionary:dictFirstPicture]];
	}

	NSMutableArray * mExternalComments = [[NSMutableArray alloc] init];
	NSArray * lExternalComments = [dict valueForKey:@"ExternalComments"];
	if ([lExternalComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lExternalComments) {
			[mExternalComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setExternalComments:mExternalComments];
	}

	NSMutableArray * mCurrentVersionComments = [[NSMutableArray alloc] init];
	NSArray * lCurrentVersionComments = [dict valueForKey:@"CurrentVersionComments"];
	if ([lCurrentVersionComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lCurrentVersionComments) {
			[mCurrentVersionComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setCurrentVersionComments:mCurrentVersionComments];
	}

	NSMutableArray * mOtherVersionsComments = [[NSMutableArray alloc] init];
	NSArray * lOtherVersionsComments = [dict valueForKey:@"OtherVersionsComments"];
	if ([lOtherVersionsComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOtherVersionsComments) {
			[mOtherVersionsComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setOtherVersionsComments:mOtherVersionsComments];
	}

	id dictNewComment = [dict valueForKey:@"NewComment"];
	if ([dictNewComment isKindOfClass:[NSDictionary class]]){
		[self setNewComment:[[QXEntry alloc] initWithDictionary:dictNewComment]];
	}

	id dictNewEntry = [dict valueForKey:@"NewEntry"];
	if ([dictNewEntry isKindOfClass:[NSDictionary class]]){
		[self setNewEntry:[[QXEntry alloc] initWithDictionary:dictNewEntry]];
	}

	id dictGroupSlector = [dict valueForKey:@"GroupSlector"];
	if ([dictGroupSlector isKindOfClass:[NSDictionary class]]){
		[self setGroupSlector:[[QXGroupSelector alloc] initWithDictionary:dictGroupSlector]];
	}
	[self setQortexSupportNotifyOptions:[dict valueForKey:@"QortexSupportNotifyOptions"]];
	[self setIsQortexSupport:[[dict valueForKey:@"IsQortexSupport"] boolValue]];

	id dictQortexSupport = [dict valueForKey:@"QortexSupport"];
	if ([dictQortexSupport isKindOfClass:[NSDictionary class]]){
		[self setQortexSupport:[[QXQortexSupport alloc] initWithDictionary:dictQortexSupport]];
	}
	[self setIsQortexSupportKnowledgeBase:[[dict valueForKey:@"IsQortexSupportKnowledgeBase"] boolValue]];
	[self setLinkTitle:[dict valueForKey:@"LinkTitle"]];
	[self setIsRequest:[[dict valueForKey:@"IsRequest"] boolValue]];

	id dictShareRequest = [dict valueForKey:@"ShareRequest"];
	if ([dictShareRequest isKindOfClass:[NSDictionary class]]){
		[self setShareRequest:[[QXShareRequest alloc] initWithDictionary:dictShareRequest]];
	}
	[self setVisibleForSuperUserInSuperOrg:[[dict valueForKey:@"VisibleForSuperUserInSuperOrg"] boolValue]];
	[self setVisibleForSuperOrg:[[dict valueForKey:@"VisibleForSuperOrg"] boolValue]];
	[self setCurrentLocaleName:[dict valueForKey:@"CurrentLocaleName"]];
	[self setLocaleTitleMap:[dict valueForKey:@"LocaleTitleMap"]];
	[self setLocaleContentMap:[dict valueForKey:@"LocaleContentMap"]];

	NSMutableArray * mDerivedToDoEntries = [[NSMutableArray alloc] init];
	NSArray * lDerivedToDoEntries = [dict valueForKey:@"DerivedToDoEntries"];
	if ([lDerivedToDoEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lDerivedToDoEntries) {
			[mDerivedToDoEntries addObject: [[QXRelatedEntry alloc] initWithDictionary:d]];
		}
		[self setDerivedToDoEntries:mDerivedToDoEntries];
	}

	NSMutableArray * mRelatedToDoEntries = [[NSMutableArray alloc] init];
	NSArray * lRelatedToDoEntries = [dict valueForKey:@"RelatedToDoEntries"];
	if ([lRelatedToDoEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lRelatedToDoEntries) {
			[mRelatedToDoEntries addObject: [[QXRelatedEntry alloc] initWithDictionary:d]];
		}
		[self setRelatedToDoEntries:mRelatedToDoEntries];
	}

	id dictBasedOnPost = [dict valueForKey:@"BasedOnPost"];
	if ([dictBasedOnPost isKindOfClass:[NSDictionary class]]){
		[self setBasedOnPost:[[QXBasedOnPost alloc] initWithDictionary:dictBasedOnPost]];
	}

	NSMutableArray * mRelatedEntries = [[NSMutableArray alloc] init];
	NSArray * lRelatedEntries = [dict valueForKey:@"RelatedEntries"];
	if ([lRelatedEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lRelatedEntries) {
			[mRelatedEntries addObject: [[QXRelatedEntry alloc] initWithDictionary:d]];
		}
		[self setRelatedEntries:mRelatedEntries];
	}

	NSMutableArray * mLinkedEntries = [[NSMutableArray alloc] init];
	NSArray * lLinkedEntries = [dict valueForKey:@"LinkedEntries"];
	if ([lLinkedEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lLinkedEntries) {
			[mLinkedEntries addObject: [[QXLinkedEntry alloc] initWithDictionary:d]];
		}
		[self setLinkedEntries:mLinkedEntries];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.TypeTitle forKey:@"TypeTitle"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AuthorId forKey:@"AuthorId"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.UpdatedAt] forKey:@"UpdatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.BumpedUpAt] forKey:@"BumpedUpAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.VersionAt] forKey:@"VersionAt"];
	[dict setValue:self.BaseOnEntryId forKey:@"BaseOnEntryId"];
	[dict setValue:self.AllAttachmentsURL forKey:@"AllAttachmentsURL"];
	[dict setValue:self.Permalink forKey:@"Permalink"];
	[dict setValue:self.IconName forKey:@"IconName"];
	[dict setValue:self.LocalHumanCreatedAt forKey:@"LocalHumanCreatedAt"];
	[dict setValue:self.LocalHumanUpdatedAt forKey:@"LocalHumanUpdatedAt"];
	[dict setValue:self.WholeLastUpdateAtAgo forKey:@"WholeLastUpdateAtAgo"];
	[dict setValue:[QXQortexapi stringFromDate:self.WholeLastUpdateAt] forKey:@"WholeLastUpdateAt"];
	[dict setValue:self.LastUpdateAtAgo forKey:@"LastUpdateAtAgo"];
	[dict setValue:self.WatchedAtAgo forKey:@"WatchedAtAgo"];
	[dict setValue:self.NextRemindAtLater forKey:@"NextRemindAtLater"];
	[dict setValue:self.MentionedUserIds forKey:@"MentionedUserIds"];
	[dict setValue:self.DomainURL forKey:@"DomainURL"];
	[dict setValue:self.UpdatedAtUnixNano forKey:@"UpdatedAtUnixNano"];
	[dict setValue:self.LastUpdateAt forKey:@"LastUpdateAt"];
	[dict setValue:self.HtmlTitle forKey:@"HtmlTitle"];
	[dict setValue:self.HtmlContent forKey:@"HtmlContent"];
	[dict setValue:self.HtmlContentPart forKey:@"HtmlContentPart"];
	[dict setValue:self.TaskHtmlContentPart forKey:@"TaskHtmlContentPart"];
	[dict setValue:self.WatchlistHtml forKey:@"WatchlistHtml"];
	[dict setValue:self.ToUsersHtml forKey:@"ToUsersHtml"];
	[dict setValue:self.LikedByUsersHtml forKey:@"LikedByUsersHtml"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.BaseOnLink forKey:@"BaseOnLink"];
	[dict setValue:self.BaseOnLinkTitle forKey:@"BaseOnLinkTitle"];
	[dict setValue:self.PresentationLink forKey:@"PresentationLink"];
	[dict setValue:self.UploadURL forKey:@"UploadURL"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:[NSNumber numberWithBool:self.IsPublished] forKey:@"IsPublished"];
	[dict setValue:[NSNumber numberWithBool:self.PublishedToUsers] forKey:@"PublishedToUsers"];
	[dict setValue:[NSNumber numberWithBool:self.IsCanPublish] forKey:@"IsCanPublish"];
	[dict setValue:[NSNumber numberWithBool:self.IsPreferMarkdown] forKey:@"IsPreferMarkdown"];
	[dict setValue:[NSNumber numberWithBool:self.IsMuted] forKey:@"IsMuted"];
	[dict setValue:[NSNumber numberWithBool:self.IsReminding] forKey:@"IsReminding"];
	[dict setValue:[NSNumber numberWithBool:self.IsSmartReminding] forKey:@"IsSmartReminding"];
	[dict setValue:[NSNumber numberWithBool:self.IsNoReminding] forKey:@"IsNoReminding"];
	[dict setValue:[self.InnerMessage dictionary] forKey:@"InnerMessage"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsSystemMessage] forKey:@"IsSystemMessage"];
	[dict setValue:[NSNumber numberWithBool:self.IsInnerMessage] forKey:@"IsInnerMessage"];
	[dict setValue:[NSNumber numberWithBool:self.IsBroadcast] forKey:@"IsBroadcast"];
	[dict setValue:[NSNumber numberWithBool:self.IsFromSuperOrg] forKey:@"IsFromSuperOrg"];
	[dict setValue:[NSNumber numberWithBool:self.IsFromSuperUser] forKey:@"IsFromSuperUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsFeedback] forKey:@"IsFeedback"];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	

	NSMutableArray * mToOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in ToOrgs) {
		[mToOrgs addObject:[p dictionary]];
	}
	[dict setValue:mToOrgs forKey:@"ToOrgs"];
	
	[dict setValue:self.ToOrgsHtml forKey:@"ToOrgsHtml"];
	[dict setValue:[NSNumber numberWithBool:self.IsHidePresentationTip] forKey:@"IsHidePresentationTip"];
	[dict setValue:[NSNumber numberWithBool:self.IsKnowledgeBase] forKey:@"IsKnowledgeBase"];
	[dict setValue:[NSNumber numberWithBool:self.IsPost] forKey:@"IsPost"];
	[dict setValue:[NSNumber numberWithBool:self.IsComment] forKey:@"IsComment"];
	[dict setValue:[NSNumber numberWithBool:self.IsTask] forKey:@"IsTask"];
	[dict setValue:[NSNumber numberWithBool:self.IsChat] forKey:@"IsChat"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskToDo] forKey:@"IsTaskToDo"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskAck] forKey:@"IsTaskAck"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskLog] forKey:@"IsTaskLog"];
	[dict setValue:[NSNumber numberWithBool:self.IsInWatchList] forKey:@"IsInWatchList"];
	[dict setValue:self.IsToGroup forKey:@"IsToGroup"];
	[dict setValue:[NSNumber numberWithBool:self.CanEdit] forKey:@"CanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.CanReply] forKey:@"CanReply"];
	[dict setValue:[NSNumber numberWithBool:self.LikedByMe] forKey:@"LikedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.HasInlineTask] forKey:@"HasInlineTask"];
	[dict setValue:[NSNumber numberWithBool:self.TaskIsCompleted] forKey:@"TaskIsCompleted"];
	[dict setValue:[NSNumber numberWithBool:self.IsRoot] forKey:@"IsRoot"];
	[dict setValue:[NSNumber numberWithBool:self.IsUnread] forKey:@"IsUnread"];
	[dict setValue:[NSNumber numberWithBool:self.IsUpdated] forKey:@"IsUpdated"];
	[dict setValue:[NSNumber numberWithBool:self.IsLastVersion] forKey:@"IsLastVersion"];
	[dict setValue:[NSNumber numberWithBool:self.Presentation] forKey:@"Presentation"];
	[dict setValue:[NSNumber numberWithBool:self.AnyoneCanEdit] forKey:@"AnyoneCanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.IsInGroup] forKey:@"IsInGroup"];
	[dict setValue:[NSNumber numberWithBool:self.IsFromEmail] forKey:@"IsFromEmail"];
	[dict setValue:[NSNumber numberWithBool:self.InlineHelp] forKey:@"InlineHelp"];
	[dict setValue:self.AllAttachmentsCount forKey:@"AllAttachmentsCount"];
	[dict setValue:self.CommentsCount forKey:@"CommentsCount"];
	[dict setValue:self.CurrentVersionCommentsCount forKey:@"CurrentVersionCommentsCount"];
	[dict setValue:self.AllLikesCount forKey:@"AllLikesCount"];
	[dict setValue:self.VersionCount forKey:@"VersionCount"];
	[dict setValue:self.UnreadCommentCount forKey:@"UnreadCommentCount"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	
	[dict setValue:[self.CurrentVersionEditor dictionary] forKey:@"CurrentVersionEditor"];
	
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:[self.Todo dictionary] forKey:@"Todo"];
	
	[dict setValue:[self.Ack dictionary] forKey:@"Ack"];
	
	[dict setValue:[self.Conversation dictionary] forKey:@"Conversation"];
	

	NSMutableArray * mVersions = [[NSMutableArray alloc] init];
	for (QXEntryVersion * p in Versions) {
		[mVersions addObject:[p dictionary]];
	}
	[dict setValue:mVersions forKey:@"Versions"];
	

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in ToUsers) {
		[mToUsers addObject:[p dictionary]];
	}
	[dict setValue:mToUsers forKey:@"ToUsers"];
	

	NSMutableArray * mMentionedUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in MentionedUsers) {
		[mMentionedUsers addObject:[p dictionary]];
	}
	[dict setValue:mMentionedUsers forKey:@"MentionedUsers"];
	

	NSMutableArray * mLikedByUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in LikedByUsers) {
		[mLikedByUsers addObject:[p dictionary]];
	}
	[dict setValue:mLikedByUsers forKey:@"LikedByUsers"];
	

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	for (QXAttachment * p in Attachments) {
		[mAttachments addObject:[p dictionary]];
	}
	[dict setValue:mAttachments forKey:@"Attachments"];
	

	NSMutableArray * mCommentsAttachments = [[NSMutableArray alloc] init];
	for (QXAttachment * p in CommentsAttachments) {
		[mCommentsAttachments addObject:[p dictionary]];
	}
	[dict setValue:mCommentsAttachments forKey:@"CommentsAttachments"];
	
	[dict setValue:[self.FirstPicture dictionary] forKey:@"FirstPicture"];
	

	NSMutableArray * mExternalComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in ExternalComments) {
		[mExternalComments addObject:[p dictionary]];
	}
	[dict setValue:mExternalComments forKey:@"ExternalComments"];
	

	NSMutableArray * mCurrentVersionComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in CurrentVersionComments) {
		[mCurrentVersionComments addObject:[p dictionary]];
	}
	[dict setValue:mCurrentVersionComments forKey:@"CurrentVersionComments"];
	

	NSMutableArray * mOtherVersionsComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in OtherVersionsComments) {
		[mOtherVersionsComments addObject:[p dictionary]];
	}
	[dict setValue:mOtherVersionsComments forKey:@"OtherVersionsComments"];
	
	[dict setValue:[self.NewComment dictionary] forKey:@"NewComment"];
	
	[dict setValue:[self.NewEntry dictionary] forKey:@"NewEntry"];
	
	[dict setValue:[self.GroupSlector dictionary] forKey:@"GroupSlector"];
	
	[dict setValue:self.QortexSupportNotifyOptions forKey:@"QortexSupportNotifyOptions"];
	[dict setValue:[NSNumber numberWithBool:self.IsQortexSupport] forKey:@"IsQortexSupport"];
	[dict setValue:[self.QortexSupport dictionary] forKey:@"QortexSupport"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsQortexSupportKnowledgeBase] forKey:@"IsQortexSupportKnowledgeBase"];
	[dict setValue:self.LinkTitle forKey:@"LinkTitle"];
	[dict setValue:[NSNumber numberWithBool:self.IsRequest] forKey:@"IsRequest"];
	[dict setValue:[self.ShareRequest dictionary] forKey:@"ShareRequest"];
	
	[dict setValue:[NSNumber numberWithBool:self.VisibleForSuperUserInSuperOrg] forKey:@"VisibleForSuperUserInSuperOrg"];
	[dict setValue:[NSNumber numberWithBool:self.VisibleForSuperOrg] forKey:@"VisibleForSuperOrg"];
	[dict setValue:self.CurrentLocaleName forKey:@"CurrentLocaleName"];
	[dict setValue:self.LocaleTitleMap forKey:@"LocaleTitleMap"];
	[dict setValue:self.LocaleContentMap forKey:@"LocaleContentMap"];

	NSMutableArray * mDerivedToDoEntries = [[NSMutableArray alloc] init];
	for (QXRelatedEntry * p in DerivedToDoEntries) {
		[mDerivedToDoEntries addObject:[p dictionary]];
	}
	[dict setValue:mDerivedToDoEntries forKey:@"DerivedToDoEntries"];
	

	NSMutableArray * mRelatedToDoEntries = [[NSMutableArray alloc] init];
	for (QXRelatedEntry * p in RelatedToDoEntries) {
		[mRelatedToDoEntries addObject:[p dictionary]];
	}
	[dict setValue:mRelatedToDoEntries forKey:@"RelatedToDoEntries"];
	
	[dict setValue:[self.BasedOnPost dictionary] forKey:@"BasedOnPost"];
	

	NSMutableArray * mRelatedEntries = [[NSMutableArray alloc] init];
	for (QXRelatedEntry * p in RelatedEntries) {
		[mRelatedEntries addObject:[p dictionary]];
	}
	[dict setValue:mRelatedEntries forKey:@"RelatedEntries"];
	

	NSMutableArray * mLinkedEntries = [[NSMutableArray alloc] init];
	for (QXLinkedEntry * p in LinkedEntries) {
		[mLinkedEntries addObject:[p dictionary]];
	}
	[dict setValue:mLinkedEntries forKey:@"LinkedEntries"];
	

	return dict;
}

@end

// --- MyChats ---
@implementation QXMyChats

@synthesize ChatEntries;
@synthesize HasMore;
@synthesize LatestCreateTime;
@synthesize WhatChats;
@synthesize PrefixURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mChatEntries = [[NSMutableArray alloc] init];
	NSArray * lChatEntries = [dict valueForKey:@"ChatEntries"];
	if ([lChatEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lChatEntries) {
			[mChatEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setChatEntries:mChatEntries];
	}
	[self setHasMore:[[dict valueForKey:@"HasMore"] boolValue]];
	[self setLatestCreateTime:[dict valueForKey:@"LatestCreateTime"]];
	[self setWhatChats:[[dict valueForKey:@"WhatChats"] boolValue]];
	[self setPrefixURL:[dict valueForKey:@"PrefixURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mChatEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in ChatEntries) {
		[mChatEntries addObject:[p dictionary]];
	}
	[dict setValue:mChatEntries forKey:@"ChatEntries"];
	
	[dict setValue:[NSNumber numberWithBool:self.HasMore] forKey:@"HasMore"];
	[dict setValue:self.LatestCreateTime forKey:@"LatestCreateTime"];
	[dict setValue:[NSNumber numberWithBool:self.WhatChats] forKey:@"WhatChats"];
	[dict setValue:self.PrefixURL forKey:@"PrefixURL"];

	return dict;
}

@end

// --- WatchItem ---
@implementation QXWatchItem

@synthesize AttachCnt;
@synthesize CommentCnt;
@synthesize LikeCnt;
@synthesize AttachCntStr;
@synthesize CommentCntStr;
@synthesize LikeCntStr;
@synthesize WatchTime;
@synthesize IsSmartReminding;
@synthesize IsNoReminding;
@synthesize WatchEntry;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAttachCnt:[dict valueForKey:@"AttachCnt"]];
	[self setCommentCnt:[dict valueForKey:@"CommentCnt"]];
	[self setLikeCnt:[dict valueForKey:@"LikeCnt"]];
	[self setAttachCntStr:[dict valueForKey:@"AttachCntStr"]];
	[self setCommentCntStr:[dict valueForKey:@"CommentCntStr"]];
	[self setLikeCntStr:[dict valueForKey:@"LikeCntStr"]];
	[self setWatchTime:[QXQortexapi dateFromString:[dict valueForKey:@"WatchTime"]]];
	[self setIsSmartReminding:[[dict valueForKey:@"IsSmartReminding"] boolValue]];
	[self setIsNoReminding:[[dict valueForKey:@"IsNoReminding"] boolValue]];

	id dictWatchEntry = [dict valueForKey:@"WatchEntry"];
	if ([dictWatchEntry isKindOfClass:[NSDictionary class]]){
		[self setWatchEntry:[[QXEntry alloc] initWithDictionary:dictWatchEntry]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.AttachCnt forKey:@"AttachCnt"];
	[dict setValue:self.CommentCnt forKey:@"CommentCnt"];
	[dict setValue:self.LikeCnt forKey:@"LikeCnt"];
	[dict setValue:self.AttachCntStr forKey:@"AttachCntStr"];
	[dict setValue:self.CommentCntStr forKey:@"CommentCntStr"];
	[dict setValue:self.LikeCntStr forKey:@"LikeCntStr"];
	[dict setValue:[QXQortexapi stringFromDate:self.WatchTime] forKey:@"WatchTime"];
	[dict setValue:[NSNumber numberWithBool:self.IsSmartReminding] forKey:@"IsSmartReminding"];
	[dict setValue:[NSNumber numberWithBool:self.IsNoReminding] forKey:@"IsNoReminding"];
	[dict setValue:[self.WatchEntry dictionary] forKey:@"WatchEntry"];
	

	return dict;
}

@end

// --- DraftList ---
@implementation QXDraftList

@synthesize DraftItems;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mDraftItems = [[NSMutableArray alloc] init];
	NSArray * lDraftItems = [dict valueForKey:@"DraftItems"];
	if ([lDraftItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lDraftItems) {
			[mDraftItems addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setDraftItems:mDraftItems];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mDraftItems = [[NSMutableArray alloc] init];
	for (QXEntry * p in DraftItems) {
		[mDraftItems addObject:[p dictionary]];
	}
	[dict setValue:mDraftItems forKey:@"DraftItems"];
	

	return dict;
}

@end

// --- WatchList ---
@implementation QXWatchList

@synthesize Items;
@synthesize WhatWatchList;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mItems = [[NSMutableArray alloc] init];
	NSArray * lItems = [dict valueForKey:@"Items"];
	if ([lItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lItems) {
			[mItems addObject: [[QXWatchItem alloc] initWithDictionary:d]];
		}
		[self setItems:mItems];
	}
	[self setWhatWatchList:[[dict valueForKey:@"WhatWatchList"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mItems = [[NSMutableArray alloc] init];
	for (QXWatchItem * p in Items) {
		[mItems addObject:[p dictionary]];
	}
	[dict setValue:mItems forKey:@"Items"];
	
	[dict setValue:[NSNumber numberWithBool:self.WhatWatchList] forKey:@"WhatWatchList"];

	return dict;
}

@end


// === Interfaces ===



// --- QXGetNewOrganizationParams ---
@implementation QXAuthMemberServiceGetNewOrganizationParams : NSObject

@synthesize MemberId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setMemberId:[dict valueForKey:@"MemberId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.MemberId forKey:@"MemberId"];

	return dict;
}

@end

// --- QXGetNewOrganizationResults ---
@implementation QXAuthMemberServiceGetNewOrganizationResults : NSObject

@synthesize Org;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrg = [dict valueForKey:@"Org"];
	if ([dictOrg isKindOfClass:[NSDictionary class]]){
		[self setOrg:[[QXOrganization alloc] initWithDictionary:dictOrg]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Org dictionary] forKey:@"Org"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyOrganizationsParams ---
@implementation QXAuthMemberServiceGetMyOrganizationsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMyOrganizationsResults ---
@implementation QXAuthMemberServiceGetMyOrganizationsResults : NSObject

@synthesize Orgs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	NSArray * lOrgs = [dict valueForKey:@"Orgs"];
	if ([lOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgs) {
			[mOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setOrgs:mOrgs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in Orgs) {
		[mOrgs addObject:[p dictionary]];
	}
	[dict setValue:mOrgs forKey:@"Orgs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateOrganizationParams ---
@implementation QXAuthMemberServiceCreateOrganizationParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXOrganizationInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateOrganizationResults ---
@implementation QXAuthMemberServiceCreateOrganizationResults : NSObject

@synthesize ApiOrg;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictApiOrg = [dict valueForKey:@"ApiOrg"];
	if ([dictApiOrg isKindOfClass:[NSDictionary class]]){
		[self setApiOrg:[[QXOrganization alloc] initWithDictionary:dictApiOrg]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ApiOrg dictionary] forKey:@"ApiOrg"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXJoinOrganizationParams ---
@implementation QXAuthMemberServiceJoinOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXJoinOrganizationResults ---
@implementation QXAuthMemberServiceJoinOrganizationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXLeaveOrganizationParams ---
@implementation QXAuthMemberServiceLeaveOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXLeaveOrganizationResults ---
@implementation QXAuthMemberServiceLeaveOrganizationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSwitchOrganizationParams ---
@implementation QXAuthMemberServiceSwitchOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXSwitchOrganizationResults ---
@implementation QXAuthMemberServiceSwitchOrganizationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAbandonInfoParams ---
@implementation QXAuthMemberServiceGetAbandonInfoParams : NSObject

@synthesize AbandonOrgId;
@synthesize MemberId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAbandonOrgId:[dict valueForKey:@"AbandonOrgId"]];
	[self setMemberId:[dict valueForKey:@"MemberId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.AbandonOrgId forKey:@"AbandonOrgId"];
	[dict setValue:self.MemberId forKey:@"MemberId"];

	return dict;
}

@end

// --- QXGetAbandonInfoResults ---
@implementation QXAuthMemberServiceGetAbandonInfoResults : NSObject

@synthesize Info;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInfo = [dict valueForKey:@"Info"];
	if ([dictInfo isKindOfClass:[NSDictionary class]]){
		[self setInfo:[[QXAbandonInfo alloc] initWithDictionary:dictInfo]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Info dictionary] forKey:@"Info"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetShareRequestParams ---
@implementation QXAuthMemberServiceGetShareRequestParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXGetShareRequestResults ---
@implementation QXAuthMemberServiceGetShareRequestResults : NSObject

@synthesize ShareRequest;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictShareRequest = [dict valueForKey:@"ShareRequest"];
	if ([dictShareRequest isKindOfClass:[NSDictionary class]]){
		[self setShareRequest:[[QXShareRequest alloc] initWithDictionary:dictShareRequest]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ShareRequest dictionary] forKey:@"ShareRequest"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRejectShareRequestByInviteeParams ---
@implementation QXAuthMemberServiceRejectShareRequestByInviteeParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXRejectShareRequestByInviteeResults ---
@implementation QXAuthMemberServiceRejectShareRequestByInviteeResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAcceptShareRequestByInviteeParams ---
@implementation QXAuthMemberServiceAcceptShareRequestByInviteeParams : NSObject

@synthesize Token;
@synthesize ToOrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setToOrgId:[dict valueForKey:@"ToOrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.ToOrgId forKey:@"ToOrgId"];

	return dict;
}

@end

// --- QXAcceptShareRequestByInviteeResults ---
@implementation QXAuthMemberServiceAcceptShareRequestByInviteeResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end


// --- QXGetTotalStatsParams ---
@implementation QXAuthAdminServiceGetTotalStatsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetTotalStatsResults ---
@implementation QXAuthAdminServiceGetTotalStatsResults : NSObject

@synthesize TotalStat;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTotalStat = [dict valueForKey:@"TotalStat"];
	if ([dictTotalStat isKindOfClass:[NSDictionary class]]){
		[self setTotalStat:[[QXTotalStats alloc] initWithDictionary:dictTotalStat]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.TotalStat dictionary] forKey:@"TotalStat"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetWeeklyTotalStatsParams ---
@implementation QXAuthAdminServiceGetWeeklyTotalStatsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetWeeklyTotalStatsResults ---
@implementation QXAuthAdminServiceGetWeeklyTotalStatsResults : NSObject

@synthesize TotalStat;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTotalStat = [dict valueForKey:@"TotalStat"];
	if ([dictTotalStat isKindOfClass:[NSDictionary class]]){
		[self setTotalStat:[[QXTotalStats alloc] initWithDictionary:dictTotalStat]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.TotalStat dictionary] forKey:@"TotalStat"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgStatsParams ---
@implementation QXAuthAdminServiceGetOrgStatsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOrgStatsResults ---
@implementation QXAuthAdminServiceGetOrgStatsResults : NSObject

@synthesize OrgStats;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgStats = [[NSMutableArray alloc] init];
	NSArray * lOrgStats = [dict valueForKey:@"OrgStats"];
	if ([lOrgStats isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgStats) {
			[mOrgStats addObject: [[QXOrgStats alloc] initWithDictionary:d]];
		}
		[self setOrgStats:mOrgStats];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgStats = [[NSMutableArray alloc] init];
	for (QXOrgStats * p in OrgStats) {
		[mOrgStats addObject:[p dictionary]];
	}
	[dict setValue:mOrgStats forKey:@"OrgStats"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAccessRequestsParams ---
@implementation QXAuthAdminServiceGetAccessRequestsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetAccessRequestsResults ---
@implementation QXAuthAdminServiceGetAccessRequestsResults : NSObject

@synthesize AccessReqs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mAccessReqs = [[NSMutableArray alloc] init];
	NSArray * lAccessReqs = [dict valueForKey:@"AccessReqs"];
	if ([lAccessReqs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAccessReqs) {
			[mAccessReqs addObject: [[QXAccessReq alloc] initWithDictionary:d]];
		}
		[self setAccessReqs:mAccessReqs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mAccessReqs = [[NSMutableArray alloc] init];
	for (QXAccessReq * p in AccessReqs) {
		[mAccessReqs addObject:[p dictionary]];
	}
	[dict setValue:mAccessReqs forKey:@"AccessReqs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXApproveAccessParams ---
@implementation QXAuthAdminServiceApproveAccessParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXApproveAccessResults ---
@implementation QXAuthAdminServiceApproveAccessResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXResendApprovedMailParams ---
@implementation QXAuthAdminServiceResendApprovedMailParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXResendApprovedMailResults ---
@implementation QXAuthAdminServiceResendApprovedMailResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAllMembersParams ---
@implementation QXAuthAdminServiceGetAllMembersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetAllMembersResults ---
@implementation QXAuthAdminServiceGetAllMembersResults : NSObject

@synthesize Members;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mMembers = [[NSMutableArray alloc] init];
	NSArray * lMembers = [dict valueForKey:@"Members"];
	if ([lMembers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMembers) {
			[mMembers addObject: [[QXMember alloc] initWithDictionary:d]];
		}
		[self setMembers:mMembers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mMembers = [[NSMutableArray alloc] init];
	for (QXMember * p in Members) {
		[mMembers addObject:[p dictionary]];
	}
	[dict setValue:mMembers forKey:@"Members"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXIgnoreAccessParams ---
@implementation QXAuthAdminServiceIgnoreAccessParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXIgnoreAccessResults ---
@implementation QXAuthAdminServiceIgnoreAccessResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAutoApproveAccessParams ---
@implementation QXAuthAdminServiceGetAutoApproveAccessParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetAutoApproveAccessResults ---
@implementation QXAuthAdminServiceGetAutoApproveAccessResults : NSObject

@synthesize Enabled;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEnabled:[[dict valueForKey:@"Enabled"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Enabled] forKey:@"Enabled"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSetAutoApproveAccessParams ---
@implementation QXAuthAdminServiceSetAutoApproveAccessParams : NSObject

@synthesize Enable;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEnable:[[dict valueForKey:@"Enable"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Enable] forKey:@"Enable"];

	return dict;
}

@end

// --- QXSetAutoApproveAccessResults ---
@implementation QXAuthAdminServiceSetAutoApproveAccessResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMarketableUsersParams ---
@implementation QXAuthAdminServiceGetMarketableUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMarketableUsersResults ---
@implementation QXAuthAdminServiceGetMarketableUsersResults : NSObject

@synthesize MemberInfos;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mMemberInfos = [[NSMutableArray alloc] init];
	NSArray * lMemberInfos = [dict valueForKey:@"MemberInfos"];
	if ([lMemberInfos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMemberInfos) {
			[mMemberInfos addObject: [[QXMarketableMemberInfo alloc] initWithDictionary:d]];
		}
		[self setMemberInfos:mMemberInfos];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mMemberInfos = [[NSMutableArray alloc] init];
	for (QXMarketableMemberInfo * p in MemberInfos) {
		[mMemberInfos addObject:[p dictionary]];
	}
	[dict setValue:mMemberInfos forKey:@"MemberInfos"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetTotalOnlineUsersParams ---
@implementation QXAuthAdminServiceGetTotalOnlineUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetTotalOnlineUsersResults ---
@implementation QXAuthAdminServiceGetTotalOnlineUsersResults : NSObject

@synthesize EmbedUsers;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEmbedUsers = [[NSMutableArray alloc] init];
	NSArray * lEmbedUsers = [dict valueForKey:@"EmbedUsers"];
	if ([lEmbedUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEmbedUsers) {
			[mEmbedUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setEmbedUsers:mEmbedUsers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEmbedUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in EmbedUsers) {
		[mEmbedUsers addObject:[p dictionary]];
	}
	[dict setValue:mEmbedUsers forKey:@"EmbedUsers"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end


// --- QXGetNewEntryParams ---
@implementation QXAuthUserServiceGetNewEntryParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetNewEntryResults ---
@implementation QXAuthUserServiceGetNewEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetNewChatEntryParams ---
@implementation QXAuthUserServiceGetNewChatEntryParams : NSObject

@synthesize ChatId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setChatId:[dict valueForKey:@"ChatId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ChatId forKey:@"ChatId"];

	return dict;
}

@end

// --- QXGetNewChatEntryResults ---
@implementation QXAuthUserServiceGetNewChatEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetQortexSupportEntriesParams ---
@implementation QXAuthUserServiceGetQortexSupportEntriesParams : NSObject

@synthesize Before;
@synthesize Limit;
@synthesize WithComments;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];
	[self setWithComments:[[dict valueForKey:@"WithComments"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];
	[dict setValue:[NSNumber numberWithBool:self.WithComments] forKey:@"WithComments"];

	return dict;
}

@end

// --- QXGetQortexSupportEntriesResults ---
@implementation QXAuthUserServiceGetQortexSupportEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateEntryParams ---
@implementation QXAuthUserServiceCreateEntryParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateEntryResults ---
@implementation QXAuthUserServiceCreateEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateTaskParams ---
@implementation QXAuthUserServiceCreateTaskParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateTaskResults ---
@implementation QXAuthUserServiceCreateTaskResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCloseTaskParams ---
@implementation QXAuthUserServiceCloseTaskParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize TaskId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setTaskId:[dict valueForKey:@"TaskId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.TaskId forKey:@"TaskId"];

	return dict;
}

@end

// --- QXCloseTaskResults ---
@implementation QXAuthUserServiceCloseTaskResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXTask alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateCommentParams ---
@implementation QXAuthUserServiceCreateCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateCommentResults ---
@implementation QXAuthUserServiceCreateCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetCommentParams ---
@implementation QXAuthUserServiceGetCommentParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetCommentResults ---
@implementation QXAuthUserServiceGetCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateCommentParams ---
@implementation QXAuthUserServiceUpdateCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateCommentResults ---
@implementation QXAuthUserServiceUpdateCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateEntryParams ---
@implementation QXAuthUserServiceUpdateEntryParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateEntryResults ---
@implementation QXAuthUserServiceUpdateEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetLatestUpdatedEntryIdByTitleParams ---
@implementation QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams : NSObject

@synthesize Title;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetLatestUpdatedEntryIdByTitleResults ---
@implementation QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults : NSObject

@synthesize EntryId;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetEntryParams ---
@implementation QXAuthUserServiceGetEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize UpdateAtUnixNanoForVersion;
@synthesize HightlightKeywords;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUpdateAtUnixNanoForVersion:[dict valueForKey:@"UpdateAtUnixNanoForVersion"]];
	[self setHightlightKeywords:[dict valueForKey:@"HightlightKeywords"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UpdateAtUnixNanoForVersion forKey:@"UpdateAtUnixNanoForVersion"];
	[dict setValue:self.HightlightKeywords forKey:@"HightlightKeywords"];

	return dict;
}

@end

// --- QXGetEntryResults ---
@implementation QXAuthUserServiceGetEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteEntryParams ---
@implementation QXAuthUserServiceDeleteEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize DType;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setDType:[dict valueForKey:@"DType"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.DType forKey:@"DType"];

	return dict;
}

@end

// --- QXDeleteEntryResults ---
@implementation QXAuthUserServiceDeleteEntryResults : NSObject

@synthesize DelType;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDelType:[dict valueForKey:@"DelType"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.DelType forKey:@"DelType"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXMuteEntryParams ---
@implementation QXAuthUserServiceMuteEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXMuteEntryResults ---
@implementation QXAuthUserServiceMuteEntryResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUndoMuteEntryParams ---
@implementation QXAuthUserServiceUndoMuteEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXUndoMuteEntryResults ---
@implementation QXAuthUserServiceUndoMuteEntryResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMachineTranslatableLangaugesParams ---
@implementation QXAuthUserServiceGetMachineTranslatableLangaugesParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMachineTranslatableLangaugesResults ---
@implementation QXAuthUserServiceGetMachineTranslatableLangaugesResults : NSObject

@synthesize Options;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOptions = [dict valueForKey:@"Options"];
	if ([dictOptions isKindOfClass:[NSDictionary class]]){
		[self setOptions:[[QXLanguageSelector alloc] initWithDictionary:dictOptions]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Options dictionary] forKey:@"Options"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXMachineTranslateParams ---
@implementation QXAuthUserServiceMachineTranslateParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize Targetlang;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setTargetlang:[dict valueForKey:@"Targetlang"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Targetlang forKey:@"Targetlang"];

	return dict;
}

@end

// --- QXMachineTranslateResults ---
@implementation QXAuthUserServiceMachineTranslateResults : NSObject

@synthesize TranslatedThread;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTranslatedThread = [dict valueForKey:@"TranslatedThread"];
	if ([dictTranslatedThread isKindOfClass:[NSDictionary class]]){
		[self setTranslatedThread:[[QXTranslatedThread alloc] initWithDictionary:dictTranslatedThread]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.TranslatedThread dictionary] forKey:@"TranslatedThread"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXOriginalThreadParams ---
@implementation QXAuthUserServiceOriginalThreadParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXOriginalThreadResults ---
@implementation QXAuthUserServiceOriginalThreadResults : NSObject

@synthesize TranslatedThread;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTranslatedThread = [dict valueForKey:@"TranslatedThread"];
	if ([dictTranslatedThread isKindOfClass:[NSDictionary class]]){
		[self setTranslatedThread:[[QXTranslatedThread alloc] initWithDictionary:dictTranslatedThread]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.TranslatedThread dictionary] forKey:@"TranslatedThread"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetEntryAttachmentsParams ---
@implementation QXAuthUserServiceGetEntryAttachmentsParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetEntryAttachmentsResults ---
@implementation QXAuthUserServiceGetEntryAttachmentsResults : NSObject

@synthesize Attachments;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	NSArray * lAttachments = [dict valueForKey:@"Attachments"];
	if ([lAttachments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAttachments) {
			[mAttachments addObject: [[QXAttachment alloc] initWithDictionary:d]];
		}
		[self setAttachments:mAttachments];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	for (QXAttachment * p in Attachments) {
		[mAttachments addObject:[p dictionary]];
	}
	[dict setValue:mAttachments forKey:@"Attachments"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetDocViewSessionParams ---
@implementation QXAuthUserServiceGetDocViewSessionParams : NSObject

@synthesize Doi;
@synthesize GroupId;
@synthesize AttachmentId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAttachmentId:[dict valueForKey:@"AttachmentId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AttachmentId forKey:@"AttachmentId"];

	return dict;
}

@end

// --- QXGetDocViewSessionResults ---
@implementation QXAuthUserServiceGetDocViewSessionResults : NSObject

@synthesize SessionId;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSessionId:[dict valueForKey:@"SessionId"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.SessionId forKey:@"SessionId"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteEntryAttachmentParams ---
@implementation QXAuthUserServiceDeleteEntryAttachmentParams : NSObject

@synthesize Doi;
@synthesize GroupId;
@synthesize AttachmentId;
@synthesize OwnerId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAttachmentId:[dict valueForKey:@"AttachmentId"]];
	[self setOwnerId:[dict valueForKey:@"OwnerId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AttachmentId forKey:@"AttachmentId"];
	[dict setValue:self.OwnerId forKey:@"OwnerId"];

	return dict;
}

@end

// --- QXDeleteEntryAttachmentResults ---
@implementation QXAuthUserServiceDeleteEntryAttachmentResults : NSObject

@synthesize Attachments;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	NSArray * lAttachments = [dict valueForKey:@"Attachments"];
	if ([lAttachments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAttachments) {
			[mAttachments addObject: [[QXAttachment alloc] initWithDictionary:d]];
		}
		[self setAttachments:mAttachments];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	for (QXAttachment * p in Attachments) {
		[mAttachments addObject:[p dictionary]];
	}
	[dict setValue:mAttachments forKey:@"Attachments"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOtherVersionsCommentsParams ---
@implementation QXAuthUserServiceGetOtherVersionsCommentsParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize UpdateAtUnixNanoForVersion;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUpdateAtUnixNanoForVersion:[dict valueForKey:@"UpdateAtUnixNanoForVersion"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UpdateAtUnixNanoForVersion forKey:@"UpdateAtUnixNanoForVersion"];

	return dict;
}

@end

// --- QXGetOtherVersionsCommentsResults ---
@implementation QXAuthUserServiceGetOtherVersionsCommentsResults : NSObject

@synthesize Comments;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	NSArray * lComments = [dict valueForKey:@"Comments"];
	if ([lComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lComments) {
			[mComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setComments:mComments];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in Comments) {
		[mComments addObject:[p dictionary]];
	}
	[dict setValue:mComments forKey:@"Comments"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOtherVersionsTaskLogsParams ---
@implementation QXAuthUserServiceGetOtherVersionsTaskLogsParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize UpdateAtUnixNanoForVersion;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUpdateAtUnixNanoForVersion:[dict valueForKey:@"UpdateAtUnixNanoForVersion"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UpdateAtUnixNanoForVersion forKey:@"UpdateAtUnixNanoForVersion"];

	return dict;
}

@end

// --- QXGetOtherVersionsTaskLogsResults ---
@implementation QXAuthUserServiceGetOtherVersionsTaskLogsResults : NSObject

@synthesize TaskLogs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTaskLogs = [[NSMutableArray alloc] init];
	NSArray * lTaskLogs = [dict valueForKey:@"TaskLogs"];
	if ([lTaskLogs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskLogs) {
			[mTaskLogs addObject: [[QXTaskLog alloc] initWithDictionary:d]];
		}
		[self setTaskLogs:mTaskLogs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTaskLogs = [[NSMutableArray alloc] init];
	for (QXTaskLog * p in TaskLogs) {
		[mTaskLogs addObject:[p dictionary]];
	}
	[dict setValue:mTaskLogs forKey:@"TaskLogs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupEntriesParams ---
@implementation QXAuthUserServiceGetGroupEntriesParams : NSObject

@synthesize GroupId;
@synthesize EntryType;
@synthesize Before;
@synthesize Limit;
@synthesize WithComments;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];
	[self setWithComments:[[dict valueForKey:@"WithComments"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];
	[dict setValue:[NSNumber numberWithBool:self.WithComments] forKey:@"WithComments"];

	return dict;
}

@end

// --- QXGetGroupEntriesResults ---
@implementation QXAuthUserServiceGetGroupEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyFeedEntriesParams ---
@implementation QXAuthUserServiceGetMyFeedEntriesParams : NSObject

@synthesize EntryType;
@synthesize Before;
@synthesize Limit;
@synthesize WithComments;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];
	[self setWithComments:[[dict valueForKey:@"WithComments"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];
	[dict setValue:[NSNumber numberWithBool:self.WithComments] forKey:@"WithComments"];

	return dict;
}

@end

// --- QXGetMyFeedEntriesResults ---
@implementation QXAuthUserServiceGetMyFeedEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupAsideParams ---
@implementation QXAuthUserServiceGetGroupAsideParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetGroupAsideResults ---
@implementation QXAuthUserServiceGetGroupAsideResults : NSObject

@synthesize Ga;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGa = [dict valueForKey:@"Ga"];
	if ([dictGa isKindOfClass:[NSDictionary class]]){
		[self setGa:[[QXGroupAside alloc] initWithDictionary:dictGa]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Ga dictionary] forKey:@"Ga"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetNewFeedEntriesParams ---
@implementation QXAuthUserServiceGetNewFeedEntriesParams : NSObject

@synthesize EntryType;
@synthesize FromTimeUnixNano;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setFromTimeUnixNano:[dict valueForKey:@"FromTimeUnixNano"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.FromTimeUnixNano forKey:@"FromTimeUnixNano"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetNewFeedEntriesResults ---
@implementation QXAuthUserServiceGetNewFeedEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetUserEntriesParams ---
@implementation QXAuthUserServiceGetUserEntriesParams : NSObject

@synthesize UserId;
@synthesize EntryType;
@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetUserEntriesResults ---
@implementation QXAuthUserServiceGetUserEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyNotificationItemsParams ---
@implementation QXAuthUserServiceGetMyNotificationItemsParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetMyNotificationItemsResults ---
@implementation QXAuthUserServiceGetMyNotificationItemsResults : NSObject

@synthesize NotificationItems;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	NSArray * lNotificationItems = [dict valueForKey:@"NotificationItems"];
	if ([lNotificationItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNotificationItems) {
			[mNotificationItems addObject: [[QXNotificationItem alloc] initWithDictionary:d]];
		}
		[self setNotificationItems:mNotificationItems];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	for (QXNotificationItem * p in NotificationItems) {
		[mNotificationItems addObject:[p dictionary]];
	}
	[dict setValue:mNotificationItems forKey:@"NotificationItems"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXMarkAllAsReadParams ---
@implementation QXAuthUserServiceMarkAllAsReadParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXMarkAllAsReadResults ---
@implementation QXAuthUserServiceMarkAllAsReadResults : NSObject

@synthesize Mycount;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictMycount = [dict valueForKey:@"Mycount"];
	if ([dictMycount isKindOfClass:[NSDictionary class]]){
		[self setMycount:[[QXMyCount alloc] initWithDictionary:dictMycount]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Mycount dictionary] forKey:@"Mycount"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetWatchListParams ---
@implementation QXAuthUserServiceGetWatchListParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetWatchListResults ---
@implementation QXAuthUserServiceGetWatchListResults : NSObject

@synthesize Watchlist;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictWatchlist = [dict valueForKey:@"Watchlist"];
	if ([dictWatchlist isKindOfClass:[NSDictionary class]]){
		[self setWatchlist:[[QXWatchList alloc] initWithDictionary:dictWatchlist]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Watchlist dictionary] forKey:@"Watchlist"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAddToWatchListParams ---
@implementation QXAuthUserServiceAddToWatchListParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize RemindMode;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setRemindMode:[dict valueForKey:@"RemindMode"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.RemindMode forKey:@"RemindMode"];

	return dict;
}

@end

// --- QXAddToWatchListResults ---
@implementation QXAuthUserServiceAddToWatchListResults : NSObject

@synthesize Added;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAdded:[[dict valueForKey:@"Added"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Added] forKey:@"Added"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStopWatchingParams ---
@implementation QXAuthUserServiceStopWatchingParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXStopWatchingResults ---
@implementation QXAuthUserServiceStopWatchingResults : NSObject

@synthesize Stopped;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStopped:[[dict valueForKey:@"Stopped"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Stopped] forKey:@"Stopped"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXReadWatchingParams ---
@implementation QXAuthUserServiceReadWatchingParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXReadWatchingResults ---
@implementation QXAuthUserServiceReadWatchingResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRemindMeParams ---
@implementation QXAuthUserServiceRemindMeParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXRemindMeResults ---
@implementation QXAuthUserServiceRemindMeResults : NSObject

@synthesize Reminded;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setReminded:[[dict valueForKey:@"Reminded"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Reminded] forKey:@"Reminded"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStartSmartRemindingParams ---
@implementation QXAuthUserServiceStartSmartRemindingParams : NSObject

@synthesize GroupId;
@synthesize WatchItemId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setWatchItemId:[dict valueForKey:@"WatchItemId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.WatchItemId forKey:@"WatchItemId"];

	return dict;
}

@end

// --- QXStartSmartRemindingResults ---
@implementation QXAuthUserServiceStartSmartRemindingResults : NSObject

@synthesize Stopped;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStopped:[[dict valueForKey:@"Stopped"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Stopped] forKey:@"Stopped"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStopRemindingParams ---
@implementation QXAuthUserServiceStopRemindingParams : NSObject

@synthesize GroupId;
@synthesize WatchItemId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setWatchItemId:[dict valueForKey:@"WatchItemId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.WatchItemId forKey:@"WatchItemId"];

	return dict;
}

@end

// --- QXStopRemindingResults ---
@implementation QXAuthUserServiceStopRemindingResults : NSObject

@synthesize Stopped;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStopped:[[dict valueForKey:@"Stopped"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Stopped] forKey:@"Stopped"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateLikeParams ---
@implementation QXAuthUserServiceUpdateLikeParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXLikeInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateLikeResults ---
@implementation QXAuthUserServiceUpdateLikeResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetDraftListParams ---
@implementation QXAuthUserServiceGetDraftListParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetDraftListResults ---
@implementation QXAuthUserServiceGetDraftListResults : NSObject

@synthesize Draftlist;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictDraftlist = [dict valueForKey:@"Draftlist"];
	if ([dictDraftlist isKindOfClass:[NSDictionary class]]){
		[self setDraftlist:[[QXDraftList alloc] initWithDictionary:dictDraftlist]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Draftlist dictionary] forKey:@"Draftlist"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetDraftParams ---
@implementation QXAuthUserServiceGetDraftParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetDraftResults ---
@implementation QXAuthUserServiceGetDraftResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteDraftParams ---
@implementation QXAuthUserServiceDeleteDraftParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXDeleteDraftResults ---
@implementation QXAuthUserServiceDeleteDraftResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXChooseMarkdownEditorParams ---
@implementation QXAuthUserServiceChooseMarkdownEditorParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXChooseMarkdownEditorResults ---
@implementation QXAuthUserServiceChooseMarkdownEditorResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXChooseStyledEditorParams ---
@implementation QXAuthUserServiceChooseStyledEditorParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXChooseStyledEditorResults ---
@implementation QXAuthUserServiceChooseStyledEditorResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetNewGroupParams ---
@implementation QXAuthUserServiceGetNewGroupParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetNewGroupResults ---
@implementation QXAuthUserServiceGetNewGroupResults : NSObject

@synthesize Group;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupParams ---
@implementation QXAuthUserServiceGetGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetGroupResults ---
@implementation QXAuthUserServiceGetGroupResults : NSObject

@synthesize Group;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateGroupParams ---
@implementation QXAuthUserServiceCreateGroupParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXGroupInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateGroupResults ---
@implementation QXAuthUserServiceCreateGroupResults : NSObject

@synthesize Group;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateGroupParams ---
@implementation QXAuthUserServiceUpdateGroupParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXGroupInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateGroupResults ---
@implementation QXAuthUserServiceUpdateGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateGroupLogoParams ---
@implementation QXAuthUserServiceUpdateGroupLogoParams : NSObject

@synthesize GroupId;
@synthesize LogoURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];

	return dict;
}

@end

// --- QXUpdateGroupLogoResults ---
@implementation QXAuthUserServiceUpdateGroupLogoResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteGroupParams ---
@implementation QXAuthUserServiceDeleteGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXDeleteGroupResults ---
@implementation QXAuthUserServiceDeleteGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupBySlugParams ---
@implementation QXAuthUserServiceGetGroupBySlugParams : NSObject

@synthesize Slug;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSlug:[dict valueForKey:@"Slug"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Slug forKey:@"Slug"];

	return dict;
}

@end

// --- QXGetGroupBySlugResults ---
@implementation QXAuthUserServiceGetGroupBySlugResults : NSObject

@synthesize Group;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupsParams ---
@implementation QXAuthUserServiceGetGroupsParams : NSObject

@synthesize Keyword;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];

	return dict;
}

@end

// --- QXGetGroupsResults ---
@implementation QXAuthUserServiceGetGroupsResults : NSObject

@synthesize Groups;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	NSArray * lGroups = [dict valueForKey:@"Groups"];
	if ([lGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroups) {
			[mGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setGroups:mGroups];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in Groups) {
		[mGroups addObject:[p dictionary]];
	}
	[dict setValue:mGroups forKey:@"Groups"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetPublicGroupsParams ---
@implementation QXAuthUserServiceGetPublicGroupsParams : NSObject

@synthesize Keyword;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];

	return dict;
}

@end

// --- QXGetPublicGroupsResults ---
@implementation QXAuthUserServiceGetPublicGroupsResults : NSObject

@synthesize Groups;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	NSArray * lGroups = [dict valueForKey:@"Groups"];
	if ([lGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroups) {
			[mGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setGroups:mGroups];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in Groups) {
		[mGroups addObject:[p dictionary]];
	}
	[dict setValue:mGroups forKey:@"Groups"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAddUserToGroupParams ---
@implementation QXAuthUserServiceAddUserToGroupParams : NSObject

@synthesize GroupId;
@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXAddUserToGroupResults ---
@implementation QXAuthUserServiceAddUserToGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRemoveUserFromGroupParams ---
@implementation QXAuthUserServiceRemoveUserFromGroupParams : NSObject

@synthesize GroupId;
@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXRemoveUserFromGroupResults ---
@implementation QXAuthUserServiceRemoveUserFromGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetClassifiedGroupsParams ---
@implementation QXAuthUserServiceGetClassifiedGroupsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetClassifiedGroupsResults ---
@implementation QXAuthUserServiceGetClassifiedGroupsResults : NSObject

@synthesize AnouncementGroup;
@synthesize SmGroup;
@synthesize FollowedNormalGroups;
@synthesize FollowedSharedGroups;
@synthesize UnFollowedNormalGroups;
@synthesize UnFollowedSharedGroups;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictAnouncementGroup = [dict valueForKey:@"AnouncementGroup"];
	if ([dictAnouncementGroup isKindOfClass:[NSDictionary class]]){
		[self setAnouncementGroup:[[QXGroup alloc] initWithDictionary:dictAnouncementGroup]];
	}

	id dictSmGroup = [dict valueForKey:@"SmGroup"];
	if ([dictSmGroup isKindOfClass:[NSDictionary class]]){
		[self setSmGroup:[[QXGroup alloc] initWithDictionary:dictSmGroup]];
	}

	NSMutableArray * mFollowedNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowedNormalGroups = [dict valueForKey:@"FollowedNormalGroups"];
	if ([lFollowedNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowedNormalGroups) {
			[mFollowedNormalGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowedNormalGroups:mFollowedNormalGroups];
	}

	NSMutableArray * mFollowedSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowedSharedGroups = [dict valueForKey:@"FollowedSharedGroups"];
	if ([lFollowedSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowedSharedGroups) {
			[mFollowedSharedGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowedSharedGroups:mFollowedSharedGroups];
	}

	NSMutableArray * mUnFollowedNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowedNormalGroups = [dict valueForKey:@"UnFollowedNormalGroups"];
	if ([lUnFollowedNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowedNormalGroups) {
			[mUnFollowedNormalGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setUnFollowedNormalGroups:mUnFollowedNormalGroups];
	}

	NSMutableArray * mUnFollowedSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowedSharedGroups = [dict valueForKey:@"UnFollowedSharedGroups"];
	if ([lUnFollowedSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowedSharedGroups) {
			[mUnFollowedSharedGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setUnFollowedSharedGroups:mUnFollowedSharedGroups];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.AnouncementGroup dictionary] forKey:@"AnouncementGroup"];
	
	[dict setValue:[self.SmGroup dictionary] forKey:@"SmGroup"];
	

	NSMutableArray * mFollowedNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowedNormalGroups) {
		[mFollowedNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowedNormalGroups forKey:@"FollowedNormalGroups"];
	

	NSMutableArray * mFollowedSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowedSharedGroups) {
		[mFollowedSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowedSharedGroups forKey:@"FollowedSharedGroups"];
	

	NSMutableArray * mUnFollowedNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in UnFollowedNormalGroups) {
		[mUnFollowedNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowedNormalGroups forKey:@"UnFollowedNormalGroups"];
	

	NSMutableArray * mUnFollowedSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in UnFollowedSharedGroups) {
		[mUnFollowedSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowedSharedGroups forKey:@"UnFollowedSharedGroups"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXBulkUpdateTasksInGroupParams ---
@implementation QXAuthUserServiceBulkUpdateTasksInGroupParams : NSObject

@synthesize GroupId;
@synthesize TaskPwMap;
@synthesize TaskInputs;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	NSMutableArray * mTaskPwMap = [[NSMutableArray alloc] init];
	NSArray * lTaskPwMap = [dict valueForKey:@"TaskPwMap"];
	if ([lTaskPwMap isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskPwMap) {
			[mTaskPwMap addObject: [[QXTaskPwMap alloc] initWithDictionary:d]];
		}
		[self setTaskPwMap:mTaskPwMap];
	}

	NSMutableArray * mTaskInputs = [[NSMutableArray alloc] init];
	NSArray * lTaskInputs = [dict valueForKey:@"TaskInputs"];
	if ([lTaskInputs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskInputs) {
			[mTaskInputs addObject: [[QXTaskInput alloc] initWithDictionary:d]];
		}
		[self setTaskInputs:mTaskInputs];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	NSMutableArray * mTaskPwMap = [[NSMutableArray alloc] init];
	for (QXTaskPwMap * p in TaskPwMap) {
		[mTaskPwMap addObject:[p dictionary]];
	}
	[dict setValue:mTaskPwMap forKey:@"TaskPwMap"];
	

	NSMutableArray * mTaskInputs = [[NSMutableArray alloc] init];
	for (QXTaskInput * p in TaskInputs) {
		[mTaskInputs addObject:[p dictionary]];
	}
	[dict setValue:mTaskInputs forKey:@"TaskInputs"];
	

	return dict;
}

@end

// --- QXBulkUpdateTasksInGroupResults ---
@implementation QXAuthUserServiceBulkUpdateTasksInGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAuthUserParams ---
@implementation QXAuthUserServiceGetAuthUserParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetAuthUserResults ---
@implementation QXAuthUserServiceGetAuthUserResults : NSObject

@synthesize User;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictUser = [dict valueForKey:@"User"];
	if ([dictUser isKindOfClass:[NSDictionary class]]){
		[self setUser:[[QXUser alloc] initWithDictionary:dictUser]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.User dictionary] forKey:@"User"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgUsersParams ---
@implementation QXAuthUserServiceGetOrgUsersParams : NSObject

@synthesize Keyword;
@synthesize StartFullName;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];
	[self setStartFullName:[dict valueForKey:@"StartFullName"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];
	[dict setValue:self.StartFullName forKey:@"StartFullName"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetOrgUsersResults ---
@implementation QXAuthUserServiceGetOrgUsersResults : NSObject

@synthesize Users;
@synthesize NextFullName;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[QXUser alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setNextFullName:[dict valueForKey:@"NextFullName"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (QXUser * p in Users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.NextFullName forKey:@"NextFullName"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupUsersParams ---
@implementation QXAuthUserServiceGetGroupUsersParams : NSObject

@synthesize GroupId;
@synthesize Keyword;
@synthesize OnlyFollowers;
@synthesize StartFullName;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setKeyword:[dict valueForKey:@"Keyword"]];
	[self setOnlyFollowers:[[dict valueForKey:@"OnlyFollowers"] boolValue]];
	[self setStartFullName:[dict valueForKey:@"StartFullName"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Keyword forKey:@"Keyword"];
	[dict setValue:[NSNumber numberWithBool:self.OnlyFollowers] forKey:@"OnlyFollowers"];
	[dict setValue:self.StartFullName forKey:@"StartFullName"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetGroupUsersResults ---
@implementation QXAuthUserServiceGetGroupUsersResults : NSObject

@synthesize Users;
@synthesize NextFullName;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[QXUser alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setNextFullName:[dict valueForKey:@"NextFullName"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (QXUser * p in Users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.NextFullName forKey:@"NextFullName"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetUserParams ---
@implementation QXAuthUserServiceGetUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXGetUserResults ---
@implementation QXAuthUserServiceGetUserResults : NSObject

@synthesize User;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictUser = [dict valueForKey:@"User"];
	if ([dictUser isKindOfClass:[NSDictionary class]]){
		[self setUser:[[QXUser alloc] initWithDictionary:dictUser]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.User dictionary] forKey:@"User"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXEnableUserParams ---
@implementation QXAuthUserServiceEnableUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXEnableUserResults ---
@implementation QXAuthUserServiceEnableUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDisableUserParams ---
@implementation QXAuthUserServiceDisableUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXDisableUserResults ---
@implementation QXAuthUserServiceDisableUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteUserParams ---
@implementation QXAuthUserServiceDeleteUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXDeleteUserResults ---
@implementation QXAuthUserServiceDeleteUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXPromoteToSuperUserParams ---
@implementation QXAuthUserServicePromoteToSuperUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXPromoteToSuperUserResults ---
@implementation QXAuthUserServicePromoteToSuperUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDemoteFromSuperUserParams ---
@implementation QXAuthUserServiceDemoteFromSuperUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXDemoteFromSuperUserResults ---
@implementation QXAuthUserServiceDemoteFromSuperUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXFollowUserParams ---
@implementation QXAuthUserServiceFollowUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXFollowUserResults ---
@implementation QXAuthUserServiceFollowUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUnfollowUserParams ---
@implementation QXAuthUserServiceUnfollowUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXUnfollowUserResults ---
@implementation QXAuthUserServiceUnfollowUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyFollowingUsersParams ---
@implementation QXAuthUserServiceGetMyFollowingUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMyFollowingUsersResults ---
@implementation QXAuthUserServiceGetMyFollowingUsersResults : NSObject

@synthesize FollowingUsers;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mFollowingUsers = [[NSMutableArray alloc] init];
	NSArray * lFollowingUsers = [dict valueForKey:@"FollowingUsers"];
	if ([lFollowingUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingUsers) {
			[mFollowingUsers addObject: [[QXUser alloc] initWithDictionary:d]];
		}
		[self setFollowingUsers:mFollowingUsers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mFollowingUsers = [[NSMutableArray alloc] init];
	for (QXUser * p in FollowingUsers) {
		[mFollowingUsers addObject:[p dictionary]];
	}
	[dict setValue:mFollowingUsers forKey:@"FollowingUsers"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetPanelStatusParams ---
@implementation QXAuthUserServiceGetPanelStatusParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetPanelStatusResults ---
@implementation QXAuthUserServiceGetPanelStatusResults : NSObject

@synthesize PanelStatus;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPanelStatus = [dict valueForKey:@"PanelStatus"];
	if ([dictPanelStatus isKindOfClass:[NSDictionary class]]){
		[self setPanelStatus:[[QXPanelStatus alloc] initWithDictionary:dictPanelStatus]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.PanelStatus dictionary] forKey:@"PanelStatus"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetUserPreferencesParams ---
@implementation QXAuthUserServiceGetUserPreferencesParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetUserPreferencesResults ---
@implementation QXAuthUserServiceGetUserPreferencesResults : NSObject

@synthesize Preferences;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPreferences = [dict valueForKey:@"Preferences"];
	if ([dictPreferences isKindOfClass:[NSDictionary class]]){
		[self setPreferences:[[QXPreferences alloc] initWithDictionary:dictPreferences]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Preferences dictionary] forKey:@"Preferences"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateUserPreferencesParams ---
@implementation QXAuthUserServiceUpdateUserPreferencesParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXPreferencesInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateUserPreferencesResults ---
@implementation QXAuthUserServiceUpdateUserPreferencesResults : NSObject

@synthesize Preferences;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPreferences = [dict valueForKey:@"Preferences"];
	if ([dictPreferences isKindOfClass:[NSDictionary class]]){
		[self setPreferences:[[QXPreferences alloc] initWithDictionary:dictPreferences]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Preferences dictionary] forKey:@"Preferences"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgEmbedUsersParams ---
@implementation QXAuthUserServiceGetOrgEmbedUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOrgEmbedUsersResults ---
@implementation QXAuthUserServiceGetOrgEmbedUsersResults : NSObject

@synthesize Users;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in Users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetNonStandardGroupEmbedUsersParams ---
@implementation QXAuthUserServiceGetNonStandardGroupEmbedUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetNonStandardGroupEmbedUsersResults ---
@implementation QXAuthUserServiceGetNonStandardGroupEmbedUsersResults : NSObject

@synthesize GroupUsers;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroupUsers = [[NSMutableArray alloc] init];
	NSArray * lGroupUsers = [dict valueForKey:@"GroupUsers"];
	if ([lGroupUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupUsers) {
			[mGroupUsers addObject: [[QXGroupUsers alloc] initWithDictionary:d]];
		}
		[self setGroupUsers:mGroupUsers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroupUsers = [[NSMutableArray alloc] init];
	for (QXGroupUsers * p in GroupUsers) {
		[mGroupUsers addObject:[p dictionary]];
	}
	[dict setValue:mGroupUsers forKey:@"GroupUsers"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateUserProfileParams ---
@implementation QXAuthUserServiceUpdateUserProfileParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXUserProfileInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateUserProfileResults ---
@implementation QXAuthUserServiceUpdateUserProfileResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSetPreferredLanguagesParams ---
@implementation QXAuthUserServiceSetPreferredLanguagesParams : NSObject

@synthesize LanguageCodes;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setLanguageCodes:[dict valueForKey:@"LanguageCodes"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.LanguageCodes forKey:@"LanguageCodes"];

	return dict;
}

@end

// --- QXSetPreferredLanguagesResults ---
@implementation QXAuthUserServiceSetPreferredLanguagesResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyCountParams ---
@implementation QXAuthUserServiceGetMyCountParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMyCountResults ---
@implementation QXAuthUserServiceGetMyCountResults : NSObject

@synthesize MyCount;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictMyCount = [dict valueForKey:@"MyCount"];
	if ([dictMyCount isKindOfClass:[NSDictionary class]]){
		[self setMyCount:[[QXMyCount alloc] initWithDictionary:dictMyCount]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.MyCount dictionary] forKey:@"MyCount"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXReadEntryParams ---
@implementation QXAuthUserServiceReadEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXReadEntryResults ---
@implementation QXAuthUserServiceReadEntryResults : NSObject

@synthesize MyCount;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictMyCount = [dict valueForKey:@"MyCount"];
	if ([dictMyCount isKindOfClass:[NSDictionary class]]){
		[self setMyCount:[[QXMyCount alloc] initWithDictionary:dictMyCount]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.MyCount dictionary] forKey:@"MyCount"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetJoinOrgInvitationsParams ---
@implementation QXAuthUserServiceGetJoinOrgInvitationsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetJoinOrgInvitationsResults ---
@implementation QXAuthUserServiceGetJoinOrgInvitationsResults : NSObject

@synthesize Invitations;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mInvitations = [[NSMutableArray alloc] init];
	NSArray * lInvitations = [dict valueForKey:@"Invitations"];
	if ([lInvitations isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lInvitations) {
			[mInvitations addObject: [[QXInvitation alloc] initWithDictionary:d]];
		}
		[self setInvitations:mInvitations];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mInvitations = [[NSMutableArray alloc] init];
	for (QXInvitation * p in Invitations) {
		[mInvitations addObject:[p dictionary]];
	}
	[dict setValue:mInvitations forKey:@"Invitations"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrganizationParams ---
@implementation QXAuthUserServiceGetOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXGetOrganizationResults ---
@implementation QXAuthUserServiceGetOrganizationResults : NSObject

@synthesize Org;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrg = [dict valueForKey:@"Org"];
	if ([dictOrg isKindOfClass:[NSDictionary class]]){
		[self setOrg:[[QXOrganization alloc] initWithDictionary:dictOrg]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Org dictionary] forKey:@"Org"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrganizationsParams ---
@implementation QXAuthUserServiceGetOrganizationsParams : NSObject

@synthesize OrgIds;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgIds:[dict valueForKey:@"OrgIds"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgIds forKey:@"OrgIds"];

	return dict;
}

@end

// --- QXGetOrganizationsResults ---
@implementation QXAuthUserServiceGetOrganizationsResults : NSObject

@synthesize Orgs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	NSArray * lOrgs = [dict valueForKey:@"Orgs"];
	if ([lOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgs) {
			[mOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setOrgs:mOrgs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in Orgs) {
		[mOrgs addObject:[p dictionary]];
	}
	[dict setValue:mOrgs forKey:@"Orgs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyOrgsUnreadInfoParams ---
@implementation QXAuthUserServiceGetMyOrgsUnreadInfoParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMyOrgsUnreadInfoResults ---
@implementation QXAuthUserServiceGetMyOrgsUnreadInfoResults : NSObject

@synthesize UnreadInfo;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mUnreadInfo = [[NSMutableArray alloc] init];
	NSArray * lUnreadInfo = [dict valueForKey:@"UnreadInfo"];
	if ([lUnreadInfo isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnreadInfo) {
			[mUnreadInfo addObject: [[QXOrgUnreadInfo alloc] initWithDictionary:d]];
		}
		[self setUnreadInfo:mUnreadInfo];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mUnreadInfo = [[NSMutableArray alloc] init];
	for (QXOrgUnreadInfo * p in UnreadInfo) {
		[mUnreadInfo addObject:[p dictionary]];
	}
	[dict setValue:mUnreadInfo forKey:@"UnreadInfo"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyJoinedOrganizationsParams ---
@implementation QXAuthUserServiceGetMyJoinedOrganizationsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMyJoinedOrganizationsResults ---
@implementation QXAuthUserServiceGetMyJoinedOrganizationsResults : NSObject

@synthesize Orgs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	NSArray * lOrgs = [dict valueForKey:@"Orgs"];
	if ([lOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgs) {
			[mOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setOrgs:mOrgs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in Orgs) {
		[mOrgs addObject:[p dictionary]];
	}
	[dict setValue:mOrgs forKey:@"Orgs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetCurrentOrganizationParams ---
@implementation QXAuthUserServiceGetCurrentOrganizationParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetCurrentOrganizationResults ---
@implementation QXAuthUserServiceGetCurrentOrganizationResults : NSObject

@synthesize Org;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrg = [dict valueForKey:@"Org"];
	if ([dictOrg isKindOfClass:[NSDictionary class]]){
		[self setOrg:[[QXOrganization alloc] initWithDictionary:dictOrg]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Org dictionary] forKey:@"Org"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSearchOrganizationsParams ---
@implementation QXAuthUserServiceSearchOrganizationsParams : NSObject

@synthesize Keyword;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];

	return dict;
}

@end

// --- QXSearchOrganizationsResults ---
@implementation QXAuthUserServiceSearchOrganizationsResults : NSObject

@synthesize Orgs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	NSArray * lOrgs = [dict valueForKey:@"Orgs"];
	if ([lOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgs) {
			[mOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setOrgs:mOrgs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in Orgs) {
		[mOrgs addObject:[p dictionary]];
	}
	[dict setValue:mOrgs forKey:@"Orgs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateOrganizationParams ---
@implementation QXAuthUserServiceUpdateOrganizationParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXOrganizationInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateOrganizationResults ---
@implementation QXAuthUserServiceUpdateOrganizationResults : NSObject

@synthesize Org;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrg = [dict valueForKey:@"Org"];
	if ([dictOrg isKindOfClass:[NSDictionary class]]){
		[self setOrg:[[QXOrganization alloc] initWithDictionary:dictOrg]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Org dictionary] forKey:@"Org"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSwitchOrganizationParams ---
@implementation QXAuthUserServiceSwitchOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXSwitchOrganizationResults ---
@implementation QXAuthUserServiceSwitchOrganizationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAcceptShareRequestByAdminParams ---
@implementation QXAuthUserServiceAcceptShareRequestByAdminParams : NSObject

@synthesize RequestId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setRequestId:[dict valueForKey:@"RequestId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.RequestId forKey:@"RequestId"];

	return dict;
}

@end

// --- QXAcceptShareRequestByAdminResults ---
@implementation QXAuthUserServiceAcceptShareRequestByAdminResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRejectShareRequestByAdminParams ---
@implementation QXAuthUserServiceRejectShareRequestByAdminParams : NSObject

@synthesize RequestId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setRequestId:[dict valueForKey:@"RequestId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.RequestId forKey:@"RequestId"];

	return dict;
}

@end

// --- QXRejectShareRequestByAdminResults ---
@implementation QXAuthUserServiceRejectShareRequestByAdminResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStartTrialParams ---
@implementation QXAuthUserServiceStartTrialParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXStartTrialResults ---
@implementation QXAuthUserServiceStartTrialResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgSettingsParams ---
@implementation QXAuthUserServiceGetOrgSettingsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOrgSettingsResults ---
@implementation QXAuthUserServiceGetOrgSettingsResults : NSObject

@synthesize OrgSetting;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrgSetting = [dict valueForKey:@"OrgSetting"];
	if ([dictOrgSetting isKindOfClass:[NSDictionary class]]){
		[self setOrgSetting:[[QXOrgSettings alloc] initWithDictionary:dictOrgSetting]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.OrgSetting dictionary] forKey:@"OrgSetting"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateOrgSettingsParams ---
@implementation QXAuthUserServiceUpdateOrgSettingsParams : NSObject

@synthesize OrgSettingInput;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrgSettingInput = [dict valueForKey:@"OrgSettingInput"];
	if ([dictOrgSettingInput isKindOfClass:[NSDictionary class]]){
		[self setOrgSettingInput:[[QXOrgSettingsInput alloc] initWithDictionary:dictOrgSettingInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.OrgSettingInput dictionary] forKey:@"OrgSettingInput"];
	

	return dict;
}

@end

// --- QXUpdateOrgSettingsResults ---
@implementation QXAuthUserServiceUpdateOrgSettingsResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCanCreateGroupParams ---
@implementation QXAuthUserServiceCanCreateGroupParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXCanCreateGroupResults ---
@implementation QXAuthUserServiceCanCreateGroupResults : NSObject

@synthesize Ok;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOk:[[dict valueForKey:@"Ok"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Ok] forKey:@"Ok"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCanInvitePeopleParams ---
@implementation QXAuthUserServiceCanInvitePeopleParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXCanInvitePeopleResults ---
@implementation QXAuthUserServiceCanInvitePeopleResults : NSObject

@synthesize Ok;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOk:[[dict valueForKey:@"Ok"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Ok] forKey:@"Ok"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXInvitePeopleParams ---
@implementation QXAuthUserServiceInvitePeopleParams : NSObject

@synthesize Emails;
@synthesize AllowEmpty;
@synthesize SkipInvalidEmail;
@synthesize CustomMessage;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmails:[dict valueForKey:@"Emails"]];
	[self setAllowEmpty:[[dict valueForKey:@"AllowEmpty"] boolValue]];
	[self setSkipInvalidEmail:[[dict valueForKey:@"SkipInvalidEmail"] boolValue]];
	[self setCustomMessage:[dict valueForKey:@"CustomMessage"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Emails forKey:@"Emails"];
	[dict setValue:[NSNumber numberWithBool:self.AllowEmpty] forKey:@"AllowEmpty"];
	[dict setValue:[NSNumber numberWithBool:self.SkipInvalidEmail] forKey:@"SkipInvalidEmail"];
	[dict setValue:self.CustomMessage forKey:@"CustomMessage"];

	return dict;
}

@end

// --- QXInvitePeopleResults ---
@implementation QXAuthUserServiceInvitePeopleResults : NSObject

@synthesize SendedEmails;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSendedEmails:[dict valueForKey:@"SendedEmails"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.SendedEmails forKey:@"SendedEmails"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCancelInvitationParams ---
@implementation QXAuthUserServiceCancelInvitationParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXCancelInvitationResults ---
@implementation QXAuthUserServiceCancelInvitationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXResendInvitationParams ---
@implementation QXAuthUserServiceResendInvitationParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXResendInvitationResults ---
@implementation QXAuthUserServiceResendInvitationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXChangeLocaleParams ---
@implementation QXAuthUserServiceChangeLocaleParams : NSObject

@synthesize LocaleName;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setLocaleName:[dict valueForKey:@"LocaleName"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.LocaleName forKey:@"LocaleName"];

	return dict;
}

@end

// --- QXChangeLocaleResults ---
@implementation QXAuthUserServiceChangeLocaleResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateGroupAdvancedToDoSettingsParams ---
@implementation QXAuthUserServiceUpdateGroupAdvancedToDoSettingsParams : NSObject

@synthesize GId;
@synthesize Settings;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGId:[dict valueForKey:@"GId"]];
	[self setSettings:[dict valueForKey:@"Settings"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GId forKey:@"GId"];
	[dict setValue:self.Settings forKey:@"Settings"];

	return dict;
}

@end

// --- QXUpdateGroupAdvancedToDoSettingsResults ---
@implementation QXAuthUserServiceUpdateGroupAdvancedToDoSettingsResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateMailPreferenceParams ---
@implementation QXAuthUserServiceUpdateMailPreferenceParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXMailPreferenceInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateMailPreferenceResults ---
@implementation QXAuthUserServiceUpdateMailPreferenceResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXPrepareChangingEmailParams ---
@implementation QXAuthUserServicePrepareChangingEmailParams : NSObject

@synthesize NewEmail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setNewEmail:[dict valueForKey:@"NewEmail"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.NewEmail forKey:@"NewEmail"];

	return dict;
}

@end

// --- QXPrepareChangingEmailResults ---
@implementation QXAuthUserServicePrepareChangingEmailResults : NSObject

@synthesize Changer;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictChanger = [dict valueForKey:@"Changer"];
	if ([dictChanger isKindOfClass:[NSDictionary class]]){
		[self setChanger:[[QXEmailChanger alloc] initWithDictionary:dictChanger]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Changer dictionary] forKey:@"Changer"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXConfirmChangingEmailParams ---
@implementation QXAuthUserServiceConfirmChangingEmailParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXConfirmChangingEmailResults ---
@implementation QXAuthUserServiceConfirmChangingEmailResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateAccountParams ---
@implementation QXAuthUserServiceUpdateAccountParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXMemberAccountInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateAccountResults ---
@implementation QXAuthUserServiceUpdateAccountResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSendShareRequestParams ---
@implementation QXAuthUserServiceSendShareRequestParams : NSObject

@synthesize GroupId;
@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXSendShareRequestResults ---
@implementation QXAuthUserServiceSendShareRequestResults : NSObject

@synthesize ShareRequest;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictShareRequest = [dict valueForKey:@"ShareRequest"];
	if ([dictShareRequest isKindOfClass:[NSDictionary class]]){
		[self setShareRequest:[[QXShareRequest alloc] initWithDictionary:dictShareRequest]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ShareRequest dictionary] forKey:@"ShareRequest"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetShareRequestsParams ---
@implementation QXAuthUserServiceGetShareRequestsParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetShareRequestsResults ---
@implementation QXAuthUserServiceGetShareRequestsResults : NSObject

@synthesize Sis;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mSis = [[NSMutableArray alloc] init];
	NSArray * lSis = [dict valueForKey:@"Sis"];
	if ([lSis isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lSis) {
			[mSis addObject: [[QXShareRequest alloc] initWithDictionary:d]];
		}
		[self setSis:mSis];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mSis = [[NSMutableArray alloc] init];
	for (QXShareRequest * p in Sis) {
		[mSis addObject:[p dictionary]];
	}
	[dict setValue:mSis forKey:@"Sis"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCancelShareRequestParams ---
@implementation QXAuthUserServiceCancelShareRequestParams : NSObject

@synthesize RequestId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setRequestId:[dict valueForKey:@"RequestId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.RequestId forKey:@"RequestId"];

	return dict;
}

@end

// --- QXCancelShareRequestResults ---
@implementation QXAuthUserServiceCancelShareRequestResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStopSharingGroupParams ---
@implementation QXAuthUserServiceStopSharingGroupParams : NSObject

@synthesize RequestId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setRequestId:[dict valueForKey:@"RequestId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.RequestId forKey:@"RequestId"];

	return dict;
}

@end

// --- QXStopSharingGroupResults ---
@implementation QXAuthUserServiceStopSharingGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDismissPresentationTipParams ---
@implementation QXAuthUserServiceDismissPresentationTipParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXDismissPresentationTipResults ---
@implementation QXAuthUserServiceDismissPresentationTipResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyChatEntriesParams ---
@implementation QXAuthUserServiceGetMyChatEntriesParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetMyChatEntriesResults ---
@implementation QXAuthUserServiceGetMyChatEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetPrivateChatParams ---
@implementation QXAuthUserServiceGetPrivateChatParams : NSObject

@synthesize ConversationId;
@synthesize SearchKeyWords;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setConversationId:[dict valueForKey:@"ConversationId"]];
	[self setSearchKeyWords:[dict valueForKey:@"SearchKeyWords"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ConversationId forKey:@"ConversationId"];
	[dict setValue:self.SearchKeyWords forKey:@"SearchKeyWords"];

	return dict;
}

@end

// --- QXGetPrivateChatResults ---
@implementation QXAuthUserServiceGetPrivateChatResults : NSObject

@synthesize ChatEntry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictChatEntry = [dict valueForKey:@"ChatEntry"];
	if ([dictChatEntry isKindOfClass:[NSDictionary class]]){
		[self setChatEntry:[[QXEntry alloc] initWithDictionary:dictChatEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ChatEntry dictionary] forKey:@"ChatEntry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateQortexSupportParams ---
@implementation QXAuthUserServiceCreateQortexSupportParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXQortexSupportInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateQortexSupportResults ---
@implementation QXAuthUserServiceCreateQortexSupportResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateQortexSupportCommentParams ---
@implementation QXAuthUserServiceCreateQortexSupportCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXQortexSupportInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateQortexSupportCommentResults ---
@implementation QXAuthUserServiceCreateQortexSupportCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetQortexSupportParams ---
@implementation QXAuthUserServiceGetQortexSupportParams : NSObject

@synthesize EntryId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];

	return dict;
}

@end

// --- QXGetQortexSupportResults ---
@implementation QXAuthUserServiceGetQortexSupportResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetQortexSupportCommentParams ---
@implementation QXAuthUserServiceGetQortexSupportCommentParams : NSObject

@synthesize EntryId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];

	return dict;
}

@end

// --- QXGetQortexSupportCommentResults ---
@implementation QXAuthUserServiceGetQortexSupportCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateQortexSupportParams ---
@implementation QXAuthUserServiceUpdateQortexSupportParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXQortexSupportInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateQortexSupportResults ---
@implementation QXAuthUserServiceUpdateQortexSupportResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateQortexSupportCommentParams ---
@implementation QXAuthUserServiceUpdateQortexSupportCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXQortexSupportInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateQortexSupportCommentResults ---
@implementation QXAuthUserServiceUpdateQortexSupportCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetQortexSupportHelpLinkParams ---
@implementation QXAuthUserServiceGetQortexSupportHelpLinkParams : NSObject

@synthesize Title;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];

	return dict;
}

@end

// --- QXGetQortexSupportHelpLinkResults ---
@implementation QXAuthUserServiceGetQortexSupportHelpLinkResults : NSObject

@synthesize Link;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setLink:[dict valueForKey:@"Link"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXNewTaskParams ---
@implementation QXAuthUserServiceNewTaskParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXNewTaskResults ---
@implementation QXAuthUserServiceNewTaskResults : NSObject

@synthesize Task;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTask = [dict valueForKey:@"Task"];
	if ([dictTask isKindOfClass:[NSDictionary class]]){
		[self setTask:[[QXTask alloc] initWithDictionary:dictTask]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Task dictionary] forKey:@"Task"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXEditTaskParams ---
@implementation QXAuthUserServiceEditTaskParams : NSObject

@synthesize GroupId;
@synthesize TaskId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setTaskId:[dict valueForKey:@"TaskId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.TaskId forKey:@"TaskId"];

	return dict;
}

@end

// --- QXEditTaskResults ---
@implementation QXAuthUserServiceEditTaskResults : NSObject

@synthesize Task;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTask = [dict valueForKey:@"Task"];
	if ([dictTask isKindOfClass:[NSDictionary class]]){
		[self setTask:[[QXTask alloc] initWithDictionary:dictTask]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Task dictionary] forKey:@"Task"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAdvancedTaskParams ---
@implementation QXAuthUserServiceGetAdvancedTaskParams : NSObject

@synthesize TaskId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTaskId:[dict valueForKey:@"TaskId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.TaskId forKey:@"TaskId"];

	return dict;
}

@end

// --- QXGetAdvancedTaskResults ---
@implementation QXAuthUserServiceGetAdvancedTaskResults : NSObject

@synthesize At;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictAt = [dict valueForKey:@"At"];
	if ([dictAt isKindOfClass:[NSDictionary class]]){
		[self setAt:[[QXAdvancedTask alloc] initWithDictionary:dictAt]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.At dictionary] forKey:@"At"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXClaimTaskParams ---
@implementation QXAuthUserServiceClaimTaskParams : NSObject

@synthesize TaskId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTaskId:[dict valueForKey:@"TaskId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.TaskId forKey:@"TaskId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXClaimTaskResults ---
@implementation QXAuthUserServiceClaimTaskResults : NSObject

@synthesize Task;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTask = [dict valueForKey:@"Task"];
	if ([dictTask isKindOfClass:[NSDictionary class]]){
		[self setTask:[[QXTask alloc] initWithDictionary:dictTask]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Task dictionary] forKey:@"Task"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateTaskParams ---
@implementation QXAuthUserServiceUpdateTaskParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXTaskInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateTaskResults ---
@implementation QXAuthUserServiceUpdateTaskResults : NSObject

@synthesize Task;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTask = [dict valueForKey:@"Task"];
	if ([dictTask isKindOfClass:[NSDictionary class]]){
		[self setTask:[[QXTask alloc] initWithDictionary:dictTask]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Task dictionary] forKey:@"Task"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetTasksForMeParams ---
@implementation QXAuthUserServiceGetTasksForMeParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetTasksForMeResults ---
@implementation QXAuthUserServiceGetTasksForMeResults : NSObject

@synthesize NeedActionTasks;
@synthesize GroupTasks;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mNeedActionTasks = [[NSMutableArray alloc] init];
	NSArray * lNeedActionTasks = [dict valueForKey:@"NeedActionTasks"];
	if ([lNeedActionTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNeedActionTasks) {
			[mNeedActionTasks addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setNeedActionTasks:mNeedActionTasks];
	}

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	NSArray * lGroupTasks = [dict valueForKey:@"GroupTasks"];
	if ([lGroupTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupTasks) {
			[mGroupTasks addObject: [[QXGroupTasksOutline alloc] initWithDictionary:d]];
		}
		[self setGroupTasks:mGroupTasks];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mNeedActionTasks = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in NeedActionTasks) {
		[mNeedActionTasks addObject:[p dictionary]];
	}
	[dict setValue:mNeedActionTasks forKey:@"NeedActionTasks"];
	

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	for (QXGroupTasksOutline * p in GroupTasks) {
		[mGroupTasks addObject:[p dictionary]];
	}
	[dict setValue:mGroupTasks forKey:@"GroupTasks"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOpenTasksIMadeParams ---
@implementation QXAuthUserServiceGetOpenTasksIMadeParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOpenTasksIMadeResults ---
@implementation QXAuthUserServiceGetOpenTasksIMadeResults : NSObject

@synthesize GroupTasks;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	NSArray * lGroupTasks = [dict valueForKey:@"GroupTasks"];
	if ([lGroupTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupTasks) {
			[mGroupTasks addObject: [[QXGroupTasksOutline alloc] initWithDictionary:d]];
		}
		[self setGroupTasks:mGroupTasks];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	for (QXGroupTasksOutline * p in GroupTasks) {
		[mGroupTasks addObject:[p dictionary]];
	}
	[dict setValue:mGroupTasks forKey:@"GroupTasks"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetClosedTasksIMadeParams ---
@implementation QXAuthUserServiceGetClosedTasksIMadeParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetClosedTasksIMadeResults ---
@implementation QXAuthUserServiceGetClosedTasksIMadeResults : NSObject

@synthesize Tasks;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTasks = [[NSMutableArray alloc] init];
	NSArray * lTasks = [dict valueForKey:@"Tasks"];
	if ([lTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTasks) {
			[mTasks addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setTasks:mTasks];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTasks = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in Tasks) {
		[mTasks addObject:[p dictionary]];
	}
	[dict setValue:mTasks forKey:@"Tasks"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOpenTasksIWorkedOnParams ---
@implementation QXAuthUserServiceGetOpenTasksIWorkedOnParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOpenTasksIWorkedOnResults ---
@implementation QXAuthUserServiceGetOpenTasksIWorkedOnResults : NSObject

@synthesize GroupTasks;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	NSArray * lGroupTasks = [dict valueForKey:@"GroupTasks"];
	if ([lGroupTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupTasks) {
			[mGroupTasks addObject: [[QXGroupTasksOutline alloc] initWithDictionary:d]];
		}
		[self setGroupTasks:mGroupTasks];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroupTasks = [[NSMutableArray alloc] init];
	for (QXGroupTasksOutline * p in GroupTasks) {
		[mGroupTasks addObject:[p dictionary]];
	}
	[dict setValue:mGroupTasks forKey:@"GroupTasks"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetClosedTasksIWorkedOnParams ---
@implementation QXAuthUserServiceGetClosedTasksIWorkedOnParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetClosedTasksIWorkedOnResults ---
@implementation QXAuthUserServiceGetClosedTasksIWorkedOnResults : NSObject

@synthesize Tasks;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTasks = [[NSMutableArray alloc] init];
	NSArray * lTasks = [dict valueForKey:@"Tasks"];
	if ([lTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTasks) {
			[mTasks addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setTasks:mTasks];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTasks = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in Tasks) {
		[mTasks addObject:[p dictionary]];
	}
	[dict setValue:mTasks forKey:@"Tasks"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupAdvancedToDoSettingParams ---
@implementation QXAuthUserServiceGetGroupAdvancedToDoSettingParams : NSObject

@synthesize GId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGId:[dict valueForKey:@"GId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GId forKey:@"GId"];

	return dict;
}

@end

// --- QXGetGroupAdvancedToDoSettingResults ---
@implementation QXAuthUserServiceGetGroupAdvancedToDoSettingResults : NSObject

@synthesize Page;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPage = [dict valueForKey:@"Page"];
	if ([dictPage isKindOfClass:[NSDictionary class]]){
		[self setPage:[[QXGroupAdvancedSettingPage alloc] initWithDictionary:dictPage]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Page dictionary] forKey:@"Page"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosInGroupParams ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosInGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosInGroupResults ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosInGroupResults : NSObject

@synthesize Page;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPage = [dict valueForKey:@"Page"];
	if ([dictPage isKindOfClass:[NSDictionary class]]){
		[self setPage:[[QXOpenAdvancedToDosPage alloc] initWithDictionary:dictPage]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Page dictionary] forKey:@"Page"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosGroupingByUserInGroupParams ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosGroupingByUserInGroupResults ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults : NSObject

@synthesize Atos;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mAtos = [[NSMutableArray alloc] init];
	NSArray * lAtos = [dict valueForKey:@"Atos"];
	if ([lAtos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAtos) {
			[mAtos addObject: [[QXOpenAdvancedToDosPage alloc] initWithDictionary:d]];
		}
		[self setAtos:mAtos];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mAtos = [[NSMutableArray alloc] init];
	for (QXOpenAdvancedToDosPage * p in Atos) {
		[mAtos addObject:[p dictionary]];
	}
	[dict setValue:mAtos forKey:@"Atos"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosGroupingByStatusInGroupParams ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosGroupingByStatusInGroupResults ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults : NSObject

@synthesize Page;
@synthesize ApiGroup;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPage = [dict valueForKey:@"Page"];
	if ([dictPage isKindOfClass:[NSDictionary class]]){
		[self setPage:[[QXOpenAdvancedToDosPage alloc] initWithDictionary:dictPage]];
	}

	id dictApiGroup = [dict valueForKey:@"ApiGroup"];
	if ([dictApiGroup isKindOfClass:[NSDictionary class]]){
		[self setApiGroup:[[QXGroup alloc] initWithDictionary:dictApiGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Page dictionary] forKey:@"Page"];
	
	[dict setValue:[self.ApiGroup dictionary] forKey:@"ApiGroup"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosGroupingByLabelInGroupParams ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXAllOpenAdvancedToDosGroupingByLabelInGroupResults ---
@implementation QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults : NSObject

@synthesize Page;
@synthesize ApiGroup;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPage = [dict valueForKey:@"Page"];
	if ([dictPage isKindOfClass:[NSDictionary class]]){
		[self setPage:[[QXOpenAdvancedToDosPage alloc] initWithDictionary:dictPage]];
	}

	id dictApiGroup = [dict valueForKey:@"ApiGroup"];
	if ([dictApiGroup isKindOfClass:[NSDictionary class]]){
		[self setApiGroup:[[QXGroup alloc] initWithDictionary:dictApiGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Page dictionary] forKey:@"Page"];
	
	[dict setValue:[self.ApiGroup dictionary] forKey:@"ApiGroup"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllOpenBasicToDosInGroupParams ---
@implementation QXAuthUserServiceAllOpenBasicToDosInGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXAllOpenBasicToDosInGroupResults ---
@implementation QXAuthUserServiceAllOpenBasicToDosInGroupResults : NSObject

@synthesize TaskOutlines;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	NSArray * lTaskOutlines = [dict valueForKey:@"TaskOutlines"];
	if ([lTaskOutlines isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskOutlines) {
			[mTaskOutlines addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setTaskOutlines:mTaskOutlines];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in TaskOutlines) {
		[mTaskOutlines addObject:[p dictionary]];
	}
	[dict setValue:mTaskOutlines forKey:@"TaskOutlines"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllOpenBasicToDosGroupingByUserInGroupParams ---
@implementation QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXAllOpenBasicToDosGroupingByUserInGroupResults ---
@implementation QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults : NSObject

@synthesize Atos;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mAtos = [[NSMutableArray alloc] init];
	NSArray * lAtos = [dict valueForKey:@"Atos"];
	if ([lAtos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAtos) {
			[mAtos addObject: [[QXBasicOpenToDoOutlines alloc] initWithDictionary:d]];
		}
		[self setAtos:mAtos];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mAtos = [[NSMutableArray alloc] init];
	for (QXBasicOpenToDoOutlines * p in Atos) {
		[mAtos addObject:[p dictionary]];
	}
	[dict setValue:mAtos forKey:@"Atos"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllClosedBasicToDosInGroupParams ---
@implementation QXAuthUserServiceAllClosedBasicToDosInGroupParams : NSObject

@synthesize GroupId;
@synthesize AfterTimeS;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAfterTimeS:[dict valueForKey:@"AfterTimeS"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AfterTimeS forKey:@"AfterTimeS"];

	return dict;
}

@end

// --- QXAllClosedBasicToDosInGroupResults ---
@implementation QXAuthUserServiceAllClosedBasicToDosInGroupResults : NSObject

@synthesize TaskOutlines;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	NSArray * lTaskOutlines = [dict valueForKey:@"TaskOutlines"];
	if ([lTaskOutlines isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskOutlines) {
			[mTaskOutlines addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setTaskOutlines:mTaskOutlines];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in TaskOutlines) {
		[mTaskOutlines addObject:[p dictionary]];
	}
	[dict setValue:mTaskOutlines forKey:@"TaskOutlines"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAllClosedAdvancedToDosInGroupParams ---
@implementation QXAuthUserServiceAllClosedAdvancedToDosInGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXAllClosedAdvancedToDosInGroupResults ---
@implementation QXAuthUserServiceAllClosedAdvancedToDosInGroupResults : NSObject

@synthesize ClosedOutlines;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mClosedOutlines = [[NSMutableArray alloc] init];
	NSArray * lClosedOutlines = [dict valueForKey:@"ClosedOutlines"];
	if ([lClosedOutlines isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lClosedOutlines) {
			[mClosedOutlines addObject: [[QXClosedAdvancedToDoOutline alloc] initWithDictionary:d]];
		}
		[self setClosedOutlines:mClosedOutlines];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mClosedOutlines = [[NSMutableArray alloc] init];
	for (QXClosedAdvancedToDoOutline * p in ClosedOutlines) {
		[mClosedOutlines addObject:[p dictionary]];
	}
	[dict setValue:mClosedOutlines forKey:@"ClosedOutlines"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXMoreClosedAdvancedToDosWithStatusInGroupParams ---
@implementation QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupParams : NSObject

@synthesize GroupId;
@synthesize Status;
@synthesize AfterTime;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setAfterTime:[dict valueForKey:@"AfterTime"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.AfterTime forKey:@"AfterTime"];

	return dict;
}

@end

// --- QXMoreClosedAdvancedToDosWithStatusInGroupResults ---
@implementation QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults : NSObject

@synthesize TaskOutlines;
@synthesize ApiGroup;
@synthesize HasMore;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	NSArray * lTaskOutlines = [dict valueForKey:@"TaskOutlines"];
	if ([lTaskOutlines isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTaskOutlines) {
			[mTaskOutlines addObject: [[QXTaskOutline alloc] initWithDictionary:d]];
		}
		[self setTaskOutlines:mTaskOutlines];
	}

	id dictApiGroup = [dict valueForKey:@"ApiGroup"];
	if ([dictApiGroup isKindOfClass:[NSDictionary class]]){
		[self setApiGroup:[[QXGroup alloc] initWithDictionary:dictApiGroup]];
	}
	[self setHasMore:[[dict valueForKey:@"HasMore"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTaskOutlines = [[NSMutableArray alloc] init];
	for (QXTaskOutline * p in TaskOutlines) {
		[mTaskOutlines addObject:[p dictionary]];
	}
	[dict setValue:mTaskOutlines forKey:@"TaskOutlines"];
	
	[dict setValue:[self.ApiGroup dictionary] forKey:@"ApiGroup"];
	
	[dict setValue:[NSNumber numberWithBool:self.HasMore] forKey:@"HasMore"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCountOfClosedToDosInGroupParams ---
@implementation QXAuthUserServiceCountOfClosedToDosInGroupParams : NSObject

@synthesize Ttype;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTtype:[dict valueForKey:@"Ttype"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Ttype forKey:@"Ttype"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXCountOfClosedToDosInGroupResults ---
@implementation QXAuthUserServiceCountOfClosedToDosInGroupResults : NSObject

@synthesize Count;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setCount:[dict valueForKey:@"Count"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Count forKey:@"Count"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXToDoCSVParams ---
@implementation QXAuthUserServiceToDoCSVParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXToDoCSVResults ---
@implementation QXAuthUserServiceToDoCSVResults : NSObject

@synthesize Todos;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTodos = [[NSMutableArray alloc] init];
	NSArray * lTodos = [dict valueForKey:@"Todos"];
	if ([lTodos isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTodos) {
			[mTodos addObject: [[QXToDoCSVItem alloc] initWithDictionary:d]];
		}
		[self setTodos:mTodos];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTodos = [[NSMutableArray alloc] init];
	for (QXToDoCSVItem * p in Todos) {
		[mTodos addObject:[p dictionary]];
	}
	[dict setValue:mTodos forKey:@"Todos"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end


// --- QXGetSessionParams ---
@implementation QXPublicServiceGetSessionParams : NSObject

@synthesize Email;
@synthesize Password;
@synthesize Locale;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPassword:[dict valueForKey:@"Password"]];
	[self setLocale:[dict valueForKey:@"Locale"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Password forKey:@"Password"];
	[dict setValue:self.Locale forKey:@"Locale"];

	return dict;
}

@end

// --- QXGetSessionResults ---
@implementation QXPublicServiceGetSessionResults : NSObject

@synthesize Session;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAuthorizedAdminParams ---
@implementation QXPublicServiceGetAuthorizedAdminParams : NSObject

@synthesize Session;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];

	return dict;
}

@end

// --- QXGetAuthorizedAdminResults ---
@implementation QXPublicServiceGetAuthorizedAdminResults : NSObject

@synthesize ApiEmbedUser;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictApiEmbedUser = [dict valueForKey:@"ApiEmbedUser"];
	if ([dictApiEmbedUser isKindOfClass:[NSDictionary class]]){
		[self setApiEmbedUser:[[QXEmbedUser alloc] initWithDictionary:dictApiEmbedUser]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ApiEmbedUser dictionary] forKey:@"ApiEmbedUser"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXFindPasswordParams ---
@implementation QXPublicServiceFindPasswordParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXFindPasswordResults ---
@implementation QXPublicServiceFindPasswordResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXResetPasswordParams ---
@implementation QXPublicServiceResetPasswordParams : NSObject

@synthesize Token;
@synthesize Password;
@synthesize ConfirmedPassword;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setPassword:[dict valueForKey:@"Password"]];
	[self setConfirmedPassword:[dict valueForKey:@"ConfirmedPassword"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.Password forKey:@"Password"];
	[dict setValue:self.ConfirmedPassword forKey:@"ConfirmedPassword"];

	return dict;
}

@end

// --- QXResetPasswordResults ---
@implementation QXPublicServiceResetPasswordResults : NSObject

@synthesize MemberId;
@synthesize Email;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setMemberId:[dict valueForKey:@"MemberId"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.MemberId forKey:@"MemberId"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXPrepareChangingEmailParams ---
@implementation QXPublicServicePrepareChangingEmailParams : NSObject

@synthesize MemberId;
@synthesize NewEmail;
@synthesize SharingToken;
@synthesize InvitationToken;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setMemberId:[dict valueForKey:@"MemberId"]];
	[self setNewEmail:[dict valueForKey:@"NewEmail"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];
	[self setInvitationToken:[dict valueForKey:@"InvitationToken"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.MemberId forKey:@"MemberId"];
	[dict setValue:self.NewEmail forKey:@"NewEmail"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];
	[dict setValue:self.InvitationToken forKey:@"InvitationToken"];

	return dict;
}

@end

// --- QXPrepareChangingEmailResults ---
@implementation QXPublicServicePrepareChangingEmailResults : NSObject

@synthesize Changer;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictChanger = [dict valueForKey:@"Changer"];
	if ([dictChanger isKindOfClass:[NSDictionary class]]){
		[self setChanger:[[QXEmailChanger alloc] initWithDictionary:dictChanger]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Changer dictionary] forKey:@"Changer"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXConfirmChangingEmailParams ---
@implementation QXPublicServiceConfirmChangingEmailParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXConfirmChangingEmailResults ---
@implementation QXPublicServiceConfirmChangingEmailResults : NSObject

@synthesize ActivationToken;
@synthesize SharingToken;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setActivationToken:[dict valueForKey:@"ActivationToken"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ActivationToken forKey:@"ActivationToken"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCancelChangingEmailParams ---
@implementation QXPublicServiceCancelChangingEmailParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXCancelChangingEmailResults ---
@implementation QXPublicServiceCancelChangingEmailResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXChangeEmailToAcceptSharingParams ---
@implementation QXPublicServiceChangeEmailToAcceptSharingParams : NSObject

@synthesize Token;
@synthesize NewEmail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setNewEmail:[dict valueForKey:@"NewEmail"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.NewEmail forKey:@"NewEmail"];

	return dict;
}

@end

// --- QXChangeEmailToAcceptSharingResults ---
@implementation QXPublicServiceChangeEmailToAcceptSharingResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetShareRequestParams ---
@implementation QXPublicServiceGetShareRequestParams : NSObject

@synthesize Token;
@synthesize MemberId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setMemberId:[dict valueForKey:@"MemberId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.MemberId forKey:@"MemberId"];

	return dict;
}

@end

// --- QXGetShareRequestResults ---
@implementation QXPublicServiceGetShareRequestResults : NSObject

@synthesize ShareRequest;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictShareRequest = [dict valueForKey:@"ShareRequest"];
	if ([dictShareRequest isKindOfClass:[NSDictionary class]]){
		[self setShareRequest:[[QXShareRequest alloc] initWithDictionary:dictShareRequest]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ShareRequest dictionary] forKey:@"ShareRequest"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXContactUsParams ---
@implementation QXPublicServiceContactUsParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXContactInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXContactUsResults ---
@implementation QXPublicServiceContactUsResults : NSObject

@synthesize Contact;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictContact = [dict valueForKey:@"Contact"];
	if ([dictContact isKindOfClass:[NSDictionary class]]){
		[self setContact:[[QXContactInfo alloc] initWithDictionary:dictContact]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Contact dictionary] forKey:@"Contact"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetBlogEntriesParams ---
@implementation QXPublicServiceGetBlogEntriesParams : NSObject

@synthesize Doi;
@synthesize PageNum;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setPageNum:[dict valueForKey:@"PageNum"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.PageNum forKey:@"PageNum"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetBlogEntriesResults ---
@implementation QXPublicServiceGetBlogEntriesResults : NSObject

@synthesize Blog;
@synthesize BlogEntries;
@synthesize TotalPageNum;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictBlog = [dict valueForKey:@"Blog"];
	if ([dictBlog isKindOfClass:[NSDictionary class]]){
		[self setBlog:[[QXBlog alloc] initWithDictionary:dictBlog]];
	}

	NSMutableArray * mBlogEntries = [[NSMutableArray alloc] init];
	NSArray * lBlogEntries = [dict valueForKey:@"BlogEntries"];
	if ([lBlogEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lBlogEntries) {
			[mBlogEntries addObject: [[QXBlogEntry alloc] initWithDictionary:d]];
		}
		[self setBlogEntries:mBlogEntries];
	}
	[self setTotalPageNum:[dict valueForKey:@"TotalPageNum"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Blog dictionary] forKey:@"Blog"];
	

	NSMutableArray * mBlogEntries = [[NSMutableArray alloc] init];
	for (QXBlogEntry * p in BlogEntries) {
		[mBlogEntries addObject:[p dictionary]];
	}
	[dict setValue:mBlogEntries forKey:@"BlogEntries"];
	
	[dict setValue:self.TotalPageNum forKey:@"TotalPageNum"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetBlogEntryBySlugParams ---
@implementation QXPublicServiceGetBlogEntryBySlugParams : NSObject

@synthesize Doi;
@synthesize Slug;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setSlug:[dict valueForKey:@"Slug"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.Slug forKey:@"Slug"];

	return dict;
}

@end

// --- QXGetBlogEntryBySlugResults ---
@implementation QXPublicServiceGetBlogEntryBySlugResults : NSObject

@synthesize Blog;
@synthesize BlogEntry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictBlog = [dict valueForKey:@"Blog"];
	if ([dictBlog isKindOfClass:[NSDictionary class]]){
		[self setBlog:[[QXBlog alloc] initWithDictionary:dictBlog]];
	}

	id dictBlogEntry = [dict valueForKey:@"BlogEntry"];
	if ([dictBlogEntry isKindOfClass:[NSDictionary class]]){
		[self setBlogEntry:[[QXBlogEntry alloc] initWithDictionary:dictBlogEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Blog dictionary] forKey:@"Blog"];
	
	[dict setValue:[self.BlogEntry dictionary] forKey:@"BlogEntry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGenerateBlogEntrySlugParams ---
@implementation QXPublicServiceGenerateBlogEntrySlugParams : NSObject

@synthesize Doi;
@synthesize Slug;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setSlug:[dict valueForKey:@"Slug"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.Slug forKey:@"Slug"];

	return dict;
}

@end

// --- QXGenerateBlogEntrySlugResults ---
@implementation QXPublicServiceGenerateBlogEntrySlugResults : NSObject

@synthesize ValidSlug;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidSlug:[dict valueForKey:@"ValidSlug"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ValidSlug forKey:@"ValidSlug"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateNewsletterParams ---
@implementation QXPublicServiceCreateNewsletterParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXNewsletterInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateNewsletterResults ---
@implementation QXPublicServiceCreateNewsletterResults : NSObject

@synthesize Newsletter;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictNewsletter = [dict valueForKey:@"Newsletter"];
	if ([dictNewsletter isKindOfClass:[NSDictionary class]]){
		[self setNewsletter:[[QXNewsletter alloc] initWithDictionary:dictNewsletter]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Newsletter dictionary] forKey:@"Newsletter"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestNewSignupTokenParams ---
@implementation QXPublicServiceRequestNewSignupTokenParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestNewSignupTokenResults ---
@implementation QXPublicServiceRequestNewSignupTokenResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestNewInvitationTokenParams ---
@implementation QXPublicServiceRequestNewInvitationTokenParams : NSObject

@synthesize OrgId;
@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestNewInvitationTokenResults ---
@implementation QXPublicServiceRequestNewInvitationTokenResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestNewSharingTokenParams ---
@implementation QXPublicServiceRequestNewSharingTokenParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestNewSharingTokenResults ---
@implementation QXPublicServiceRequestNewSharingTokenResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXInviteMeParams ---
@implementation QXPublicServiceInviteMeParams : NSObject

@synthesize OrganizationId;
@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrganizationId:[dict valueForKey:@"OrganizationId"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrganizationId forKey:@"OrganizationId"];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXInviteMeResults ---
@implementation QXPublicServiceInviteMeResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestSignupParams ---
@implementation QXPublicServiceRequestSignupParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestSignupResults ---
@implementation QXPublicServiceRequestSignupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end



@implementation QXAuthMemberService : NSObject

- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}


// --- GetNewOrganization ---
- (QXAuthMemberServiceGetNewOrganizationResults *) GetNewOrganization:(NSString *)memberId {
	
	QXAuthMemberServiceGetNewOrganizationResults *results = [QXAuthMemberServiceGetNewOrganizationResults alloc];
	QXAuthMemberServiceGetNewOrganizationParams *params = [[QXAuthMemberServiceGetNewOrganizationParams alloc] init];
	[params setMemberId:memberId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetNewOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getNewOrganization:(NSString *)memberId success:(void (^)(QXAuthMemberServiceGetNewOrganizationResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceGetNewOrganizationResults *results = [QXAuthMemberServiceGetNewOrganizationResults alloc];
		QXAuthMemberServiceGetNewOrganizationParams *params = [[QXAuthMemberServiceGetNewOrganizationParams alloc] init];
		[params setMemberId:memberId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetNewOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceGetNewOrganizationResults *results = [QXAuthMemberServiceGetNewOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetMyOrganizations ---
- (QXAuthMemberServiceGetMyOrganizationsResults *) GetMyOrganizations {
	
	QXAuthMemberServiceGetMyOrganizationsResults *results = [QXAuthMemberServiceGetMyOrganizationsResults alloc];
	QXAuthMemberServiceGetMyOrganizationsParams *params = [[QXAuthMemberServiceGetMyOrganizationsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetMyOrganizations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyOrganizations:(void (^)(QXAuthMemberServiceGetMyOrganizationsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceGetMyOrganizationsResults *results = [QXAuthMemberServiceGetMyOrganizationsResults alloc];
		QXAuthMemberServiceGetMyOrganizationsParams *params = [[QXAuthMemberServiceGetMyOrganizationsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetMyOrganizations.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceGetMyOrganizationsResults *results = [QXAuthMemberServiceGetMyOrganizationsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateOrganization ---
- (QXAuthMemberServiceCreateOrganizationResults *) CreateOrganization:(QXOrganizationInput *)input {
	
	QXAuthMemberServiceCreateOrganizationResults *results = [QXAuthMemberServiceCreateOrganizationResults alloc];
	QXAuthMemberServiceCreateOrganizationParams *params = [[QXAuthMemberServiceCreateOrganizationParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/CreateOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createOrganization:(QXOrganizationInput *)input success:(void (^)(QXAuthMemberServiceCreateOrganizationResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceCreateOrganizationResults *results = [QXAuthMemberServiceCreateOrganizationResults alloc];
		QXAuthMemberServiceCreateOrganizationParams *params = [[QXAuthMemberServiceCreateOrganizationParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/CreateOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceCreateOrganizationResults *results = [QXAuthMemberServiceCreateOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- JoinOrganization ---
- (NSError *) JoinOrganization:(NSString *)orgId {
	
	QXAuthMemberServiceJoinOrganizationResults *results = [QXAuthMemberServiceJoinOrganizationResults alloc];
	QXAuthMemberServiceJoinOrganizationParams *params = [[QXAuthMemberServiceJoinOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/JoinOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) joinOrganization:(NSString *)orgId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceJoinOrganizationResults *results = [QXAuthMemberServiceJoinOrganizationResults alloc];
		QXAuthMemberServiceJoinOrganizationParams *params = [[QXAuthMemberServiceJoinOrganizationParams alloc] init];
		[params setOrgId:orgId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/JoinOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceJoinOrganizationResults *results = [QXAuthMemberServiceJoinOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- LeaveOrganization ---
- (NSError *) LeaveOrganization:(NSString *)orgId {
	
	QXAuthMemberServiceLeaveOrganizationResults *results = [QXAuthMemberServiceLeaveOrganizationResults alloc];
	QXAuthMemberServiceLeaveOrganizationParams *params = [[QXAuthMemberServiceLeaveOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/LeaveOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) leaveOrganization:(NSString *)orgId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceLeaveOrganizationResults *results = [QXAuthMemberServiceLeaveOrganizationResults alloc];
		QXAuthMemberServiceLeaveOrganizationParams *params = [[QXAuthMemberServiceLeaveOrganizationParams alloc] init];
		[params setOrgId:orgId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/LeaveOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceLeaveOrganizationResults *results = [QXAuthMemberServiceLeaveOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- SwitchOrganization ---
- (NSError *) SwitchOrganization:(NSString *)orgId {
	
	QXAuthMemberServiceSwitchOrganizationResults *results = [QXAuthMemberServiceSwitchOrganizationResults alloc];
	QXAuthMemberServiceSwitchOrganizationParams *params = [[QXAuthMemberServiceSwitchOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/SwitchOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) switchOrganization:(NSString *)orgId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceSwitchOrganizationResults *results = [QXAuthMemberServiceSwitchOrganizationResults alloc];
		QXAuthMemberServiceSwitchOrganizationParams *params = [[QXAuthMemberServiceSwitchOrganizationParams alloc] init];
		[params setOrgId:orgId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/SwitchOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceSwitchOrganizationResults *results = [QXAuthMemberServiceSwitchOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetAbandonInfo ---
- (QXAuthMemberServiceGetAbandonInfoResults *) GetAbandonInfo:(NSString *)abandonOrgId memberId:(NSString *)memberId {
	
	QXAuthMemberServiceGetAbandonInfoResults *results = [QXAuthMemberServiceGetAbandonInfoResults alloc];
	QXAuthMemberServiceGetAbandonInfoParams *params = [[QXAuthMemberServiceGetAbandonInfoParams alloc] init];
	[params setAbandonOrgId:abandonOrgId];
	[params setMemberId:memberId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetAbandonInfo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getAbandonInfo:(NSString *)abandonOrgId memberId:(NSString *)memberId success:(void (^)(QXAuthMemberServiceGetAbandonInfoResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceGetAbandonInfoResults *results = [QXAuthMemberServiceGetAbandonInfoResults alloc];
		QXAuthMemberServiceGetAbandonInfoParams *params = [[QXAuthMemberServiceGetAbandonInfoParams alloc] init];
		[params setAbandonOrgId:abandonOrgId];
		[params setMemberId:memberId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetAbandonInfo.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceGetAbandonInfoResults *results = [QXAuthMemberServiceGetAbandonInfoResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetShareRequest ---
- (QXAuthMemberServiceGetShareRequestResults *) GetShareRequest:(NSString *)token {
	
	QXAuthMemberServiceGetShareRequestResults *results = [QXAuthMemberServiceGetShareRequestResults alloc];
	QXAuthMemberServiceGetShareRequestParams *params = [[QXAuthMemberServiceGetShareRequestParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetShareRequest.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getShareRequest:(NSString *)token success:(void (^)(QXAuthMemberServiceGetShareRequestResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceGetShareRequestResults *results = [QXAuthMemberServiceGetShareRequestResults alloc];
		QXAuthMemberServiceGetShareRequestParams *params = [[QXAuthMemberServiceGetShareRequestParams alloc] init];
		[params setToken:token];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetShareRequest.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceGetShareRequestResults *results = [QXAuthMemberServiceGetShareRequestResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- RejectShareRequestByInvitee ---
- (NSError *) RejectShareRequestByInvitee:(NSString *)token {
	
	QXAuthMemberServiceRejectShareRequestByInviteeResults *results = [QXAuthMemberServiceRejectShareRequestByInviteeResults alloc];
	QXAuthMemberServiceRejectShareRequestByInviteeParams *params = [[QXAuthMemberServiceRejectShareRequestByInviteeParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/RejectShareRequestByInvitee.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) rejectShareRequestByInvitee:(NSString *)token success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceRejectShareRequestByInviteeResults *results = [QXAuthMemberServiceRejectShareRequestByInviteeResults alloc];
		QXAuthMemberServiceRejectShareRequestByInviteeParams *params = [[QXAuthMemberServiceRejectShareRequestByInviteeParams alloc] init];
		[params setToken:token];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/RejectShareRequestByInvitee.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceRejectShareRequestByInviteeResults *results = [QXAuthMemberServiceRejectShareRequestByInviteeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- AcceptShareRequestByInvitee ---
- (NSError *) AcceptShareRequestByInvitee:(NSString *)token toOrgId:(NSString *)toOrgId {
	
	QXAuthMemberServiceAcceptShareRequestByInviteeResults *results = [QXAuthMemberServiceAcceptShareRequestByInviteeResults alloc];
	QXAuthMemberServiceAcceptShareRequestByInviteeParams *params = [[QXAuthMemberServiceAcceptShareRequestByInviteeParams alloc] init];
	[params setToken:token];
	[params setToOrgId:toOrgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/AcceptShareRequestByInvitee.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) acceptShareRequestByInvitee:(NSString *)token toOrgId:(NSString *)toOrgId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthMemberServiceAcceptShareRequestByInviteeResults *results = [QXAuthMemberServiceAcceptShareRequestByInviteeResults alloc];
		QXAuthMemberServiceAcceptShareRequestByInviteeParams *params = [[QXAuthMemberServiceAcceptShareRequestByInviteeParams alloc] init];
		[params setToken:token];
		[params setToOrgId:toOrgId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/AcceptShareRequestByInvitee.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthMemberServiceAcceptShareRequestByInviteeResults *results = [QXAuthMemberServiceAcceptShareRequestByInviteeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}
@end

@implementation QXAuthAdminService : NSObject


@synthesize Session;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];

	return dict;
}



// --- GetTotalStats ---
- (QXAuthAdminServiceGetTotalStatsResults *) GetTotalStats {
	
	QXAuthAdminServiceGetTotalStatsResults *results = [QXAuthAdminServiceGetTotalStatsResults alloc];
	QXAuthAdminServiceGetTotalStatsParams *params = [[QXAuthAdminServiceGetTotalStatsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetTotalStats.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getTotalStats:(void (^)(QXAuthAdminServiceGetTotalStatsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetTotalStatsResults *results = [QXAuthAdminServiceGetTotalStatsResults alloc];
		QXAuthAdminServiceGetTotalStatsParams *params = [[QXAuthAdminServiceGetTotalStatsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetTotalStats.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetTotalStatsResults *results = [QXAuthAdminServiceGetTotalStatsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetWeeklyTotalStats ---
- (QXAuthAdminServiceGetWeeklyTotalStatsResults *) GetWeeklyTotalStats {
	
	QXAuthAdminServiceGetWeeklyTotalStatsResults *results = [QXAuthAdminServiceGetWeeklyTotalStatsResults alloc];
	QXAuthAdminServiceGetWeeklyTotalStatsParams *params = [[QXAuthAdminServiceGetWeeklyTotalStatsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetWeeklyTotalStats.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getWeeklyTotalStats:(void (^)(QXAuthAdminServiceGetWeeklyTotalStatsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetWeeklyTotalStatsResults *results = [QXAuthAdminServiceGetWeeklyTotalStatsResults alloc];
		QXAuthAdminServiceGetWeeklyTotalStatsParams *params = [[QXAuthAdminServiceGetWeeklyTotalStatsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetWeeklyTotalStats.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetWeeklyTotalStatsResults *results = [QXAuthAdminServiceGetWeeklyTotalStatsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOrgStats ---
- (QXAuthAdminServiceGetOrgStatsResults *) GetOrgStats {
	
	QXAuthAdminServiceGetOrgStatsResults *results = [QXAuthAdminServiceGetOrgStatsResults alloc];
	QXAuthAdminServiceGetOrgStatsParams *params = [[QXAuthAdminServiceGetOrgStatsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetOrgStats.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOrgStats:(void (^)(QXAuthAdminServiceGetOrgStatsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetOrgStatsResults *results = [QXAuthAdminServiceGetOrgStatsResults alloc];
		QXAuthAdminServiceGetOrgStatsParams *params = [[QXAuthAdminServiceGetOrgStatsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetOrgStats.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetOrgStatsResults *results = [QXAuthAdminServiceGetOrgStatsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetAccessRequests ---
- (QXAuthAdminServiceGetAccessRequestsResults *) GetAccessRequests {
	
	QXAuthAdminServiceGetAccessRequestsResults *results = [QXAuthAdminServiceGetAccessRequestsResults alloc];
	QXAuthAdminServiceGetAccessRequestsParams *params = [[QXAuthAdminServiceGetAccessRequestsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAccessRequests.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getAccessRequests:(void (^)(QXAuthAdminServiceGetAccessRequestsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetAccessRequestsResults *results = [QXAuthAdminServiceGetAccessRequestsResults alloc];
		QXAuthAdminServiceGetAccessRequestsParams *params = [[QXAuthAdminServiceGetAccessRequestsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAccessRequests.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetAccessRequestsResults *results = [QXAuthAdminServiceGetAccessRequestsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ApproveAccess ---
- (NSError *) ApproveAccess:(NSString *)email {
	
	QXAuthAdminServiceApproveAccessResults *results = [QXAuthAdminServiceApproveAccessResults alloc];
	QXAuthAdminServiceApproveAccessParams *params = [[QXAuthAdminServiceApproveAccessParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/ApproveAccess.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) approveAccess:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceApproveAccessResults *results = [QXAuthAdminServiceApproveAccessResults alloc];
		QXAuthAdminServiceApproveAccessParams *params = [[QXAuthAdminServiceApproveAccessParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/ApproveAccess.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceApproveAccessResults *results = [QXAuthAdminServiceApproveAccessResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- ResendApprovedMail ---
- (NSError *) ResendApprovedMail:(NSString *)email {
	
	QXAuthAdminServiceResendApprovedMailResults *results = [QXAuthAdminServiceResendApprovedMailResults alloc];
	QXAuthAdminServiceResendApprovedMailParams *params = [[QXAuthAdminServiceResendApprovedMailParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/ResendApprovedMail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) resendApprovedMail:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceResendApprovedMailResults *results = [QXAuthAdminServiceResendApprovedMailResults alloc];
		QXAuthAdminServiceResendApprovedMailParams *params = [[QXAuthAdminServiceResendApprovedMailParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/ResendApprovedMail.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceResendApprovedMailResults *results = [QXAuthAdminServiceResendApprovedMailResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetAllMembers ---
- (QXAuthAdminServiceGetAllMembersResults *) GetAllMembers {
	
	QXAuthAdminServiceGetAllMembersResults *results = [QXAuthAdminServiceGetAllMembersResults alloc];
	QXAuthAdminServiceGetAllMembersParams *params = [[QXAuthAdminServiceGetAllMembersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAllMembers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getAllMembers:(void (^)(QXAuthAdminServiceGetAllMembersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetAllMembersResults *results = [QXAuthAdminServiceGetAllMembersResults alloc];
		QXAuthAdminServiceGetAllMembersParams *params = [[QXAuthAdminServiceGetAllMembersParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAllMembers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetAllMembersResults *results = [QXAuthAdminServiceGetAllMembersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- IgnoreAccess ---
- (NSError *) IgnoreAccess:(NSString *)email {
	
	QXAuthAdminServiceIgnoreAccessResults *results = [QXAuthAdminServiceIgnoreAccessResults alloc];
	QXAuthAdminServiceIgnoreAccessParams *params = [[QXAuthAdminServiceIgnoreAccessParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/IgnoreAccess.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) ignoreAccess:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceIgnoreAccessResults *results = [QXAuthAdminServiceIgnoreAccessResults alloc];
		QXAuthAdminServiceIgnoreAccessParams *params = [[QXAuthAdminServiceIgnoreAccessParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/IgnoreAccess.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceIgnoreAccessResults *results = [QXAuthAdminServiceIgnoreAccessResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetAutoApproveAccess ---
- (QXAuthAdminServiceGetAutoApproveAccessResults *) GetAutoApproveAccess {
	
	QXAuthAdminServiceGetAutoApproveAccessResults *results = [QXAuthAdminServiceGetAutoApproveAccessResults alloc];
	QXAuthAdminServiceGetAutoApproveAccessParams *params = [[QXAuthAdminServiceGetAutoApproveAccessParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAutoApproveAccess.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getAutoApproveAccess:(void (^)(QXAuthAdminServiceGetAutoApproveAccessResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetAutoApproveAccessResults *results = [QXAuthAdminServiceGetAutoApproveAccessResults alloc];
		QXAuthAdminServiceGetAutoApproveAccessParams *params = [[QXAuthAdminServiceGetAutoApproveAccessParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAutoApproveAccess.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetAutoApproveAccessResults *results = [QXAuthAdminServiceGetAutoApproveAccessResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- SetAutoApproveAccess ---
- (NSError *) SetAutoApproveAccess:(BOOL)enable {
	
	QXAuthAdminServiceSetAutoApproveAccessResults *results = [QXAuthAdminServiceSetAutoApproveAccessResults alloc];
	QXAuthAdminServiceSetAutoApproveAccessParams *params = [[QXAuthAdminServiceSetAutoApproveAccessParams alloc] init];
	[params setEnable:enable];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/SetAutoApproveAccess.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) setAutoApproveAccess:(BOOL)enable success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceSetAutoApproveAccessResults *results = [QXAuthAdminServiceSetAutoApproveAccessResults alloc];
		QXAuthAdminServiceSetAutoApproveAccessParams *params = [[QXAuthAdminServiceSetAutoApproveAccessParams alloc] init];
		[params setEnable:enable];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/SetAutoApproveAccess.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceSetAutoApproveAccessResults *results = [QXAuthAdminServiceSetAutoApproveAccessResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetMarketableUsers ---
- (QXAuthAdminServiceGetMarketableUsersResults *) GetMarketableUsers {
	
	QXAuthAdminServiceGetMarketableUsersResults *results = [QXAuthAdminServiceGetMarketableUsersResults alloc];
	QXAuthAdminServiceGetMarketableUsersParams *params = [[QXAuthAdminServiceGetMarketableUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetMarketableUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMarketableUsers:(void (^)(QXAuthAdminServiceGetMarketableUsersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetMarketableUsersResults *results = [QXAuthAdminServiceGetMarketableUsersResults alloc];
		QXAuthAdminServiceGetMarketableUsersParams *params = [[QXAuthAdminServiceGetMarketableUsersParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetMarketableUsers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetMarketableUsersResults *results = [QXAuthAdminServiceGetMarketableUsersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetTotalOnlineUsers ---
- (QXAuthAdminServiceGetTotalOnlineUsersResults *) GetTotalOnlineUsers {
	
	QXAuthAdminServiceGetTotalOnlineUsersResults *results = [QXAuthAdminServiceGetTotalOnlineUsersResults alloc];
	QXAuthAdminServiceGetTotalOnlineUsersParams *params = [[QXAuthAdminServiceGetTotalOnlineUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetTotalOnlineUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getTotalOnlineUsers:(void (^)(QXAuthAdminServiceGetTotalOnlineUsersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthAdminServiceGetTotalOnlineUsersResults *results = [QXAuthAdminServiceGetTotalOnlineUsersResults alloc];
		QXAuthAdminServiceGetTotalOnlineUsersParams *params = [[QXAuthAdminServiceGetTotalOnlineUsersParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetTotalOnlineUsers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthAdminServiceGetTotalOnlineUsersResults *results = [QXAuthAdminServiceGetTotalOnlineUsersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}
@end

@implementation QXAuthUserService : NSObject


@synthesize Session;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];

	return dict;
}



// --- GetNewEntry ---
- (QXAuthUserServiceGetNewEntryResults *) GetNewEntry:(NSString *)groupId {
	
	QXAuthUserServiceGetNewEntryResults *results = [QXAuthUserServiceGetNewEntryResults alloc];
	QXAuthUserServiceGetNewEntryParams *params = [[QXAuthUserServiceGetNewEntryParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getNewEntry:(NSString *)groupId success:(void (^)(QXAuthUserServiceGetNewEntryResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetNewEntryResults *results = [QXAuthUserServiceGetNewEntryResults alloc];
		QXAuthUserServiceGetNewEntryParams *params = [[QXAuthUserServiceGetNewEntryParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetNewEntryResults *results = [QXAuthUserServiceGetNewEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetNewChatEntry ---
- (QXAuthUserServiceGetNewChatEntryResults *) GetNewChatEntry:(NSString *)chatId {
	
	QXAuthUserServiceGetNewChatEntryResults *results = [QXAuthUserServiceGetNewChatEntryResults alloc];
	QXAuthUserServiceGetNewChatEntryParams *params = [[QXAuthUserServiceGetNewChatEntryParams alloc] init];
	[params setChatId:chatId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewChatEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getNewChatEntry:(NSString *)chatId success:(void (^)(QXAuthUserServiceGetNewChatEntryResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetNewChatEntryResults *results = [QXAuthUserServiceGetNewChatEntryResults alloc];
		QXAuthUserServiceGetNewChatEntryParams *params = [[QXAuthUserServiceGetNewChatEntryParams alloc] init];
		[params setChatId:chatId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewChatEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetNewChatEntryResults *results = [QXAuthUserServiceGetNewChatEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetQortexSupportEntries ---
- (QXAuthUserServiceGetQortexSupportEntriesResults *) GetQortexSupportEntries:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments {
	
	QXAuthUserServiceGetQortexSupportEntriesResults *results = [QXAuthUserServiceGetQortexSupportEntriesResults alloc];
	QXAuthUserServiceGetQortexSupportEntriesParams *params = [[QXAuthUserServiceGetQortexSupportEntriesParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	[params setWithComments:withComments];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupportEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getQortexSupportEntries:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments success:(void (^)(QXAuthUserServiceGetQortexSupportEntriesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetQortexSupportEntriesResults *results = [QXAuthUserServiceGetQortexSupportEntriesResults alloc];
		QXAuthUserServiceGetQortexSupportEntriesParams *params = [[QXAuthUserServiceGetQortexSupportEntriesParams alloc] init];
		[params setBefore:before];
		[params setLimit:limit];
		[params setWithComments:withComments];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupportEntries.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetQortexSupportEntriesResults *results = [QXAuthUserServiceGetQortexSupportEntriesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateEntry ---
- (QXAuthUserServiceCreateEntryResults *) CreateEntry:(QXEntryInput *)input {
	
	QXAuthUserServiceCreateEntryResults *results = [QXAuthUserServiceCreateEntryResults alloc];
	QXAuthUserServiceCreateEntryParams *params = [[QXAuthUserServiceCreateEntryParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createEntry:(QXEntryInput *)input success:(void (^)(QXAuthUserServiceCreateEntryResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCreateEntryResults *results = [QXAuthUserServiceCreateEntryResults alloc];
		QXAuthUserServiceCreateEntryParams *params = [[QXAuthUserServiceCreateEntryParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCreateEntryResults *results = [QXAuthUserServiceCreateEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateTask ---
- (QXAuthUserServiceCreateTaskResults *) CreateTask:(QXEntryInput *)input {
	
	QXAuthUserServiceCreateTaskResults *results = [QXAuthUserServiceCreateTaskResults alloc];
	QXAuthUserServiceCreateTaskParams *params = [[QXAuthUserServiceCreateTaskParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createTask:(QXEntryInput *)input success:(void (^)(QXAuthUserServiceCreateTaskResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCreateTaskResults *results = [QXAuthUserServiceCreateTaskResults alloc];
		QXAuthUserServiceCreateTaskParams *params = [[QXAuthUserServiceCreateTaskParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateTask.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCreateTaskResults *results = [QXAuthUserServiceCreateTaskResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CloseTask ---
- (QXAuthUserServiceCloseTaskResults *) CloseTask:(NSString *)entryId groupId:(NSString *)groupId taskId:(NSString *)taskId {
	
	QXAuthUserServiceCloseTaskResults *results = [QXAuthUserServiceCloseTaskResults alloc];
	QXAuthUserServiceCloseTaskParams *params = [[QXAuthUserServiceCloseTaskParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setTaskId:taskId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CloseTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) closeTask:(NSString *)entryId groupId:(NSString *)groupId taskId:(NSString *)taskId success:(void (^)(QXAuthUserServiceCloseTaskResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCloseTaskResults *results = [QXAuthUserServiceCloseTaskResults alloc];
		QXAuthUserServiceCloseTaskParams *params = [[QXAuthUserServiceCloseTaskParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		[params setTaskId:taskId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CloseTask.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCloseTaskResults *results = [QXAuthUserServiceCloseTaskResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateComment ---
- (QXAuthUserServiceCreateCommentResults *) CreateComment:(QXEntryInput *)input {
	
	QXAuthUserServiceCreateCommentResults *results = [QXAuthUserServiceCreateCommentResults alloc];
	QXAuthUserServiceCreateCommentParams *params = [[QXAuthUserServiceCreateCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createComment:(QXEntryInput *)input success:(void (^)(QXAuthUserServiceCreateCommentResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCreateCommentResults *results = [QXAuthUserServiceCreateCommentResults alloc];
		QXAuthUserServiceCreateCommentParams *params = [[QXAuthUserServiceCreateCommentParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateComment.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCreateCommentResults *results = [QXAuthUserServiceCreateCommentResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetComment ---
- (QXAuthUserServiceGetCommentResults *) GetComment:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetCommentResults *results = [QXAuthUserServiceGetCommentResults alloc];
	QXAuthUserServiceGetCommentParams *params = [[QXAuthUserServiceGetCommentParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getComment:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceGetCommentResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetCommentResults *results = [QXAuthUserServiceGetCommentResults alloc];
		QXAuthUserServiceGetCommentParams *params = [[QXAuthUserServiceGetCommentParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetComment.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetCommentResults *results = [QXAuthUserServiceGetCommentResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateComment ---
- (QXAuthUserServiceUpdateCommentResults *) UpdateComment:(QXEntryInput *)input {
	
	QXAuthUserServiceUpdateCommentResults *results = [QXAuthUserServiceUpdateCommentResults alloc];
	QXAuthUserServiceUpdateCommentParams *params = [[QXAuthUserServiceUpdateCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateComment:(QXEntryInput *)input success:(void (^)(QXAuthUserServiceUpdateCommentResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateCommentResults *results = [QXAuthUserServiceUpdateCommentResults alloc];
		QXAuthUserServiceUpdateCommentParams *params = [[QXAuthUserServiceUpdateCommentParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateComment.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateCommentResults *results = [QXAuthUserServiceUpdateCommentResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateEntry ---
- (QXAuthUserServiceUpdateEntryResults *) UpdateEntry:(QXEntryInput *)input {
	
	QXAuthUserServiceUpdateEntryResults *results = [QXAuthUserServiceUpdateEntryResults alloc];
	QXAuthUserServiceUpdateEntryParams *params = [[QXAuthUserServiceUpdateEntryParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateEntry:(QXEntryInput *)input success:(void (^)(QXAuthUserServiceUpdateEntryResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateEntryResults *results = [QXAuthUserServiceUpdateEntryResults alloc];
		QXAuthUserServiceUpdateEntryParams *params = [[QXAuthUserServiceUpdateEntryParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateEntryResults *results = [QXAuthUserServiceUpdateEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetLatestUpdatedEntryIdByTitle ---
- (QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults *) GetLatestUpdatedEntryIdByTitle:(NSString *)title groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults *results = [QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults alloc];
	QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams *params = [[QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams alloc] init];
	[params setTitle:title];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetLatestUpdatedEntryIdByTitle.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getLatestUpdatedEntryIdByTitle:(NSString *)title groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults *results = [QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults alloc];
		QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams *params = [[QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams alloc] init];
		[params setTitle:title];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetLatestUpdatedEntryIdByTitle.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults *results = [QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetEntry ---
- (QXAuthUserServiceGetEntryResults *) GetEntry:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion hightlightKeywords:(NSString *)hightlightKeywords {
	
	QXAuthUserServiceGetEntryResults *results = [QXAuthUserServiceGetEntryResults alloc];
	QXAuthUserServiceGetEntryParams *params = [[QXAuthUserServiceGetEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
	[params setHightlightKeywords:hightlightKeywords];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getEntry:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion hightlightKeywords:(NSString *)hightlightKeywords success:(void (^)(QXAuthUserServiceGetEntryResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetEntryResults *results = [QXAuthUserServiceGetEntryResults alloc];
		QXAuthUserServiceGetEntryParams *params = [[QXAuthUserServiceGetEntryParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
		[params setHightlightKeywords:hightlightKeywords];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetEntryResults *results = [QXAuthUserServiceGetEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- DeleteEntry ---
- (QXAuthUserServiceDeleteEntryResults *) DeleteEntry:(NSString *)entryId groupId:(NSString *)groupId dType:(NSString *)dType {
	
	QXAuthUserServiceDeleteEntryResults *results = [QXAuthUserServiceDeleteEntryResults alloc];
	QXAuthUserServiceDeleteEntryParams *params = [[QXAuthUserServiceDeleteEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setDType:dType];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) deleteEntry:(NSString *)entryId groupId:(NSString *)groupId dType:(NSString *)dType success:(void (^)(QXAuthUserServiceDeleteEntryResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDeleteEntryResults *results = [QXAuthUserServiceDeleteEntryResults alloc];
		QXAuthUserServiceDeleteEntryParams *params = [[QXAuthUserServiceDeleteEntryParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		[params setDType:dType];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDeleteEntryResults *results = [QXAuthUserServiceDeleteEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- MuteEntry ---
- (NSError *) MuteEntry:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceMuteEntryResults *results = [QXAuthUserServiceMuteEntryResults alloc];
	QXAuthUserServiceMuteEntryParams *params = [[QXAuthUserServiceMuteEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MuteEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) muteEntry:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceMuteEntryResults *results = [QXAuthUserServiceMuteEntryResults alloc];
		QXAuthUserServiceMuteEntryParams *params = [[QXAuthUserServiceMuteEntryParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MuteEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceMuteEntryResults *results = [QXAuthUserServiceMuteEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- UndoMuteEntry ---
- (NSError *) UndoMuteEntry:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceUndoMuteEntryResults *results = [QXAuthUserServiceUndoMuteEntryResults alloc];
	QXAuthUserServiceUndoMuteEntryParams *params = [[QXAuthUserServiceUndoMuteEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UndoMuteEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) undoMuteEntry:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUndoMuteEntryResults *results = [QXAuthUserServiceUndoMuteEntryResults alloc];
		QXAuthUserServiceUndoMuteEntryParams *params = [[QXAuthUserServiceUndoMuteEntryParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UndoMuteEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUndoMuteEntryResults *results = [QXAuthUserServiceUndoMuteEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetMachineTranslatableLangauges ---
- (QXAuthUserServiceGetMachineTranslatableLangaugesResults *) GetMachineTranslatableLangauges {
	
	QXAuthUserServiceGetMachineTranslatableLangaugesResults *results = [QXAuthUserServiceGetMachineTranslatableLangaugesResults alloc];
	QXAuthUserServiceGetMachineTranslatableLangaugesParams *params = [[QXAuthUserServiceGetMachineTranslatableLangaugesParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMachineTranslatableLangauges.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMachineTranslatableLangauges:(void (^)(QXAuthUserServiceGetMachineTranslatableLangaugesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMachineTranslatableLangaugesResults *results = [QXAuthUserServiceGetMachineTranslatableLangaugesResults alloc];
		QXAuthUserServiceGetMachineTranslatableLangaugesParams *params = [[QXAuthUserServiceGetMachineTranslatableLangaugesParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMachineTranslatableLangauges.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMachineTranslatableLangaugesResults *results = [QXAuthUserServiceGetMachineTranslatableLangaugesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- MachineTranslate ---
- (QXAuthUserServiceMachineTranslateResults *) MachineTranslate:(NSString *)entryId groupId:(NSString *)groupId targetlang:(NSString *)targetlang {
	
	QXAuthUserServiceMachineTranslateResults *results = [QXAuthUserServiceMachineTranslateResults alloc];
	QXAuthUserServiceMachineTranslateParams *params = [[QXAuthUserServiceMachineTranslateParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setTargetlang:targetlang];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MachineTranslate.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) machineTranslate:(NSString *)entryId groupId:(NSString *)groupId targetlang:(NSString *)targetlang success:(void (^)(QXAuthUserServiceMachineTranslateResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceMachineTranslateResults *results = [QXAuthUserServiceMachineTranslateResults alloc];
		QXAuthUserServiceMachineTranslateParams *params = [[QXAuthUserServiceMachineTranslateParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		[params setTargetlang:targetlang];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MachineTranslate.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceMachineTranslateResults *results = [QXAuthUserServiceMachineTranslateResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- OriginalThread ---
- (QXAuthUserServiceOriginalThreadResults *) OriginalThread:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceOriginalThreadResults *results = [QXAuthUserServiceOriginalThreadResults alloc];
	QXAuthUserServiceOriginalThreadParams *params = [[QXAuthUserServiceOriginalThreadParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/OriginalThread.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) originalThread:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceOriginalThreadResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceOriginalThreadResults *results = [QXAuthUserServiceOriginalThreadResults alloc];
		QXAuthUserServiceOriginalThreadParams *params = [[QXAuthUserServiceOriginalThreadParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/OriginalThread.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceOriginalThreadResults *results = [QXAuthUserServiceOriginalThreadResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetEntryAttachments ---
- (QXAuthUserServiceGetEntryAttachmentsResults *) GetEntryAttachments:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetEntryAttachmentsResults *results = [QXAuthUserServiceGetEntryAttachmentsResults alloc];
	QXAuthUserServiceGetEntryAttachmentsParams *params = [[QXAuthUserServiceGetEntryAttachmentsParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetEntryAttachments.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getEntryAttachments:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceGetEntryAttachmentsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetEntryAttachmentsResults *results = [QXAuthUserServiceGetEntryAttachmentsResults alloc];
		QXAuthUserServiceGetEntryAttachmentsParams *params = [[QXAuthUserServiceGetEntryAttachmentsParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetEntryAttachments.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetEntryAttachmentsResults *results = [QXAuthUserServiceGetEntryAttachmentsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetDocViewSession ---
- (QXAuthUserServiceGetDocViewSessionResults *) GetDocViewSession:(NSString *)doi groupId:(NSString *)groupId attachmentId:(NSString *)attachmentId {
	
	QXAuthUserServiceGetDocViewSessionResults *results = [QXAuthUserServiceGetDocViewSessionResults alloc];
	QXAuthUserServiceGetDocViewSessionParams *params = [[QXAuthUserServiceGetDocViewSessionParams alloc] init];
	[params setDoi:doi];
	[params setGroupId:groupId];
	[params setAttachmentId:attachmentId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDocViewSession.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getDocViewSession:(NSString *)doi groupId:(NSString *)groupId attachmentId:(NSString *)attachmentId success:(void (^)(QXAuthUserServiceGetDocViewSessionResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetDocViewSessionResults *results = [QXAuthUserServiceGetDocViewSessionResults alloc];
		QXAuthUserServiceGetDocViewSessionParams *params = [[QXAuthUserServiceGetDocViewSessionParams alloc] init];
		[params setDoi:doi];
		[params setGroupId:groupId];
		[params setAttachmentId:attachmentId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDocViewSession.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetDocViewSessionResults *results = [QXAuthUserServiceGetDocViewSessionResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- DeleteEntryAttachment ---
- (QXAuthUserServiceDeleteEntryAttachmentResults *) DeleteEntryAttachment:(NSString *)doi groupId:(NSString *)groupId attachmentId:(NSString *)attachmentId ownerId:(NSString *)ownerId {
	
	QXAuthUserServiceDeleteEntryAttachmentResults *results = [QXAuthUserServiceDeleteEntryAttachmentResults alloc];
	QXAuthUserServiceDeleteEntryAttachmentParams *params = [[QXAuthUserServiceDeleteEntryAttachmentParams alloc] init];
	[params setDoi:doi];
	[params setGroupId:groupId];
	[params setAttachmentId:attachmentId];
	[params setOwnerId:ownerId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteEntryAttachment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) deleteEntryAttachment:(NSString *)doi groupId:(NSString *)groupId attachmentId:(NSString *)attachmentId ownerId:(NSString *)ownerId success:(void (^)(QXAuthUserServiceDeleteEntryAttachmentResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDeleteEntryAttachmentResults *results = [QXAuthUserServiceDeleteEntryAttachmentResults alloc];
		QXAuthUserServiceDeleteEntryAttachmentParams *params = [[QXAuthUserServiceDeleteEntryAttachmentParams alloc] init];
		[params setDoi:doi];
		[params setGroupId:groupId];
		[params setAttachmentId:attachmentId];
		[params setOwnerId:ownerId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteEntryAttachment.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDeleteEntryAttachmentResults *results = [QXAuthUserServiceDeleteEntryAttachmentResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOtherVersionsComments ---
- (QXAuthUserServiceGetOtherVersionsCommentsResults *) GetOtherVersionsComments:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion {
	
	QXAuthUserServiceGetOtherVersionsCommentsResults *results = [QXAuthUserServiceGetOtherVersionsCommentsResults alloc];
	QXAuthUserServiceGetOtherVersionsCommentsParams *params = [[QXAuthUserServiceGetOtherVersionsCommentsParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOtherVersionsComments.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOtherVersionsComments:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion success:(void (^)(QXAuthUserServiceGetOtherVersionsCommentsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOtherVersionsCommentsResults *results = [QXAuthUserServiceGetOtherVersionsCommentsResults alloc];
		QXAuthUserServiceGetOtherVersionsCommentsParams *params = [[QXAuthUserServiceGetOtherVersionsCommentsParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOtherVersionsComments.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOtherVersionsCommentsResults *results = [QXAuthUserServiceGetOtherVersionsCommentsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOtherVersionsTaskLogs ---
- (QXAuthUserServiceGetOtherVersionsTaskLogsResults *) GetOtherVersionsTaskLogs:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion {
	
	QXAuthUserServiceGetOtherVersionsTaskLogsResults *results = [QXAuthUserServiceGetOtherVersionsTaskLogsResults alloc];
	QXAuthUserServiceGetOtherVersionsTaskLogsParams *params = [[QXAuthUserServiceGetOtherVersionsTaskLogsParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOtherVersionsTaskLogs.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOtherVersionsTaskLogs:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion success:(void (^)(QXAuthUserServiceGetOtherVersionsTaskLogsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOtherVersionsTaskLogsResults *results = [QXAuthUserServiceGetOtherVersionsTaskLogsResults alloc];
		QXAuthUserServiceGetOtherVersionsTaskLogsParams *params = [[QXAuthUserServiceGetOtherVersionsTaskLogsParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOtherVersionsTaskLogs.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOtherVersionsTaskLogsResults *results = [QXAuthUserServiceGetOtherVersionsTaskLogsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetGroupEntries ---
- (QXAuthUserServiceGetGroupEntriesResults *) GetGroupEntries:(NSString *)groupId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments {
	
	QXAuthUserServiceGetGroupEntriesResults *results = [QXAuthUserServiceGetGroupEntriesResults alloc];
	QXAuthUserServiceGetGroupEntriesParams *params = [[QXAuthUserServiceGetGroupEntriesParams alloc] init];
	[params setGroupId:groupId];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	[params setWithComments:withComments];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getGroupEntries:(NSString *)groupId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments success:(void (^)(QXAuthUserServiceGetGroupEntriesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetGroupEntriesResults *results = [QXAuthUserServiceGetGroupEntriesResults alloc];
		QXAuthUserServiceGetGroupEntriesParams *params = [[QXAuthUserServiceGetGroupEntriesParams alloc] init];
		[params setGroupId:groupId];
		[params setEntryType:entryType];
		[params setBefore:before];
		[params setLimit:limit];
		[params setWithComments:withComments];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupEntries.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetGroupEntriesResults *results = [QXAuthUserServiceGetGroupEntriesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetMyFeedEntries ---
- (QXAuthUserServiceGetMyFeedEntriesResults *) GetMyFeedEntries:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments {
	
	QXAuthUserServiceGetMyFeedEntriesResults *results = [QXAuthUserServiceGetMyFeedEntriesResults alloc];
	QXAuthUserServiceGetMyFeedEntriesParams *params = [[QXAuthUserServiceGetMyFeedEntriesParams alloc] init];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	[params setWithComments:withComments];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyFeedEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyFeedEntries:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments success:(void (^)(QXAuthUserServiceGetMyFeedEntriesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMyFeedEntriesResults *results = [QXAuthUserServiceGetMyFeedEntriesResults alloc];
		QXAuthUserServiceGetMyFeedEntriesParams *params = [[QXAuthUserServiceGetMyFeedEntriesParams alloc] init];
		[params setEntryType:entryType];
		[params setBefore:before];
		[params setLimit:limit];
		[params setWithComments:withComments];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyFeedEntries.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMyFeedEntriesResults *results = [QXAuthUserServiceGetMyFeedEntriesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetGroupAside ---
- (QXAuthUserServiceGetGroupAsideResults *) GetGroupAside {
	
	QXAuthUserServiceGetGroupAsideResults *results = [QXAuthUserServiceGetGroupAsideResults alloc];
	QXAuthUserServiceGetGroupAsideParams *params = [[QXAuthUserServiceGetGroupAsideParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupAside.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getGroupAside:(void (^)(QXAuthUserServiceGetGroupAsideResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetGroupAsideResults *results = [QXAuthUserServiceGetGroupAsideResults alloc];
		QXAuthUserServiceGetGroupAsideParams *params = [[QXAuthUserServiceGetGroupAsideParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupAside.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetGroupAsideResults *results = [QXAuthUserServiceGetGroupAsideResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetNewFeedEntries ---
- (QXAuthUserServiceGetNewFeedEntriesResults *) GetNewFeedEntries:(NSString *)entryType fromTimeUnixNano:(NSString *)fromTimeUnixNano limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetNewFeedEntriesResults *results = [QXAuthUserServiceGetNewFeedEntriesResults alloc];
	QXAuthUserServiceGetNewFeedEntriesParams *params = [[QXAuthUserServiceGetNewFeedEntriesParams alloc] init];
	[params setEntryType:entryType];
	[params setFromTimeUnixNano:fromTimeUnixNano];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewFeedEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getNewFeedEntries:(NSString *)entryType fromTimeUnixNano:(NSString *)fromTimeUnixNano limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetNewFeedEntriesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetNewFeedEntriesResults *results = [QXAuthUserServiceGetNewFeedEntriesResults alloc];
		QXAuthUserServiceGetNewFeedEntriesParams *params = [[QXAuthUserServiceGetNewFeedEntriesParams alloc] init];
		[params setEntryType:entryType];
		[params setFromTimeUnixNano:fromTimeUnixNano];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewFeedEntries.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetNewFeedEntriesResults *results = [QXAuthUserServiceGetNewFeedEntriesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetUserEntries ---
- (QXAuthUserServiceGetUserEntriesResults *) GetUserEntries:(NSString *)userId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetUserEntriesResults *results = [QXAuthUserServiceGetUserEntriesResults alloc];
	QXAuthUserServiceGetUserEntriesParams *params = [[QXAuthUserServiceGetUserEntriesParams alloc] init];
	[params setUserId:userId];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUserEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getUserEntries:(NSString *)userId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetUserEntriesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetUserEntriesResults *results = [QXAuthUserServiceGetUserEntriesResults alloc];
		QXAuthUserServiceGetUserEntriesParams *params = [[QXAuthUserServiceGetUserEntriesParams alloc] init];
		[params setUserId:userId];
		[params setEntryType:entryType];
		[params setBefore:before];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUserEntries.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetUserEntriesResults *results = [QXAuthUserServiceGetUserEntriesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetMyNotificationItems ---
- (QXAuthUserServiceGetMyNotificationItemsResults *) GetMyNotificationItems:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetMyNotificationItemsResults *results = [QXAuthUserServiceGetMyNotificationItemsResults alloc];
	QXAuthUserServiceGetMyNotificationItemsParams *params = [[QXAuthUserServiceGetMyNotificationItemsParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyNotificationItems.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyNotificationItems:(NSString *)before limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetMyNotificationItemsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMyNotificationItemsResults *results = [QXAuthUserServiceGetMyNotificationItemsResults alloc];
		QXAuthUserServiceGetMyNotificationItemsParams *params = [[QXAuthUserServiceGetMyNotificationItemsParams alloc] init];
		[params setBefore:before];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyNotificationItems.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMyNotificationItemsResults *results = [QXAuthUserServiceGetMyNotificationItemsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- MarkAllAsRead ---
- (QXAuthUserServiceMarkAllAsReadResults *) MarkAllAsRead:(NSString *)groupId {
	
	QXAuthUserServiceMarkAllAsReadResults *results = [QXAuthUserServiceMarkAllAsReadResults alloc];
	QXAuthUserServiceMarkAllAsReadParams *params = [[QXAuthUserServiceMarkAllAsReadParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MarkAllAsRead.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) markAllAsRead:(NSString *)groupId success:(void (^)(QXAuthUserServiceMarkAllAsReadResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceMarkAllAsReadResults *results = [QXAuthUserServiceMarkAllAsReadResults alloc];
		QXAuthUserServiceMarkAllAsReadParams *params = [[QXAuthUserServiceMarkAllAsReadParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MarkAllAsRead.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceMarkAllAsReadResults *results = [QXAuthUserServiceMarkAllAsReadResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetWatchList ---
- (QXAuthUserServiceGetWatchListResults *) GetWatchList:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetWatchListResults *results = [QXAuthUserServiceGetWatchListResults alloc];
	QXAuthUserServiceGetWatchListParams *params = [[QXAuthUserServiceGetWatchListParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetWatchList.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getWatchList:(NSString *)before limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetWatchListResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetWatchListResults *results = [QXAuthUserServiceGetWatchListResults alloc];
		QXAuthUserServiceGetWatchListParams *params = [[QXAuthUserServiceGetWatchListParams alloc] init];
		[params setBefore:before];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetWatchList.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetWatchListResults *results = [QXAuthUserServiceGetWatchListResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AddToWatchList ---
- (QXAuthUserServiceAddToWatchListResults *) AddToWatchList:(NSString *)entryId groupId:(NSString *)groupId remindMode:(NSString *)remindMode {
	
	QXAuthUserServiceAddToWatchListResults *results = [QXAuthUserServiceAddToWatchListResults alloc];
	QXAuthUserServiceAddToWatchListParams *params = [[QXAuthUserServiceAddToWatchListParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setRemindMode:remindMode];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AddToWatchList.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) addToWatchList:(NSString *)entryId groupId:(NSString *)groupId remindMode:(NSString *)remindMode success:(void (^)(QXAuthUserServiceAddToWatchListResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAddToWatchListResults *results = [QXAuthUserServiceAddToWatchListResults alloc];
		QXAuthUserServiceAddToWatchListParams *params = [[QXAuthUserServiceAddToWatchListParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		[params setRemindMode:remindMode];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AddToWatchList.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAddToWatchListResults *results = [QXAuthUserServiceAddToWatchListResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- StopWatching ---
- (QXAuthUserServiceStopWatchingResults *) StopWatching:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceStopWatchingResults *results = [QXAuthUserServiceStopWatchingResults alloc];
	QXAuthUserServiceStopWatchingParams *params = [[QXAuthUserServiceStopWatchingParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopWatching.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) stopWatching:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceStopWatchingResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceStopWatchingResults *results = [QXAuthUserServiceStopWatchingResults alloc];
		QXAuthUserServiceStopWatchingParams *params = [[QXAuthUserServiceStopWatchingParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopWatching.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceStopWatchingResults *results = [QXAuthUserServiceStopWatchingResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ReadWatching ---
- (NSError *) ReadWatching:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceReadWatchingResults *results = [QXAuthUserServiceReadWatchingResults alloc];
	QXAuthUserServiceReadWatchingParams *params = [[QXAuthUserServiceReadWatchingParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ReadWatching.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) readWatching:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceReadWatchingResults *results = [QXAuthUserServiceReadWatchingResults alloc];
		QXAuthUserServiceReadWatchingParams *params = [[QXAuthUserServiceReadWatchingParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ReadWatching.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceReadWatchingResults *results = [QXAuthUserServiceReadWatchingResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- RemindMe ---
- (QXAuthUserServiceRemindMeResults *) RemindMe {
	
	QXAuthUserServiceRemindMeResults *results = [QXAuthUserServiceRemindMeResults alloc];
	QXAuthUserServiceRemindMeParams *params = [[QXAuthUserServiceRemindMeParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RemindMe.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) remindMe:(void (^)(QXAuthUserServiceRemindMeResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceRemindMeResults *results = [QXAuthUserServiceRemindMeResults alloc];
		QXAuthUserServiceRemindMeParams *params = [[QXAuthUserServiceRemindMeParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RemindMe.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceRemindMeResults *results = [QXAuthUserServiceRemindMeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- StartSmartReminding ---
- (QXAuthUserServiceStartSmartRemindingResults *) StartSmartReminding:(NSString *)groupId watchItemId:(NSString *)watchItemId {
	
	QXAuthUserServiceStartSmartRemindingResults *results = [QXAuthUserServiceStartSmartRemindingResults alloc];
	QXAuthUserServiceStartSmartRemindingParams *params = [[QXAuthUserServiceStartSmartRemindingParams alloc] init];
	[params setGroupId:groupId];
	[params setWatchItemId:watchItemId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StartSmartReminding.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) startSmartReminding:(NSString *)groupId watchItemId:(NSString *)watchItemId success:(void (^)(QXAuthUserServiceStartSmartRemindingResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceStartSmartRemindingResults *results = [QXAuthUserServiceStartSmartRemindingResults alloc];
		QXAuthUserServiceStartSmartRemindingParams *params = [[QXAuthUserServiceStartSmartRemindingParams alloc] init];
		[params setGroupId:groupId];
		[params setWatchItemId:watchItemId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StartSmartReminding.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceStartSmartRemindingResults *results = [QXAuthUserServiceStartSmartRemindingResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- StopReminding ---
- (QXAuthUserServiceStopRemindingResults *) StopReminding:(NSString *)groupId watchItemId:(NSString *)watchItemId {
	
	QXAuthUserServiceStopRemindingResults *results = [QXAuthUserServiceStopRemindingResults alloc];
	QXAuthUserServiceStopRemindingParams *params = [[QXAuthUserServiceStopRemindingParams alloc] init];
	[params setGroupId:groupId];
	[params setWatchItemId:watchItemId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopReminding.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) stopReminding:(NSString *)groupId watchItemId:(NSString *)watchItemId success:(void (^)(QXAuthUserServiceStopRemindingResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceStopRemindingResults *results = [QXAuthUserServiceStopRemindingResults alloc];
		QXAuthUserServiceStopRemindingParams *params = [[QXAuthUserServiceStopRemindingParams alloc] init];
		[params setGroupId:groupId];
		[params setWatchItemId:watchItemId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopReminding.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceStopRemindingResults *results = [QXAuthUserServiceStopRemindingResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateLike ---
- (QXAuthUserServiceUpdateLikeResults *) UpdateLike:(QXLikeInput *)input {
	
	QXAuthUserServiceUpdateLikeResults *results = [QXAuthUserServiceUpdateLikeResults alloc];
	QXAuthUserServiceUpdateLikeParams *params = [[QXAuthUserServiceUpdateLikeParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateLike.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateLike:(QXLikeInput *)input success:(void (^)(QXAuthUserServiceUpdateLikeResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateLikeResults *results = [QXAuthUserServiceUpdateLikeResults alloc];
		QXAuthUserServiceUpdateLikeParams *params = [[QXAuthUserServiceUpdateLikeParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateLike.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateLikeResults *results = [QXAuthUserServiceUpdateLikeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetDraftList ---
- (QXAuthUserServiceGetDraftListResults *) GetDraftList:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetDraftListResults *results = [QXAuthUserServiceGetDraftListResults alloc];
	QXAuthUserServiceGetDraftListParams *params = [[QXAuthUserServiceGetDraftListParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDraftList.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getDraftList:(NSString *)before limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetDraftListResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetDraftListResults *results = [QXAuthUserServiceGetDraftListResults alloc];
		QXAuthUserServiceGetDraftListParams *params = [[QXAuthUserServiceGetDraftListParams alloc] init];
		[params setBefore:before];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDraftList.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetDraftListResults *results = [QXAuthUserServiceGetDraftListResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetDraft ---
- (QXAuthUserServiceGetDraftResults *) GetDraft:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetDraftResults *results = [QXAuthUserServiceGetDraftResults alloc];
	QXAuthUserServiceGetDraftParams *params = [[QXAuthUserServiceGetDraftParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDraft.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getDraft:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceGetDraftResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetDraftResults *results = [QXAuthUserServiceGetDraftResults alloc];
		QXAuthUserServiceGetDraftParams *params = [[QXAuthUserServiceGetDraftParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDraft.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetDraftResults *results = [QXAuthUserServiceGetDraftResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- DeleteDraft ---
- (NSError *) DeleteDraft:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceDeleteDraftResults *results = [QXAuthUserServiceDeleteDraftResults alloc];
	QXAuthUserServiceDeleteDraftParams *params = [[QXAuthUserServiceDeleteDraftParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteDraft.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) deleteDraft:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDeleteDraftResults *results = [QXAuthUserServiceDeleteDraftResults alloc];
		QXAuthUserServiceDeleteDraftParams *params = [[QXAuthUserServiceDeleteDraftParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteDraft.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDeleteDraftResults *results = [QXAuthUserServiceDeleteDraftResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- ChooseMarkdownEditor ---
- (NSError *) ChooseMarkdownEditor {
	
	QXAuthUserServiceChooseMarkdownEditorResults *results = [QXAuthUserServiceChooseMarkdownEditorResults alloc];
	QXAuthUserServiceChooseMarkdownEditorParams *params = [[QXAuthUserServiceChooseMarkdownEditorParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ChooseMarkdownEditor.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) chooseMarkdownEditor:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceChooseMarkdownEditorResults *results = [QXAuthUserServiceChooseMarkdownEditorResults alloc];
		QXAuthUserServiceChooseMarkdownEditorParams *params = [[QXAuthUserServiceChooseMarkdownEditorParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ChooseMarkdownEditor.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceChooseMarkdownEditorResults *results = [QXAuthUserServiceChooseMarkdownEditorResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- ChooseStyledEditor ---
- (NSError *) ChooseStyledEditor {
	
	QXAuthUserServiceChooseStyledEditorResults *results = [QXAuthUserServiceChooseStyledEditorResults alloc];
	QXAuthUserServiceChooseStyledEditorParams *params = [[QXAuthUserServiceChooseStyledEditorParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ChooseStyledEditor.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) chooseStyledEditor:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceChooseStyledEditorResults *results = [QXAuthUserServiceChooseStyledEditorResults alloc];
		QXAuthUserServiceChooseStyledEditorParams *params = [[QXAuthUserServiceChooseStyledEditorParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ChooseStyledEditor.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceChooseStyledEditorResults *results = [QXAuthUserServiceChooseStyledEditorResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetNewGroup ---
- (QXAuthUserServiceGetNewGroupResults *) GetNewGroup {
	
	QXAuthUserServiceGetNewGroupResults *results = [QXAuthUserServiceGetNewGroupResults alloc];
	QXAuthUserServiceGetNewGroupParams *params = [[QXAuthUserServiceGetNewGroupParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getNewGroup:(void (^)(QXAuthUserServiceGetNewGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetNewGroupResults *results = [QXAuthUserServiceGetNewGroupResults alloc];
		QXAuthUserServiceGetNewGroupParams *params = [[QXAuthUserServiceGetNewGroupParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetNewGroupResults *results = [QXAuthUserServiceGetNewGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetGroup ---
- (QXAuthUserServiceGetGroupResults *) GetGroup:(NSString *)groupId {
	
	QXAuthUserServiceGetGroupResults *results = [QXAuthUserServiceGetGroupResults alloc];
	QXAuthUserServiceGetGroupParams *params = [[QXAuthUserServiceGetGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceGetGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetGroupResults *results = [QXAuthUserServiceGetGroupResults alloc];
		QXAuthUserServiceGetGroupParams *params = [[QXAuthUserServiceGetGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetGroupResults *results = [QXAuthUserServiceGetGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateGroup ---
- (QXAuthUserServiceCreateGroupResults *) CreateGroup:(QXGroupInput *)input {
	
	QXAuthUserServiceCreateGroupResults *results = [QXAuthUserServiceCreateGroupResults alloc];
	QXAuthUserServiceCreateGroupParams *params = [[QXAuthUserServiceCreateGroupParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createGroup:(QXGroupInput *)input success:(void (^)(QXAuthUserServiceCreateGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCreateGroupResults *results = [QXAuthUserServiceCreateGroupResults alloc];
		QXAuthUserServiceCreateGroupParams *params = [[QXAuthUserServiceCreateGroupParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCreateGroupResults *results = [QXAuthUserServiceCreateGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateGroup ---
- (NSError *) UpdateGroup:(QXGroupInput *)input {
	
	QXAuthUserServiceUpdateGroupResults *results = [QXAuthUserServiceUpdateGroupResults alloc];
	QXAuthUserServiceUpdateGroupParams *params = [[QXAuthUserServiceUpdateGroupParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) updateGroup:(QXGroupInput *)input success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateGroupResults *results = [QXAuthUserServiceUpdateGroupResults alloc];
		QXAuthUserServiceUpdateGroupParams *params = [[QXAuthUserServiceUpdateGroupParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateGroupResults *results = [QXAuthUserServiceUpdateGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- UpdateGroupLogo ---
- (NSError *) UpdateGroupLogo:(NSString *)groupId logoURL:(NSString *)logoURL {
	
	QXAuthUserServiceUpdateGroupLogoResults *results = [QXAuthUserServiceUpdateGroupLogoResults alloc];
	QXAuthUserServiceUpdateGroupLogoParams *params = [[QXAuthUserServiceUpdateGroupLogoParams alloc] init];
	[params setGroupId:groupId];
	[params setLogoURL:logoURL];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroupLogo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) updateGroupLogo:(NSString *)groupId logoURL:(NSString *)logoURL success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateGroupLogoResults *results = [QXAuthUserServiceUpdateGroupLogoResults alloc];
		QXAuthUserServiceUpdateGroupLogoParams *params = [[QXAuthUserServiceUpdateGroupLogoParams alloc] init];
		[params setGroupId:groupId];
		[params setLogoURL:logoURL];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroupLogo.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateGroupLogoResults *results = [QXAuthUserServiceUpdateGroupLogoResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- DeleteGroup ---
- (NSError *) DeleteGroup:(NSString *)groupId {
	
	QXAuthUserServiceDeleteGroupResults *results = [QXAuthUserServiceDeleteGroupResults alloc];
	QXAuthUserServiceDeleteGroupParams *params = [[QXAuthUserServiceDeleteGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) deleteGroup:(NSString *)groupId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDeleteGroupResults *results = [QXAuthUserServiceDeleteGroupResults alloc];
		QXAuthUserServiceDeleteGroupParams *params = [[QXAuthUserServiceDeleteGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDeleteGroupResults *results = [QXAuthUserServiceDeleteGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetGroupBySlug ---
- (QXAuthUserServiceGetGroupBySlugResults *) GetGroupBySlug:(NSString *)slug {
	
	QXAuthUserServiceGetGroupBySlugResults *results = [QXAuthUserServiceGetGroupBySlugResults alloc];
	QXAuthUserServiceGetGroupBySlugParams *params = [[QXAuthUserServiceGetGroupBySlugParams alloc] init];
	[params setSlug:slug];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupBySlug.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getGroupBySlug:(NSString *)slug success:(void (^)(QXAuthUserServiceGetGroupBySlugResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetGroupBySlugResults *results = [QXAuthUserServiceGetGroupBySlugResults alloc];
		QXAuthUserServiceGetGroupBySlugParams *params = [[QXAuthUserServiceGetGroupBySlugParams alloc] init];
		[params setSlug:slug];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupBySlug.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetGroupBySlugResults *results = [QXAuthUserServiceGetGroupBySlugResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetGroups ---
- (QXAuthUserServiceGetGroupsResults *) GetGroups:(NSString *)keyword {
	
	QXAuthUserServiceGetGroupsResults *results = [QXAuthUserServiceGetGroupsResults alloc];
	QXAuthUserServiceGetGroupsParams *params = [[QXAuthUserServiceGetGroupsParams alloc] init];
	[params setKeyword:keyword];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroups.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getGroups:(NSString *)keyword success:(void (^)(QXAuthUserServiceGetGroupsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetGroupsResults *results = [QXAuthUserServiceGetGroupsResults alloc];
		QXAuthUserServiceGetGroupsParams *params = [[QXAuthUserServiceGetGroupsParams alloc] init];
		[params setKeyword:keyword];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroups.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetGroupsResults *results = [QXAuthUserServiceGetGroupsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetPublicGroups ---
- (QXAuthUserServiceGetPublicGroupsResults *) GetPublicGroups:(NSString *)keyword {
	
	QXAuthUserServiceGetPublicGroupsResults *results = [QXAuthUserServiceGetPublicGroupsResults alloc];
	QXAuthUserServiceGetPublicGroupsParams *params = [[QXAuthUserServiceGetPublicGroupsParams alloc] init];
	[params setKeyword:keyword];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPublicGroups.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getPublicGroups:(NSString *)keyword success:(void (^)(QXAuthUserServiceGetPublicGroupsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetPublicGroupsResults *results = [QXAuthUserServiceGetPublicGroupsResults alloc];
		QXAuthUserServiceGetPublicGroupsParams *params = [[QXAuthUserServiceGetPublicGroupsParams alloc] init];
		[params setKeyword:keyword];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPublicGroups.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetPublicGroupsResults *results = [QXAuthUserServiceGetPublicGroupsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AddUserToGroup ---
- (NSError *) AddUserToGroup:(NSString *)groupId userId:(NSString *)userId {
	
	QXAuthUserServiceAddUserToGroupResults *results = [QXAuthUserServiceAddUserToGroupResults alloc];
	QXAuthUserServiceAddUserToGroupParams *params = [[QXAuthUserServiceAddUserToGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AddUserToGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) addUserToGroup:(NSString *)groupId userId:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAddUserToGroupResults *results = [QXAuthUserServiceAddUserToGroupResults alloc];
		QXAuthUserServiceAddUserToGroupParams *params = [[QXAuthUserServiceAddUserToGroupParams alloc] init];
		[params setGroupId:groupId];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AddUserToGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAddUserToGroupResults *results = [QXAuthUserServiceAddUserToGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- RemoveUserFromGroup ---
- (NSError *) RemoveUserFromGroup:(NSString *)groupId userId:(NSString *)userId {
	
	QXAuthUserServiceRemoveUserFromGroupResults *results = [QXAuthUserServiceRemoveUserFromGroupResults alloc];
	QXAuthUserServiceRemoveUserFromGroupParams *params = [[QXAuthUserServiceRemoveUserFromGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RemoveUserFromGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) removeUserFromGroup:(NSString *)groupId userId:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceRemoveUserFromGroupResults *results = [QXAuthUserServiceRemoveUserFromGroupResults alloc];
		QXAuthUserServiceRemoveUserFromGroupParams *params = [[QXAuthUserServiceRemoveUserFromGroupParams alloc] init];
		[params setGroupId:groupId];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RemoveUserFromGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceRemoveUserFromGroupResults *results = [QXAuthUserServiceRemoveUserFromGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetClassifiedGroups ---
- (QXAuthUserServiceGetClassifiedGroupsResults *) GetClassifiedGroups {
	
	QXAuthUserServiceGetClassifiedGroupsResults *results = [QXAuthUserServiceGetClassifiedGroupsResults alloc];
	QXAuthUserServiceGetClassifiedGroupsParams *params = [[QXAuthUserServiceGetClassifiedGroupsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetClassifiedGroups.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getClassifiedGroups:(void (^)(QXAuthUserServiceGetClassifiedGroupsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetClassifiedGroupsResults *results = [QXAuthUserServiceGetClassifiedGroupsResults alloc];
		QXAuthUserServiceGetClassifiedGroupsParams *params = [[QXAuthUserServiceGetClassifiedGroupsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetClassifiedGroups.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetClassifiedGroupsResults *results = [QXAuthUserServiceGetClassifiedGroupsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- BulkUpdateTasksInGroup ---
- (NSError *) BulkUpdateTasksInGroup:(NSString *)groupId taskPwMap:(NSArray *)taskPwMap taskInputs:(NSArray *)taskInputs {
	
	QXAuthUserServiceBulkUpdateTasksInGroupResults *results = [QXAuthUserServiceBulkUpdateTasksInGroupResults alloc];
	QXAuthUserServiceBulkUpdateTasksInGroupParams *params = [[QXAuthUserServiceBulkUpdateTasksInGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setTaskPwMap:taskPwMap];
	[params setTaskInputs:taskInputs];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/BulkUpdateTasksInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) bulkUpdateTasksInGroup:(NSString *)groupId taskPwMap:(NSArray *)taskPwMap taskInputs:(NSArray *)taskInputs success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceBulkUpdateTasksInGroupResults *results = [QXAuthUserServiceBulkUpdateTasksInGroupResults alloc];
		QXAuthUserServiceBulkUpdateTasksInGroupParams *params = [[QXAuthUserServiceBulkUpdateTasksInGroupParams alloc] init];
		[params setGroupId:groupId];
		[params setTaskPwMap:taskPwMap];
		[params setTaskInputs:taskInputs];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/BulkUpdateTasksInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceBulkUpdateTasksInGroupResults *results = [QXAuthUserServiceBulkUpdateTasksInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetAuthUser ---
- (QXAuthUserServiceGetAuthUserResults *) GetAuthUser {
	
	QXAuthUserServiceGetAuthUserResults *results = [QXAuthUserServiceGetAuthUserResults alloc];
	QXAuthUserServiceGetAuthUserParams *params = [[QXAuthUserServiceGetAuthUserParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetAuthUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getAuthUser:(void (^)(QXAuthUserServiceGetAuthUserResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetAuthUserResults *results = [QXAuthUserServiceGetAuthUserResults alloc];
		QXAuthUserServiceGetAuthUserParams *params = [[QXAuthUserServiceGetAuthUserParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetAuthUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetAuthUserResults *results = [QXAuthUserServiceGetAuthUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOrgUsers ---
- (QXAuthUserServiceGetOrgUsersResults *) GetOrgUsers:(NSString *)keyword startFullName:(NSString *)startFullName limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetOrgUsersResults *results = [QXAuthUserServiceGetOrgUsersResults alloc];
	QXAuthUserServiceGetOrgUsersParams *params = [[QXAuthUserServiceGetOrgUsersParams alloc] init];
	[params setKeyword:keyword];
	[params setStartFullName:startFullName];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOrgUsers:(NSString *)keyword startFullName:(NSString *)startFullName limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetOrgUsersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOrgUsersResults *results = [QXAuthUserServiceGetOrgUsersResults alloc];
		QXAuthUserServiceGetOrgUsersParams *params = [[QXAuthUserServiceGetOrgUsersParams alloc] init];
		[params setKeyword:keyword];
		[params setStartFullName:startFullName];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgUsers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOrgUsersResults *results = [QXAuthUserServiceGetOrgUsersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetGroupUsers ---
- (QXAuthUserServiceGetGroupUsersResults *) GetGroupUsers:(NSString *)groupId keyword:(NSString *)keyword onlyFollowers:(BOOL)onlyFollowers startFullName:(NSString *)startFullName limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetGroupUsersResults *results = [QXAuthUserServiceGetGroupUsersResults alloc];
	QXAuthUserServiceGetGroupUsersParams *params = [[QXAuthUserServiceGetGroupUsersParams alloc] init];
	[params setGroupId:groupId];
	[params setKeyword:keyword];
	[params setOnlyFollowers:onlyFollowers];
	[params setStartFullName:startFullName];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getGroupUsers:(NSString *)groupId keyword:(NSString *)keyword onlyFollowers:(BOOL)onlyFollowers startFullName:(NSString *)startFullName limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetGroupUsersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetGroupUsersResults *results = [QXAuthUserServiceGetGroupUsersResults alloc];
		QXAuthUserServiceGetGroupUsersParams *params = [[QXAuthUserServiceGetGroupUsersParams alloc] init];
		[params setGroupId:groupId];
		[params setKeyword:keyword];
		[params setOnlyFollowers:onlyFollowers];
		[params setStartFullName:startFullName];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupUsers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetGroupUsersResults *results = [QXAuthUserServiceGetGroupUsersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetUser ---
- (QXAuthUserServiceGetUserResults *) GetUser:(NSString *)userId {
	
	QXAuthUserServiceGetUserResults *results = [QXAuthUserServiceGetUserResults alloc];
	QXAuthUserServiceGetUserParams *params = [[QXAuthUserServiceGetUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getUser:(NSString *)userId success:(void (^)(QXAuthUserServiceGetUserResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetUserResults *results = [QXAuthUserServiceGetUserResults alloc];
		QXAuthUserServiceGetUserParams *params = [[QXAuthUserServiceGetUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetUserResults *results = [QXAuthUserServiceGetUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- EnableUser ---
- (NSError *) EnableUser:(NSString *)userId {
	
	QXAuthUserServiceEnableUserResults *results = [QXAuthUserServiceEnableUserResults alloc];
	QXAuthUserServiceEnableUserParams *params = [[QXAuthUserServiceEnableUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/EnableUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) enableUser:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceEnableUserResults *results = [QXAuthUserServiceEnableUserResults alloc];
		QXAuthUserServiceEnableUserParams *params = [[QXAuthUserServiceEnableUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/EnableUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceEnableUserResults *results = [QXAuthUserServiceEnableUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- DisableUser ---
- (NSError *) DisableUser:(NSString *)userId {
	
	QXAuthUserServiceDisableUserResults *results = [QXAuthUserServiceDisableUserResults alloc];
	QXAuthUserServiceDisableUserParams *params = [[QXAuthUserServiceDisableUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DisableUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) disableUser:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDisableUserResults *results = [QXAuthUserServiceDisableUserResults alloc];
		QXAuthUserServiceDisableUserParams *params = [[QXAuthUserServiceDisableUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DisableUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDisableUserResults *results = [QXAuthUserServiceDisableUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- DeleteUser ---
- (NSError *) DeleteUser:(NSString *)userId {
	
	QXAuthUserServiceDeleteUserResults *results = [QXAuthUserServiceDeleteUserResults alloc];
	QXAuthUserServiceDeleteUserParams *params = [[QXAuthUserServiceDeleteUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) deleteUser:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDeleteUserResults *results = [QXAuthUserServiceDeleteUserResults alloc];
		QXAuthUserServiceDeleteUserParams *params = [[QXAuthUserServiceDeleteUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDeleteUserResults *results = [QXAuthUserServiceDeleteUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- PromoteToSuperUser ---
- (NSError *) PromoteToSuperUser:(NSString *)userId {
	
	QXAuthUserServicePromoteToSuperUserResults *results = [QXAuthUserServicePromoteToSuperUserResults alloc];
	QXAuthUserServicePromoteToSuperUserParams *params = [[QXAuthUserServicePromoteToSuperUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/PromoteToSuperUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) promoteToSuperUser:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServicePromoteToSuperUserResults *results = [QXAuthUserServicePromoteToSuperUserResults alloc];
		QXAuthUserServicePromoteToSuperUserParams *params = [[QXAuthUserServicePromoteToSuperUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/PromoteToSuperUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServicePromoteToSuperUserResults *results = [QXAuthUserServicePromoteToSuperUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- DemoteFromSuperUser ---
- (NSError *) DemoteFromSuperUser:(NSString *)userId {
	
	QXAuthUserServiceDemoteFromSuperUserResults *results = [QXAuthUserServiceDemoteFromSuperUserResults alloc];
	QXAuthUserServiceDemoteFromSuperUserParams *params = [[QXAuthUserServiceDemoteFromSuperUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DemoteFromSuperUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) demoteFromSuperUser:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDemoteFromSuperUserResults *results = [QXAuthUserServiceDemoteFromSuperUserResults alloc];
		QXAuthUserServiceDemoteFromSuperUserParams *params = [[QXAuthUserServiceDemoteFromSuperUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DemoteFromSuperUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDemoteFromSuperUserResults *results = [QXAuthUserServiceDemoteFromSuperUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- FollowUser ---
- (NSError *) FollowUser:(NSString *)userId {
	
	QXAuthUserServiceFollowUserResults *results = [QXAuthUserServiceFollowUserResults alloc];
	QXAuthUserServiceFollowUserParams *params = [[QXAuthUserServiceFollowUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/FollowUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) followUser:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceFollowUserResults *results = [QXAuthUserServiceFollowUserResults alloc];
		QXAuthUserServiceFollowUserParams *params = [[QXAuthUserServiceFollowUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/FollowUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceFollowUserResults *results = [QXAuthUserServiceFollowUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- UnfollowUser ---
- (NSError *) UnfollowUser:(NSString *)userId {
	
	QXAuthUserServiceUnfollowUserResults *results = [QXAuthUserServiceUnfollowUserResults alloc];
	QXAuthUserServiceUnfollowUserParams *params = [[QXAuthUserServiceUnfollowUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UnfollowUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) unfollowUser:(NSString *)userId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUnfollowUserResults *results = [QXAuthUserServiceUnfollowUserResults alloc];
		QXAuthUserServiceUnfollowUserParams *params = [[QXAuthUserServiceUnfollowUserParams alloc] init];
		[params setUserId:userId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UnfollowUser.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUnfollowUserResults *results = [QXAuthUserServiceUnfollowUserResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetMyFollowingUsers ---
- (QXAuthUserServiceGetMyFollowingUsersResults *) GetMyFollowingUsers {
	
	QXAuthUserServiceGetMyFollowingUsersResults *results = [QXAuthUserServiceGetMyFollowingUsersResults alloc];
	QXAuthUserServiceGetMyFollowingUsersParams *params = [[QXAuthUserServiceGetMyFollowingUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyFollowingUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyFollowingUsers:(void (^)(QXAuthUserServiceGetMyFollowingUsersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMyFollowingUsersResults *results = [QXAuthUserServiceGetMyFollowingUsersResults alloc];
		QXAuthUserServiceGetMyFollowingUsersParams *params = [[QXAuthUserServiceGetMyFollowingUsersParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyFollowingUsers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMyFollowingUsersResults *results = [QXAuthUserServiceGetMyFollowingUsersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetPanelStatus ---
- (QXAuthUserServiceGetPanelStatusResults *) GetPanelStatus {
	
	QXAuthUserServiceGetPanelStatusResults *results = [QXAuthUserServiceGetPanelStatusResults alloc];
	QXAuthUserServiceGetPanelStatusParams *params = [[QXAuthUserServiceGetPanelStatusParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPanelStatus.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getPanelStatus:(void (^)(QXAuthUserServiceGetPanelStatusResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetPanelStatusResults *results = [QXAuthUserServiceGetPanelStatusResults alloc];
		QXAuthUserServiceGetPanelStatusParams *params = [[QXAuthUserServiceGetPanelStatusParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPanelStatus.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetPanelStatusResults *results = [QXAuthUserServiceGetPanelStatusResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetUserPreferences ---
- (QXAuthUserServiceGetUserPreferencesResults *) GetUserPreferences {
	
	QXAuthUserServiceGetUserPreferencesResults *results = [QXAuthUserServiceGetUserPreferencesResults alloc];
	QXAuthUserServiceGetUserPreferencesParams *params = [[QXAuthUserServiceGetUserPreferencesParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUserPreferences.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getUserPreferences:(void (^)(QXAuthUserServiceGetUserPreferencesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetUserPreferencesResults *results = [QXAuthUserServiceGetUserPreferencesResults alloc];
		QXAuthUserServiceGetUserPreferencesParams *params = [[QXAuthUserServiceGetUserPreferencesParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUserPreferences.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetUserPreferencesResults *results = [QXAuthUserServiceGetUserPreferencesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateUserPreferences ---
- (QXAuthUserServiceUpdateUserPreferencesResults *) UpdateUserPreferences:(QXPreferencesInput *)input {
	
	QXAuthUserServiceUpdateUserPreferencesResults *results = [QXAuthUserServiceUpdateUserPreferencesResults alloc];
	QXAuthUserServiceUpdateUserPreferencesParams *params = [[QXAuthUserServiceUpdateUserPreferencesParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateUserPreferences.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateUserPreferences:(QXPreferencesInput *)input success:(void (^)(QXAuthUserServiceUpdateUserPreferencesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateUserPreferencesResults *results = [QXAuthUserServiceUpdateUserPreferencesResults alloc];
		QXAuthUserServiceUpdateUserPreferencesParams *params = [[QXAuthUserServiceUpdateUserPreferencesParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateUserPreferences.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateUserPreferencesResults *results = [QXAuthUserServiceUpdateUserPreferencesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOrgEmbedUsers ---
- (QXAuthUserServiceGetOrgEmbedUsersResults *) GetOrgEmbedUsers {
	
	QXAuthUserServiceGetOrgEmbedUsersResults *results = [QXAuthUserServiceGetOrgEmbedUsersResults alloc];
	QXAuthUserServiceGetOrgEmbedUsersParams *params = [[QXAuthUserServiceGetOrgEmbedUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgEmbedUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOrgEmbedUsers:(void (^)(QXAuthUserServiceGetOrgEmbedUsersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOrgEmbedUsersResults *results = [QXAuthUserServiceGetOrgEmbedUsersResults alloc];
		QXAuthUserServiceGetOrgEmbedUsersParams *params = [[QXAuthUserServiceGetOrgEmbedUsersParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgEmbedUsers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOrgEmbedUsersResults *results = [QXAuthUserServiceGetOrgEmbedUsersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetNonStandardGroupEmbedUsers ---
- (QXAuthUserServiceGetNonStandardGroupEmbedUsersResults *) GetNonStandardGroupEmbedUsers {
	
	QXAuthUserServiceGetNonStandardGroupEmbedUsersResults *results = [QXAuthUserServiceGetNonStandardGroupEmbedUsersResults alloc];
	QXAuthUserServiceGetNonStandardGroupEmbedUsersParams *params = [[QXAuthUserServiceGetNonStandardGroupEmbedUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNonStandardGroupEmbedUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getNonStandardGroupEmbedUsers:(void (^)(QXAuthUserServiceGetNonStandardGroupEmbedUsersResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetNonStandardGroupEmbedUsersResults *results = [QXAuthUserServiceGetNonStandardGroupEmbedUsersResults alloc];
		QXAuthUserServiceGetNonStandardGroupEmbedUsersParams *params = [[QXAuthUserServiceGetNonStandardGroupEmbedUsersParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNonStandardGroupEmbedUsers.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetNonStandardGroupEmbedUsersResults *results = [QXAuthUserServiceGetNonStandardGroupEmbedUsersResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateUserProfile ---
- (NSError *) UpdateUserProfile:(QXUserProfileInput *)input {
	
	QXAuthUserServiceUpdateUserProfileResults *results = [QXAuthUserServiceUpdateUserProfileResults alloc];
	QXAuthUserServiceUpdateUserProfileParams *params = [[QXAuthUserServiceUpdateUserProfileParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateUserProfile.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) updateUserProfile:(QXUserProfileInput *)input success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateUserProfileResults *results = [QXAuthUserServiceUpdateUserProfileResults alloc];
		QXAuthUserServiceUpdateUserProfileParams *params = [[QXAuthUserServiceUpdateUserProfileParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateUserProfile.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateUserProfileResults *results = [QXAuthUserServiceUpdateUserProfileResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- SetPreferredLanguages ---
- (NSError *) SetPreferredLanguages:(NSArray *)languageCodes {
	
	QXAuthUserServiceSetPreferredLanguagesResults *results = [QXAuthUserServiceSetPreferredLanguagesResults alloc];
	QXAuthUserServiceSetPreferredLanguagesParams *params = [[QXAuthUserServiceSetPreferredLanguagesParams alloc] init];
	[params setLanguageCodes:languageCodes];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SetPreferredLanguages.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) setPreferredLanguages:(NSArray *)languageCodes success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceSetPreferredLanguagesResults *results = [QXAuthUserServiceSetPreferredLanguagesResults alloc];
		QXAuthUserServiceSetPreferredLanguagesParams *params = [[QXAuthUserServiceSetPreferredLanguagesParams alloc] init];
		[params setLanguageCodes:languageCodes];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SetPreferredLanguages.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceSetPreferredLanguagesResults *results = [QXAuthUserServiceSetPreferredLanguagesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetMyCount ---
- (QXAuthUserServiceGetMyCountResults *) GetMyCount {
	
	QXAuthUserServiceGetMyCountResults *results = [QXAuthUserServiceGetMyCountResults alloc];
	QXAuthUserServiceGetMyCountParams *params = [[QXAuthUserServiceGetMyCountParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyCount.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyCount:(void (^)(QXAuthUserServiceGetMyCountResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMyCountResults *results = [QXAuthUserServiceGetMyCountResults alloc];
		QXAuthUserServiceGetMyCountParams *params = [[QXAuthUserServiceGetMyCountParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyCount.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMyCountResults *results = [QXAuthUserServiceGetMyCountResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ReadEntry ---
- (QXAuthUserServiceReadEntryResults *) ReadEntry:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceReadEntryResults *results = [QXAuthUserServiceReadEntryResults alloc];
	QXAuthUserServiceReadEntryParams *params = [[QXAuthUserServiceReadEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ReadEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) readEntry:(NSString *)entryId groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceReadEntryResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceReadEntryResults *results = [QXAuthUserServiceReadEntryResults alloc];
		QXAuthUserServiceReadEntryParams *params = [[QXAuthUserServiceReadEntryParams alloc] init];
		[params setEntryId:entryId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ReadEntry.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceReadEntryResults *results = [QXAuthUserServiceReadEntryResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetJoinOrgInvitations ---
- (QXAuthUserServiceGetJoinOrgInvitationsResults *) GetJoinOrgInvitations {
	
	QXAuthUserServiceGetJoinOrgInvitationsResults *results = [QXAuthUserServiceGetJoinOrgInvitationsResults alloc];
	QXAuthUserServiceGetJoinOrgInvitationsParams *params = [[QXAuthUserServiceGetJoinOrgInvitationsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetJoinOrgInvitations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getJoinOrgInvitations:(void (^)(QXAuthUserServiceGetJoinOrgInvitationsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetJoinOrgInvitationsResults *results = [QXAuthUserServiceGetJoinOrgInvitationsResults alloc];
		QXAuthUserServiceGetJoinOrgInvitationsParams *params = [[QXAuthUserServiceGetJoinOrgInvitationsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetJoinOrgInvitations.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetJoinOrgInvitationsResults *results = [QXAuthUserServiceGetJoinOrgInvitationsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOrganization ---
- (QXAuthUserServiceGetOrganizationResults *) GetOrganization:(NSString *)orgId {
	
	QXAuthUserServiceGetOrganizationResults *results = [QXAuthUserServiceGetOrganizationResults alloc];
	QXAuthUserServiceGetOrganizationParams *params = [[QXAuthUserServiceGetOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOrganization:(NSString *)orgId success:(void (^)(QXAuthUserServiceGetOrganizationResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOrganizationResults *results = [QXAuthUserServiceGetOrganizationResults alloc];
		QXAuthUserServiceGetOrganizationParams *params = [[QXAuthUserServiceGetOrganizationParams alloc] init];
		[params setOrgId:orgId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOrganizationResults *results = [QXAuthUserServiceGetOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOrganizations ---
- (QXAuthUserServiceGetOrganizationsResults *) GetOrganizations:(NSArray *)orgIds {
	
	QXAuthUserServiceGetOrganizationsResults *results = [QXAuthUserServiceGetOrganizationsResults alloc];
	QXAuthUserServiceGetOrganizationsParams *params = [[QXAuthUserServiceGetOrganizationsParams alloc] init];
	[params setOrgIds:orgIds];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrganizations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOrganizations:(NSArray *)orgIds success:(void (^)(QXAuthUserServiceGetOrganizationsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOrganizationsResults *results = [QXAuthUserServiceGetOrganizationsResults alloc];
		QXAuthUserServiceGetOrganizationsParams *params = [[QXAuthUserServiceGetOrganizationsParams alloc] init];
		[params setOrgIds:orgIds];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrganizations.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOrganizationsResults *results = [QXAuthUserServiceGetOrganizationsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetMyOrgsUnreadInfo ---
- (QXAuthUserServiceGetMyOrgsUnreadInfoResults *) GetMyOrgsUnreadInfo {
	
	QXAuthUserServiceGetMyOrgsUnreadInfoResults *results = [QXAuthUserServiceGetMyOrgsUnreadInfoResults alloc];
	QXAuthUserServiceGetMyOrgsUnreadInfoParams *params = [[QXAuthUserServiceGetMyOrgsUnreadInfoParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyOrgsUnreadInfo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyOrgsUnreadInfo:(void (^)(QXAuthUserServiceGetMyOrgsUnreadInfoResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMyOrgsUnreadInfoResults *results = [QXAuthUserServiceGetMyOrgsUnreadInfoResults alloc];
		QXAuthUserServiceGetMyOrgsUnreadInfoParams *params = [[QXAuthUserServiceGetMyOrgsUnreadInfoParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyOrgsUnreadInfo.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMyOrgsUnreadInfoResults *results = [QXAuthUserServiceGetMyOrgsUnreadInfoResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetMyJoinedOrganizations ---
- (QXAuthUserServiceGetMyJoinedOrganizationsResults *) GetMyJoinedOrganizations {
	
	QXAuthUserServiceGetMyJoinedOrganizationsResults *results = [QXAuthUserServiceGetMyJoinedOrganizationsResults alloc];
	QXAuthUserServiceGetMyJoinedOrganizationsParams *params = [[QXAuthUserServiceGetMyJoinedOrganizationsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyJoinedOrganizations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyJoinedOrganizations:(void (^)(QXAuthUserServiceGetMyJoinedOrganizationsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMyJoinedOrganizationsResults *results = [QXAuthUserServiceGetMyJoinedOrganizationsResults alloc];
		QXAuthUserServiceGetMyJoinedOrganizationsParams *params = [[QXAuthUserServiceGetMyJoinedOrganizationsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyJoinedOrganizations.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMyJoinedOrganizationsResults *results = [QXAuthUserServiceGetMyJoinedOrganizationsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetCurrentOrganization ---
- (QXAuthUserServiceGetCurrentOrganizationResults *) GetCurrentOrganization {
	
	QXAuthUserServiceGetCurrentOrganizationResults *results = [QXAuthUserServiceGetCurrentOrganizationResults alloc];
	QXAuthUserServiceGetCurrentOrganizationParams *params = [[QXAuthUserServiceGetCurrentOrganizationParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetCurrentOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getCurrentOrganization:(void (^)(QXAuthUserServiceGetCurrentOrganizationResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetCurrentOrganizationResults *results = [QXAuthUserServiceGetCurrentOrganizationResults alloc];
		QXAuthUserServiceGetCurrentOrganizationParams *params = [[QXAuthUserServiceGetCurrentOrganizationParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetCurrentOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetCurrentOrganizationResults *results = [QXAuthUserServiceGetCurrentOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- SearchOrganizations ---
- (QXAuthUserServiceSearchOrganizationsResults *) SearchOrganizations:(NSString *)keyword {
	
	QXAuthUserServiceSearchOrganizationsResults *results = [QXAuthUserServiceSearchOrganizationsResults alloc];
	QXAuthUserServiceSearchOrganizationsParams *params = [[QXAuthUserServiceSearchOrganizationsParams alloc] init];
	[params setKeyword:keyword];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SearchOrganizations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) searchOrganizations:(NSString *)keyword success:(void (^)(QXAuthUserServiceSearchOrganizationsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceSearchOrganizationsResults *results = [QXAuthUserServiceSearchOrganizationsResults alloc];
		QXAuthUserServiceSearchOrganizationsParams *params = [[QXAuthUserServiceSearchOrganizationsParams alloc] init];
		[params setKeyword:keyword];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SearchOrganizations.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceSearchOrganizationsResults *results = [QXAuthUserServiceSearchOrganizationsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateOrganization ---
- (QXAuthUserServiceUpdateOrganizationResults *) UpdateOrganization:(QXOrganizationInput *)input {
	
	QXAuthUserServiceUpdateOrganizationResults *results = [QXAuthUserServiceUpdateOrganizationResults alloc];
	QXAuthUserServiceUpdateOrganizationParams *params = [[QXAuthUserServiceUpdateOrganizationParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateOrganization:(QXOrganizationInput *)input success:(void (^)(QXAuthUserServiceUpdateOrganizationResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateOrganizationResults *results = [QXAuthUserServiceUpdateOrganizationResults alloc];
		QXAuthUserServiceUpdateOrganizationParams *params = [[QXAuthUserServiceUpdateOrganizationParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateOrganizationResults *results = [QXAuthUserServiceUpdateOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- SwitchOrganization ---
- (NSError *) SwitchOrganization:(NSString *)orgId {
	
	QXAuthUserServiceSwitchOrganizationResults *results = [QXAuthUserServiceSwitchOrganizationResults alloc];
	QXAuthUserServiceSwitchOrganizationParams *params = [[QXAuthUserServiceSwitchOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SwitchOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) switchOrganization:(NSString *)orgId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceSwitchOrganizationResults *results = [QXAuthUserServiceSwitchOrganizationResults alloc];
		QXAuthUserServiceSwitchOrganizationParams *params = [[QXAuthUserServiceSwitchOrganizationParams alloc] init];
		[params setOrgId:orgId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SwitchOrganization.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceSwitchOrganizationResults *results = [QXAuthUserServiceSwitchOrganizationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- AcceptShareRequestByAdmin ---
- (NSError *) AcceptShareRequestByAdmin:(NSString *)requestId {
	
	QXAuthUserServiceAcceptShareRequestByAdminResults *results = [QXAuthUserServiceAcceptShareRequestByAdminResults alloc];
	QXAuthUserServiceAcceptShareRequestByAdminParams *params = [[QXAuthUserServiceAcceptShareRequestByAdminParams alloc] init];
	[params setRequestId:requestId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AcceptShareRequestByAdmin.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) acceptShareRequestByAdmin:(NSString *)requestId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAcceptShareRequestByAdminResults *results = [QXAuthUserServiceAcceptShareRequestByAdminResults alloc];
		QXAuthUserServiceAcceptShareRequestByAdminParams *params = [[QXAuthUserServiceAcceptShareRequestByAdminParams alloc] init];
		[params setRequestId:requestId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AcceptShareRequestByAdmin.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAcceptShareRequestByAdminResults *results = [QXAuthUserServiceAcceptShareRequestByAdminResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- RejectShareRequestByAdmin ---
- (NSError *) RejectShareRequestByAdmin:(NSString *)requestId {
	
	QXAuthUserServiceRejectShareRequestByAdminResults *results = [QXAuthUserServiceRejectShareRequestByAdminResults alloc];
	QXAuthUserServiceRejectShareRequestByAdminParams *params = [[QXAuthUserServiceRejectShareRequestByAdminParams alloc] init];
	[params setRequestId:requestId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RejectShareRequestByAdmin.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) rejectShareRequestByAdmin:(NSString *)requestId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceRejectShareRequestByAdminResults *results = [QXAuthUserServiceRejectShareRequestByAdminResults alloc];
		QXAuthUserServiceRejectShareRequestByAdminParams *params = [[QXAuthUserServiceRejectShareRequestByAdminParams alloc] init];
		[params setRequestId:requestId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RejectShareRequestByAdmin.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceRejectShareRequestByAdminResults *results = [QXAuthUserServiceRejectShareRequestByAdminResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- StartTrial ---
- (NSError *) StartTrial {
	
	QXAuthUserServiceStartTrialResults *results = [QXAuthUserServiceStartTrialResults alloc];
	QXAuthUserServiceStartTrialParams *params = [[QXAuthUserServiceStartTrialParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StartTrial.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) startTrial:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceStartTrialResults *results = [QXAuthUserServiceStartTrialResults alloc];
		QXAuthUserServiceStartTrialParams *params = [[QXAuthUserServiceStartTrialParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StartTrial.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceStartTrialResults *results = [QXAuthUserServiceStartTrialResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetOrgSettings ---
- (QXAuthUserServiceGetOrgSettingsResults *) GetOrgSettings {
	
	QXAuthUserServiceGetOrgSettingsResults *results = [QXAuthUserServiceGetOrgSettingsResults alloc];
	QXAuthUserServiceGetOrgSettingsParams *params = [[QXAuthUserServiceGetOrgSettingsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgSettings.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOrgSettings:(void (^)(QXAuthUserServiceGetOrgSettingsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOrgSettingsResults *results = [QXAuthUserServiceGetOrgSettingsResults alloc];
		QXAuthUserServiceGetOrgSettingsParams *params = [[QXAuthUserServiceGetOrgSettingsParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgSettings.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOrgSettingsResults *results = [QXAuthUserServiceGetOrgSettingsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateOrgSettings ---
- (NSError *) UpdateOrgSettings:(QXOrgSettingsInput *)orgSettingInput {
	
	QXAuthUserServiceUpdateOrgSettingsResults *results = [QXAuthUserServiceUpdateOrgSettingsResults alloc];
	QXAuthUserServiceUpdateOrgSettingsParams *params = [[QXAuthUserServiceUpdateOrgSettingsParams alloc] init];
	[params setOrgSettingInput:orgSettingInput];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateOrgSettings.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) updateOrgSettings:(QXOrgSettingsInput *)orgSettingInput success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateOrgSettingsResults *results = [QXAuthUserServiceUpdateOrgSettingsResults alloc];
		QXAuthUserServiceUpdateOrgSettingsParams *params = [[QXAuthUserServiceUpdateOrgSettingsParams alloc] init];
		[params setOrgSettingInput:orgSettingInput];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateOrgSettings.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateOrgSettingsResults *results = [QXAuthUserServiceUpdateOrgSettingsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- CanCreateGroup ---
- (QXAuthUserServiceCanCreateGroupResults *) CanCreateGroup {
	
	QXAuthUserServiceCanCreateGroupResults *results = [QXAuthUserServiceCanCreateGroupResults alloc];
	QXAuthUserServiceCanCreateGroupParams *params = [[QXAuthUserServiceCanCreateGroupParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CanCreateGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) canCreateGroup:(void (^)(QXAuthUserServiceCanCreateGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCanCreateGroupResults *results = [QXAuthUserServiceCanCreateGroupResults alloc];
		QXAuthUserServiceCanCreateGroupParams *params = [[QXAuthUserServiceCanCreateGroupParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CanCreateGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCanCreateGroupResults *results = [QXAuthUserServiceCanCreateGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CanInvitePeople ---
- (QXAuthUserServiceCanInvitePeopleResults *) CanInvitePeople {
	
	QXAuthUserServiceCanInvitePeopleResults *results = [QXAuthUserServiceCanInvitePeopleResults alloc];
	QXAuthUserServiceCanInvitePeopleParams *params = [[QXAuthUserServiceCanInvitePeopleParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CanInvitePeople.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) canInvitePeople:(void (^)(QXAuthUserServiceCanInvitePeopleResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCanInvitePeopleResults *results = [QXAuthUserServiceCanInvitePeopleResults alloc];
		QXAuthUserServiceCanInvitePeopleParams *params = [[QXAuthUserServiceCanInvitePeopleParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CanInvitePeople.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCanInvitePeopleResults *results = [QXAuthUserServiceCanInvitePeopleResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- InvitePeople ---
- (QXAuthUserServiceInvitePeopleResults *) InvitePeople:(NSArray *)emails allowEmpty:(BOOL)allowEmpty skipInvalidEmail:(BOOL)skipInvalidEmail customMessage:(NSString *)customMessage {
	
	QXAuthUserServiceInvitePeopleResults *results = [QXAuthUserServiceInvitePeopleResults alloc];
	QXAuthUserServiceInvitePeopleParams *params = [[QXAuthUserServiceInvitePeopleParams alloc] init];
	[params setEmails:emails];
	[params setAllowEmpty:allowEmpty];
	[params setSkipInvalidEmail:skipInvalidEmail];
	[params setCustomMessage:customMessage];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/InvitePeople.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) invitePeople:(NSArray *)emails allowEmpty:(BOOL)allowEmpty skipInvalidEmail:(BOOL)skipInvalidEmail customMessage:(NSString *)customMessage success:(void (^)(QXAuthUserServiceInvitePeopleResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceInvitePeopleResults *results = [QXAuthUserServiceInvitePeopleResults alloc];
		QXAuthUserServiceInvitePeopleParams *params = [[QXAuthUserServiceInvitePeopleParams alloc] init];
		[params setEmails:emails];
		[params setAllowEmpty:allowEmpty];
		[params setSkipInvalidEmail:skipInvalidEmail];
		[params setCustomMessage:customMessage];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/InvitePeople.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceInvitePeopleResults *results = [QXAuthUserServiceInvitePeopleResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CancelInvitation ---
- (NSError *) CancelInvitation:(NSString *)email {
	
	QXAuthUserServiceCancelInvitationResults *results = [QXAuthUserServiceCancelInvitationResults alloc];
	QXAuthUserServiceCancelInvitationParams *params = [[QXAuthUserServiceCancelInvitationParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CancelInvitation.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) cancelInvitation:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCancelInvitationResults *results = [QXAuthUserServiceCancelInvitationResults alloc];
		QXAuthUserServiceCancelInvitationParams *params = [[QXAuthUserServiceCancelInvitationParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CancelInvitation.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCancelInvitationResults *results = [QXAuthUserServiceCancelInvitationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- ResendInvitation ---
- (NSError *) ResendInvitation:(NSString *)email {
	
	QXAuthUserServiceResendInvitationResults *results = [QXAuthUserServiceResendInvitationResults alloc];
	QXAuthUserServiceResendInvitationParams *params = [[QXAuthUserServiceResendInvitationParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ResendInvitation.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) resendInvitation:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceResendInvitationResults *results = [QXAuthUserServiceResendInvitationResults alloc];
		QXAuthUserServiceResendInvitationParams *params = [[QXAuthUserServiceResendInvitationParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ResendInvitation.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceResendInvitationResults *results = [QXAuthUserServiceResendInvitationResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- ChangeLocale ---
- (NSError *) ChangeLocale:(NSString *)localeName {
	
	QXAuthUserServiceChangeLocaleResults *results = [QXAuthUserServiceChangeLocaleResults alloc];
	QXAuthUserServiceChangeLocaleParams *params = [[QXAuthUserServiceChangeLocaleParams alloc] init];
	[params setLocaleName:localeName];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ChangeLocale.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) changeLocale:(NSString *)localeName success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceChangeLocaleResults *results = [QXAuthUserServiceChangeLocaleResults alloc];
		QXAuthUserServiceChangeLocaleParams *params = [[QXAuthUserServiceChangeLocaleParams alloc] init];
		[params setLocaleName:localeName];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ChangeLocale.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceChangeLocaleResults *results = [QXAuthUserServiceChangeLocaleResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- UpdateGroupAdvancedToDoSettings ---
- (NSError *) UpdateGroupAdvancedToDoSettings:(NSString *)gId settings:(NSString *)settings {
	
	QXAuthUserServiceUpdateGroupAdvancedToDoSettingsResults *results = [QXAuthUserServiceUpdateGroupAdvancedToDoSettingsResults alloc];
	QXAuthUserServiceUpdateGroupAdvancedToDoSettingsParams *params = [[QXAuthUserServiceUpdateGroupAdvancedToDoSettingsParams alloc] init];
	[params setGId:gId];
	[params setSettings:settings];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroupAdvancedToDoSettings.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) updateGroupAdvancedToDoSettings:(NSString *)gId settings:(NSString *)settings success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateGroupAdvancedToDoSettingsResults *results = [QXAuthUserServiceUpdateGroupAdvancedToDoSettingsResults alloc];
		QXAuthUserServiceUpdateGroupAdvancedToDoSettingsParams *params = [[QXAuthUserServiceUpdateGroupAdvancedToDoSettingsParams alloc] init];
		[params setGId:gId];
		[params setSettings:settings];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroupAdvancedToDoSettings.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateGroupAdvancedToDoSettingsResults *results = [QXAuthUserServiceUpdateGroupAdvancedToDoSettingsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- UpdateMailPreference ---
- (NSError *) UpdateMailPreference:(QXMailPreferenceInput *)input {
	
	QXAuthUserServiceUpdateMailPreferenceResults *results = [QXAuthUserServiceUpdateMailPreferenceResults alloc];
	QXAuthUserServiceUpdateMailPreferenceParams *params = [[QXAuthUserServiceUpdateMailPreferenceParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateMailPreference.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) updateMailPreference:(QXMailPreferenceInput *)input success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateMailPreferenceResults *results = [QXAuthUserServiceUpdateMailPreferenceResults alloc];
		QXAuthUserServiceUpdateMailPreferenceParams *params = [[QXAuthUserServiceUpdateMailPreferenceParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateMailPreference.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateMailPreferenceResults *results = [QXAuthUserServiceUpdateMailPreferenceResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- PrepareChangingEmail ---
- (QXAuthUserServicePrepareChangingEmailResults *) PrepareChangingEmail:(NSString *)newEmail {
	
	QXAuthUserServicePrepareChangingEmailResults *results = [QXAuthUserServicePrepareChangingEmailResults alloc];
	QXAuthUserServicePrepareChangingEmailParams *params = [[QXAuthUserServicePrepareChangingEmailParams alloc] init];
	[params setNewEmail:newEmail];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/PrepareChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) prepareChangingEmail:(NSString *)newEmail success:(void (^)(QXAuthUserServicePrepareChangingEmailResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServicePrepareChangingEmailResults *results = [QXAuthUserServicePrepareChangingEmailResults alloc];
		QXAuthUserServicePrepareChangingEmailParams *params = [[QXAuthUserServicePrepareChangingEmailParams alloc] init];
		[params setNewEmail:newEmail];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/PrepareChangingEmail.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServicePrepareChangingEmailResults *results = [QXAuthUserServicePrepareChangingEmailResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ConfirmChangingEmail ---
- (NSError *) ConfirmChangingEmail:(NSString *)token {
	
	QXAuthUserServiceConfirmChangingEmailResults *results = [QXAuthUserServiceConfirmChangingEmailResults alloc];
	QXAuthUserServiceConfirmChangingEmailParams *params = [[QXAuthUserServiceConfirmChangingEmailParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ConfirmChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) confirmChangingEmail:(NSString *)token success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceConfirmChangingEmailResults *results = [QXAuthUserServiceConfirmChangingEmailResults alloc];
		QXAuthUserServiceConfirmChangingEmailParams *params = [[QXAuthUserServiceConfirmChangingEmailParams alloc] init];
		[params setToken:token];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ConfirmChangingEmail.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceConfirmChangingEmailResults *results = [QXAuthUserServiceConfirmChangingEmailResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- UpdateAccount ---
- (NSError *) UpdateAccount:(QXMemberAccountInput *)input {
	
	QXAuthUserServiceUpdateAccountResults *results = [QXAuthUserServiceUpdateAccountResults alloc];
	QXAuthUserServiceUpdateAccountParams *params = [[QXAuthUserServiceUpdateAccountParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateAccount.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) updateAccount:(QXMemberAccountInput *)input success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateAccountResults *results = [QXAuthUserServiceUpdateAccountResults alloc];
		QXAuthUserServiceUpdateAccountParams *params = [[QXAuthUserServiceUpdateAccountParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateAccount.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateAccountResults *results = [QXAuthUserServiceUpdateAccountResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- SendShareRequest ---
- (QXAuthUserServiceSendShareRequestResults *) SendShareRequest:(NSString *)groupId email:(NSString *)email {
	
	QXAuthUserServiceSendShareRequestResults *results = [QXAuthUserServiceSendShareRequestResults alloc];
	QXAuthUserServiceSendShareRequestParams *params = [[QXAuthUserServiceSendShareRequestParams alloc] init];
	[params setGroupId:groupId];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SendShareRequest.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) sendShareRequest:(NSString *)groupId email:(NSString *)email success:(void (^)(QXAuthUserServiceSendShareRequestResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceSendShareRequestResults *results = [QXAuthUserServiceSendShareRequestResults alloc];
		QXAuthUserServiceSendShareRequestParams *params = [[QXAuthUserServiceSendShareRequestParams alloc] init];
		[params setGroupId:groupId];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SendShareRequest.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceSendShareRequestResults *results = [QXAuthUserServiceSendShareRequestResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetShareRequests ---
- (QXAuthUserServiceGetShareRequestsResults *) GetShareRequests:(NSString *)groupId {
	
	QXAuthUserServiceGetShareRequestsResults *results = [QXAuthUserServiceGetShareRequestsResults alloc];
	QXAuthUserServiceGetShareRequestsParams *params = [[QXAuthUserServiceGetShareRequestsParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetShareRequests.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getShareRequests:(NSString *)groupId success:(void (^)(QXAuthUserServiceGetShareRequestsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetShareRequestsResults *results = [QXAuthUserServiceGetShareRequestsResults alloc];
		QXAuthUserServiceGetShareRequestsParams *params = [[QXAuthUserServiceGetShareRequestsParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetShareRequests.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetShareRequestsResults *results = [QXAuthUserServiceGetShareRequestsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CancelShareRequest ---
- (NSError *) CancelShareRequest:(NSString *)requestId {
	
	QXAuthUserServiceCancelShareRequestResults *results = [QXAuthUserServiceCancelShareRequestResults alloc];
	QXAuthUserServiceCancelShareRequestParams *params = [[QXAuthUserServiceCancelShareRequestParams alloc] init];
	[params setRequestId:requestId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CancelShareRequest.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) cancelShareRequest:(NSString *)requestId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCancelShareRequestResults *results = [QXAuthUserServiceCancelShareRequestResults alloc];
		QXAuthUserServiceCancelShareRequestParams *params = [[QXAuthUserServiceCancelShareRequestParams alloc] init];
		[params setRequestId:requestId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CancelShareRequest.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCancelShareRequestResults *results = [QXAuthUserServiceCancelShareRequestResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- StopSharingGroup ---
- (NSError *) StopSharingGroup:(NSString *)requestId {
	
	QXAuthUserServiceStopSharingGroupResults *results = [QXAuthUserServiceStopSharingGroupResults alloc];
	QXAuthUserServiceStopSharingGroupParams *params = [[QXAuthUserServiceStopSharingGroupParams alloc] init];
	[params setRequestId:requestId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopSharingGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) stopSharingGroup:(NSString *)requestId success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceStopSharingGroupResults *results = [QXAuthUserServiceStopSharingGroupResults alloc];
		QXAuthUserServiceStopSharingGroupParams *params = [[QXAuthUserServiceStopSharingGroupParams alloc] init];
		[params setRequestId:requestId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopSharingGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceStopSharingGroupResults *results = [QXAuthUserServiceStopSharingGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- DismissPresentationTip ---
- (NSError *) DismissPresentationTip {
	
	QXAuthUserServiceDismissPresentationTipResults *results = [QXAuthUserServiceDismissPresentationTipResults alloc];
	QXAuthUserServiceDismissPresentationTipParams *params = [[QXAuthUserServiceDismissPresentationTipParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DismissPresentationTip.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) dismissPresentationTip:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceDismissPresentationTipResults *results = [QXAuthUserServiceDismissPresentationTipResults alloc];
		QXAuthUserServiceDismissPresentationTipParams *params = [[QXAuthUserServiceDismissPresentationTipParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DismissPresentationTip.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceDismissPresentationTipResults *results = [QXAuthUserServiceDismissPresentationTipResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetMyChatEntries ---
- (QXAuthUserServiceGetMyChatEntriesResults *) GetMyChatEntries:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetMyChatEntriesResults *results = [QXAuthUserServiceGetMyChatEntriesResults alloc];
	QXAuthUserServiceGetMyChatEntriesParams *params = [[QXAuthUserServiceGetMyChatEntriesParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyChatEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getMyChatEntries:(NSString *)before limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetMyChatEntriesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetMyChatEntriesResults *results = [QXAuthUserServiceGetMyChatEntriesResults alloc];
		QXAuthUserServiceGetMyChatEntriesParams *params = [[QXAuthUserServiceGetMyChatEntriesParams alloc] init];
		[params setBefore:before];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyChatEntries.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetMyChatEntriesResults *results = [QXAuthUserServiceGetMyChatEntriesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetPrivateChat ---
- (QXAuthUserServiceGetPrivateChatResults *) GetPrivateChat:(NSString *)conversationId searchKeyWords:(NSString *)searchKeyWords {
	
	QXAuthUserServiceGetPrivateChatResults *results = [QXAuthUserServiceGetPrivateChatResults alloc];
	QXAuthUserServiceGetPrivateChatParams *params = [[QXAuthUserServiceGetPrivateChatParams alloc] init];
	[params setConversationId:conversationId];
	[params setSearchKeyWords:searchKeyWords];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPrivateChat.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getPrivateChat:(NSString *)conversationId searchKeyWords:(NSString *)searchKeyWords success:(void (^)(QXAuthUserServiceGetPrivateChatResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetPrivateChatResults *results = [QXAuthUserServiceGetPrivateChatResults alloc];
		QXAuthUserServiceGetPrivateChatParams *params = [[QXAuthUserServiceGetPrivateChatParams alloc] init];
		[params setConversationId:conversationId];
		[params setSearchKeyWords:searchKeyWords];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPrivateChat.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetPrivateChatResults *results = [QXAuthUserServiceGetPrivateChatResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateQortexSupport ---
- (QXAuthUserServiceCreateQortexSupportResults *) CreateQortexSupport:(QXQortexSupportInput *)input {
	
	QXAuthUserServiceCreateQortexSupportResults *results = [QXAuthUserServiceCreateQortexSupportResults alloc];
	QXAuthUserServiceCreateQortexSupportParams *params = [[QXAuthUserServiceCreateQortexSupportParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateQortexSupport.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createQortexSupport:(QXQortexSupportInput *)input success:(void (^)(QXAuthUserServiceCreateQortexSupportResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCreateQortexSupportResults *results = [QXAuthUserServiceCreateQortexSupportResults alloc];
		QXAuthUserServiceCreateQortexSupportParams *params = [[QXAuthUserServiceCreateQortexSupportParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateQortexSupport.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCreateQortexSupportResults *results = [QXAuthUserServiceCreateQortexSupportResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateQortexSupportComment ---
- (QXAuthUserServiceCreateQortexSupportCommentResults *) CreateQortexSupportComment:(QXQortexSupportInput *)input {
	
	QXAuthUserServiceCreateQortexSupportCommentResults *results = [QXAuthUserServiceCreateQortexSupportCommentResults alloc];
	QXAuthUserServiceCreateQortexSupportCommentParams *params = [[QXAuthUserServiceCreateQortexSupportCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateQortexSupportComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createQortexSupportComment:(QXQortexSupportInput *)input success:(void (^)(QXAuthUserServiceCreateQortexSupportCommentResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCreateQortexSupportCommentResults *results = [QXAuthUserServiceCreateQortexSupportCommentResults alloc];
		QXAuthUserServiceCreateQortexSupportCommentParams *params = [[QXAuthUserServiceCreateQortexSupportCommentParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateQortexSupportComment.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCreateQortexSupportCommentResults *results = [QXAuthUserServiceCreateQortexSupportCommentResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetQortexSupport ---
- (QXAuthUserServiceGetQortexSupportResults *) GetQortexSupport:(NSString *)entryId {
	
	QXAuthUserServiceGetQortexSupportResults *results = [QXAuthUserServiceGetQortexSupportResults alloc];
	QXAuthUserServiceGetQortexSupportParams *params = [[QXAuthUserServiceGetQortexSupportParams alloc] init];
	[params setEntryId:entryId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupport.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getQortexSupport:(NSString *)entryId success:(void (^)(QXAuthUserServiceGetQortexSupportResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetQortexSupportResults *results = [QXAuthUserServiceGetQortexSupportResults alloc];
		QXAuthUserServiceGetQortexSupportParams *params = [[QXAuthUserServiceGetQortexSupportParams alloc] init];
		[params setEntryId:entryId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupport.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetQortexSupportResults *results = [QXAuthUserServiceGetQortexSupportResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetQortexSupportComment ---
- (QXAuthUserServiceGetQortexSupportCommentResults *) GetQortexSupportComment:(NSString *)entryId {
	
	QXAuthUserServiceGetQortexSupportCommentResults *results = [QXAuthUserServiceGetQortexSupportCommentResults alloc];
	QXAuthUserServiceGetQortexSupportCommentParams *params = [[QXAuthUserServiceGetQortexSupportCommentParams alloc] init];
	[params setEntryId:entryId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupportComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getQortexSupportComment:(NSString *)entryId success:(void (^)(QXAuthUserServiceGetQortexSupportCommentResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetQortexSupportCommentResults *results = [QXAuthUserServiceGetQortexSupportCommentResults alloc];
		QXAuthUserServiceGetQortexSupportCommentParams *params = [[QXAuthUserServiceGetQortexSupportCommentParams alloc] init];
		[params setEntryId:entryId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupportComment.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetQortexSupportCommentResults *results = [QXAuthUserServiceGetQortexSupportCommentResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateQortexSupport ---
- (QXAuthUserServiceUpdateQortexSupportResults *) UpdateQortexSupport:(QXQortexSupportInput *)input {
	
	QXAuthUserServiceUpdateQortexSupportResults *results = [QXAuthUserServiceUpdateQortexSupportResults alloc];
	QXAuthUserServiceUpdateQortexSupportParams *params = [[QXAuthUserServiceUpdateQortexSupportParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateQortexSupport.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateQortexSupport:(QXQortexSupportInput *)input success:(void (^)(QXAuthUserServiceUpdateQortexSupportResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateQortexSupportResults *results = [QXAuthUserServiceUpdateQortexSupportResults alloc];
		QXAuthUserServiceUpdateQortexSupportParams *params = [[QXAuthUserServiceUpdateQortexSupportParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateQortexSupport.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateQortexSupportResults *results = [QXAuthUserServiceUpdateQortexSupportResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateQortexSupportComment ---
- (QXAuthUserServiceUpdateQortexSupportCommentResults *) UpdateQortexSupportComment:(QXQortexSupportInput *)input {
	
	QXAuthUserServiceUpdateQortexSupportCommentResults *results = [QXAuthUserServiceUpdateQortexSupportCommentResults alloc];
	QXAuthUserServiceUpdateQortexSupportCommentParams *params = [[QXAuthUserServiceUpdateQortexSupportCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateQortexSupportComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateQortexSupportComment:(QXQortexSupportInput *)input success:(void (^)(QXAuthUserServiceUpdateQortexSupportCommentResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateQortexSupportCommentResults *results = [QXAuthUserServiceUpdateQortexSupportCommentResults alloc];
		QXAuthUserServiceUpdateQortexSupportCommentParams *params = [[QXAuthUserServiceUpdateQortexSupportCommentParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateQortexSupportComment.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateQortexSupportCommentResults *results = [QXAuthUserServiceUpdateQortexSupportCommentResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetQortexSupportHelpLink ---
- (QXAuthUserServiceGetQortexSupportHelpLinkResults *) GetQortexSupportHelpLink:(NSString *)title {
	
	QXAuthUserServiceGetQortexSupportHelpLinkResults *results = [QXAuthUserServiceGetQortexSupportHelpLinkResults alloc];
	QXAuthUserServiceGetQortexSupportHelpLinkParams *params = [[QXAuthUserServiceGetQortexSupportHelpLinkParams alloc] init];
	[params setTitle:title];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupportHelpLink.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getQortexSupportHelpLink:(NSString *)title success:(void (^)(QXAuthUserServiceGetQortexSupportHelpLinkResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetQortexSupportHelpLinkResults *results = [QXAuthUserServiceGetQortexSupportHelpLinkResults alloc];
		QXAuthUserServiceGetQortexSupportHelpLinkParams *params = [[QXAuthUserServiceGetQortexSupportHelpLinkParams alloc] init];
		[params setTitle:title];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexSupportHelpLink.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetQortexSupportHelpLinkResults *results = [QXAuthUserServiceGetQortexSupportHelpLinkResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- NewTask ---
- (QXAuthUserServiceNewTaskResults *) NewTask:(NSString *)groupId {
	
	QXAuthUserServiceNewTaskResults *results = [QXAuthUserServiceNewTaskResults alloc];
	QXAuthUserServiceNewTaskParams *params = [[QXAuthUserServiceNewTaskParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/NewTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) newTask:(NSString *)groupId success:(void (^)(QXAuthUserServiceNewTaskResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceNewTaskResults *results = [QXAuthUserServiceNewTaskResults alloc];
		QXAuthUserServiceNewTaskParams *params = [[QXAuthUserServiceNewTaskParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/NewTask.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceNewTaskResults *results = [QXAuthUserServiceNewTaskResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- EditTask ---
- (QXAuthUserServiceEditTaskResults *) EditTask:(NSString *)groupId taskId:(NSString *)taskId {
	
	QXAuthUserServiceEditTaskResults *results = [QXAuthUserServiceEditTaskResults alloc];
	QXAuthUserServiceEditTaskParams *params = [[QXAuthUserServiceEditTaskParams alloc] init];
	[params setGroupId:groupId];
	[params setTaskId:taskId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/EditTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) editTask:(NSString *)groupId taskId:(NSString *)taskId success:(void (^)(QXAuthUserServiceEditTaskResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceEditTaskResults *results = [QXAuthUserServiceEditTaskResults alloc];
		QXAuthUserServiceEditTaskParams *params = [[QXAuthUserServiceEditTaskParams alloc] init];
		[params setGroupId:groupId];
		[params setTaskId:taskId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/EditTask.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceEditTaskResults *results = [QXAuthUserServiceEditTaskResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetAdvancedTask ---
- (QXAuthUserServiceGetAdvancedTaskResults *) GetAdvancedTask:(NSString *)taskId {
	
	QXAuthUserServiceGetAdvancedTaskResults *results = [QXAuthUserServiceGetAdvancedTaskResults alloc];
	QXAuthUserServiceGetAdvancedTaskParams *params = [[QXAuthUserServiceGetAdvancedTaskParams alloc] init];
	[params setTaskId:taskId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetAdvancedTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getAdvancedTask:(NSString *)taskId success:(void (^)(QXAuthUserServiceGetAdvancedTaskResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetAdvancedTaskResults *results = [QXAuthUserServiceGetAdvancedTaskResults alloc];
		QXAuthUserServiceGetAdvancedTaskParams *params = [[QXAuthUserServiceGetAdvancedTaskParams alloc] init];
		[params setTaskId:taskId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetAdvancedTask.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetAdvancedTaskResults *results = [QXAuthUserServiceGetAdvancedTaskResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ClaimTask ---
- (QXAuthUserServiceClaimTaskResults *) ClaimTask:(NSString *)taskId groupId:(NSString *)groupId {
	
	QXAuthUserServiceClaimTaskResults *results = [QXAuthUserServiceClaimTaskResults alloc];
	QXAuthUserServiceClaimTaskParams *params = [[QXAuthUserServiceClaimTaskParams alloc] init];
	[params setTaskId:taskId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ClaimTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) claimTask:(NSString *)taskId groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceClaimTaskResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceClaimTaskResults *results = [QXAuthUserServiceClaimTaskResults alloc];
		QXAuthUserServiceClaimTaskParams *params = [[QXAuthUserServiceClaimTaskParams alloc] init];
		[params setTaskId:taskId];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ClaimTask.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceClaimTaskResults *results = [QXAuthUserServiceClaimTaskResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- UpdateTask ---
- (QXAuthUserServiceUpdateTaskResults *) UpdateTask:(QXTaskInput *)input {
	
	QXAuthUserServiceUpdateTaskResults *results = [QXAuthUserServiceUpdateTaskResults alloc];
	QXAuthUserServiceUpdateTaskParams *params = [[QXAuthUserServiceUpdateTaskParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) updateTask:(QXTaskInput *)input success:(void (^)(QXAuthUserServiceUpdateTaskResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceUpdateTaskResults *results = [QXAuthUserServiceUpdateTaskResults alloc];
		QXAuthUserServiceUpdateTaskParams *params = [[QXAuthUserServiceUpdateTaskParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateTask.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceUpdateTaskResults *results = [QXAuthUserServiceUpdateTaskResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetTasksForMe ---
- (QXAuthUserServiceGetTasksForMeResults *) GetTasksForMe {
	
	QXAuthUserServiceGetTasksForMeResults *results = [QXAuthUserServiceGetTasksForMeResults alloc];
	QXAuthUserServiceGetTasksForMeParams *params = [[QXAuthUserServiceGetTasksForMeParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetTasksForMe.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getTasksForMe:(void (^)(QXAuthUserServiceGetTasksForMeResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetTasksForMeResults *results = [QXAuthUserServiceGetTasksForMeResults alloc];
		QXAuthUserServiceGetTasksForMeParams *params = [[QXAuthUserServiceGetTasksForMeParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetTasksForMe.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetTasksForMeResults *results = [QXAuthUserServiceGetTasksForMeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOpenTasksIMade ---
- (QXAuthUserServiceGetOpenTasksIMadeResults *) GetOpenTasksIMade {
	
	QXAuthUserServiceGetOpenTasksIMadeResults *results = [QXAuthUserServiceGetOpenTasksIMadeResults alloc];
	QXAuthUserServiceGetOpenTasksIMadeParams *params = [[QXAuthUserServiceGetOpenTasksIMadeParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOpenTasksIMade.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOpenTasksIMade:(void (^)(QXAuthUserServiceGetOpenTasksIMadeResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOpenTasksIMadeResults *results = [QXAuthUserServiceGetOpenTasksIMadeResults alloc];
		QXAuthUserServiceGetOpenTasksIMadeParams *params = [[QXAuthUserServiceGetOpenTasksIMadeParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOpenTasksIMade.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOpenTasksIMadeResults *results = [QXAuthUserServiceGetOpenTasksIMadeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetClosedTasksIMade ---
- (QXAuthUserServiceGetClosedTasksIMadeResults *) GetClosedTasksIMade:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetClosedTasksIMadeResults *results = [QXAuthUserServiceGetClosedTasksIMadeResults alloc];
	QXAuthUserServiceGetClosedTasksIMadeParams *params = [[QXAuthUserServiceGetClosedTasksIMadeParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetClosedTasksIMade.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getClosedTasksIMade:(NSString *)before limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetClosedTasksIMadeResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetClosedTasksIMadeResults *results = [QXAuthUserServiceGetClosedTasksIMadeResults alloc];
		QXAuthUserServiceGetClosedTasksIMadeParams *params = [[QXAuthUserServiceGetClosedTasksIMadeParams alloc] init];
		[params setBefore:before];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetClosedTasksIMade.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetClosedTasksIMadeResults *results = [QXAuthUserServiceGetClosedTasksIMadeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetOpenTasksIWorkedOn ---
- (QXAuthUserServiceGetOpenTasksIWorkedOnResults *) GetOpenTasksIWorkedOn {
	
	QXAuthUserServiceGetOpenTasksIWorkedOnResults *results = [QXAuthUserServiceGetOpenTasksIWorkedOnResults alloc];
	QXAuthUserServiceGetOpenTasksIWorkedOnParams *params = [[QXAuthUserServiceGetOpenTasksIWorkedOnParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOpenTasksIWorkedOn.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getOpenTasksIWorkedOn:(void (^)(QXAuthUserServiceGetOpenTasksIWorkedOnResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetOpenTasksIWorkedOnResults *results = [QXAuthUserServiceGetOpenTasksIWorkedOnResults alloc];
		QXAuthUserServiceGetOpenTasksIWorkedOnParams *params = [[QXAuthUserServiceGetOpenTasksIWorkedOnParams alloc] init];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOpenTasksIWorkedOn.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetOpenTasksIWorkedOnResults *results = [QXAuthUserServiceGetOpenTasksIWorkedOnResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetClosedTasksIWorkedOn ---
- (QXAuthUserServiceGetClosedTasksIWorkedOnResults *) GetClosedTasksIWorkedOn:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetClosedTasksIWorkedOnResults *results = [QXAuthUserServiceGetClosedTasksIWorkedOnResults alloc];
	QXAuthUserServiceGetClosedTasksIWorkedOnParams *params = [[QXAuthUserServiceGetClosedTasksIWorkedOnParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetClosedTasksIWorkedOn.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getClosedTasksIWorkedOn:(NSString *)before limit:(NSNumber *)limit success:(void (^)(QXAuthUserServiceGetClosedTasksIWorkedOnResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetClosedTasksIWorkedOnResults *results = [QXAuthUserServiceGetClosedTasksIWorkedOnResults alloc];
		QXAuthUserServiceGetClosedTasksIWorkedOnParams *params = [[QXAuthUserServiceGetClosedTasksIWorkedOnParams alloc] init];
		[params setBefore:before];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetClosedTasksIWorkedOn.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetClosedTasksIWorkedOnResults *results = [QXAuthUserServiceGetClosedTasksIWorkedOnResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetGroupAdvancedToDoSetting ---
- (QXAuthUserServiceGetGroupAdvancedToDoSettingResults *) GetGroupAdvancedToDoSetting:(NSString *)gId {
	
	QXAuthUserServiceGetGroupAdvancedToDoSettingResults *results = [QXAuthUserServiceGetGroupAdvancedToDoSettingResults alloc];
	QXAuthUserServiceGetGroupAdvancedToDoSettingParams *params = [[QXAuthUserServiceGetGroupAdvancedToDoSettingParams alloc] init];
	[params setGId:gId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupAdvancedToDoSetting.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getGroupAdvancedToDoSetting:(NSString *)gId success:(void (^)(QXAuthUserServiceGetGroupAdvancedToDoSettingResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceGetGroupAdvancedToDoSettingResults *results = [QXAuthUserServiceGetGroupAdvancedToDoSettingResults alloc];
		QXAuthUserServiceGetGroupAdvancedToDoSettingParams *params = [[QXAuthUserServiceGetGroupAdvancedToDoSettingParams alloc] init];
		[params setGId:gId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupAdvancedToDoSetting.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceGetGroupAdvancedToDoSettingResults *results = [QXAuthUserServiceGetGroupAdvancedToDoSettingResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllOpenAdvancedToDosInGroup ---
- (QXAuthUserServiceAllOpenAdvancedToDosInGroupResults *) AllOpenAdvancedToDosInGroup:(NSString *)groupId {
	
	QXAuthUserServiceAllOpenAdvancedToDosInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosInGroupResults alloc];
	QXAuthUserServiceAllOpenAdvancedToDosInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosInGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allOpenAdvancedToDosInGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceAllOpenAdvancedToDosInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllOpenAdvancedToDosInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosInGroupResults alloc];
		QXAuthUserServiceAllOpenAdvancedToDosInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosInGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllOpenAdvancedToDosInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllOpenAdvancedToDosGroupingByUserInGroup ---
- (QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults *) AllOpenAdvancedToDosGroupingByUserInGroup:(NSString *)groupId {
	
	QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults alloc];
	QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosGroupingByUserInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allOpenAdvancedToDosGroupingByUserInGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults alloc];
		QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosGroupingByUserInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByUserInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllOpenAdvancedToDosGroupingByStatusInGroup ---
- (QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults *) AllOpenAdvancedToDosGroupingByStatusInGroup:(NSString *)groupId {
	
	QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults alloc];
	QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosGroupingByStatusInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allOpenAdvancedToDosGroupingByStatusInGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults alloc];
		QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosGroupingByStatusInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByStatusInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllOpenAdvancedToDosGroupingByLabelInGroup ---
- (QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults *) AllOpenAdvancedToDosGroupingByLabelInGroup:(NSString *)groupId {
	
	QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults alloc];
	QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosGroupingByLabelInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allOpenAdvancedToDosGroupingByLabelInGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults alloc];
		QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupParams *params = [[QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenAdvancedToDosGroupingByLabelInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults *results = [QXAuthUserServiceAllOpenAdvancedToDosGroupingByLabelInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllOpenBasicToDosInGroup ---
- (QXAuthUserServiceAllOpenBasicToDosInGroupResults *) AllOpenBasicToDosInGroup:(NSString *)groupId {
	
	QXAuthUserServiceAllOpenBasicToDosInGroupResults *results = [QXAuthUserServiceAllOpenBasicToDosInGroupResults alloc];
	QXAuthUserServiceAllOpenBasicToDosInGroupParams *params = [[QXAuthUserServiceAllOpenBasicToDosInGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenBasicToDosInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allOpenBasicToDosInGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceAllOpenBasicToDosInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllOpenBasicToDosInGroupResults *results = [QXAuthUserServiceAllOpenBasicToDosInGroupResults alloc];
		QXAuthUserServiceAllOpenBasicToDosInGroupParams *params = [[QXAuthUserServiceAllOpenBasicToDosInGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenBasicToDosInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllOpenBasicToDosInGroupResults *results = [QXAuthUserServiceAllOpenBasicToDosInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllOpenBasicToDosGroupingByUserInGroup ---
- (QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults *) AllOpenBasicToDosGroupingByUserInGroup:(NSString *)groupId {
	
	QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults *results = [QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults alloc];
	QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupParams *params = [[QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenBasicToDosGroupingByUserInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allOpenBasicToDosGroupingByUserInGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults *results = [QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults alloc];
		QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupParams *params = [[QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllOpenBasicToDosGroupingByUserInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults *results = [QXAuthUserServiceAllOpenBasicToDosGroupingByUserInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllClosedBasicToDosInGroup ---
- (QXAuthUserServiceAllClosedBasicToDosInGroupResults *) AllClosedBasicToDosInGroup:(NSString *)groupId afterTimeS:(NSString *)afterTimeS {
	
	QXAuthUserServiceAllClosedBasicToDosInGroupResults *results = [QXAuthUserServiceAllClosedBasicToDosInGroupResults alloc];
	QXAuthUserServiceAllClosedBasicToDosInGroupParams *params = [[QXAuthUserServiceAllClosedBasicToDosInGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setAfterTimeS:afterTimeS];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllClosedBasicToDosInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allClosedBasicToDosInGroup:(NSString *)groupId afterTimeS:(NSString *)afterTimeS success:(void (^)(QXAuthUserServiceAllClosedBasicToDosInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllClosedBasicToDosInGroupResults *results = [QXAuthUserServiceAllClosedBasicToDosInGroupResults alloc];
		QXAuthUserServiceAllClosedBasicToDosInGroupParams *params = [[QXAuthUserServiceAllClosedBasicToDosInGroupParams alloc] init];
		[params setGroupId:groupId];
		[params setAfterTimeS:afterTimeS];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllClosedBasicToDosInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllClosedBasicToDosInGroupResults *results = [QXAuthUserServiceAllClosedBasicToDosInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- AllClosedAdvancedToDosInGroup ---
- (QXAuthUserServiceAllClosedAdvancedToDosInGroupResults *) AllClosedAdvancedToDosInGroup:(NSString *)groupId {
	
	QXAuthUserServiceAllClosedAdvancedToDosInGroupResults *results = [QXAuthUserServiceAllClosedAdvancedToDosInGroupResults alloc];
	QXAuthUserServiceAllClosedAdvancedToDosInGroupParams *params = [[QXAuthUserServiceAllClosedAdvancedToDosInGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllClosedAdvancedToDosInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) allClosedAdvancedToDosInGroup:(NSString *)groupId success:(void (^)(QXAuthUserServiceAllClosedAdvancedToDosInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceAllClosedAdvancedToDosInGroupResults *results = [QXAuthUserServiceAllClosedAdvancedToDosInGroupResults alloc];
		QXAuthUserServiceAllClosedAdvancedToDosInGroupParams *params = [[QXAuthUserServiceAllClosedAdvancedToDosInGroupParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AllClosedAdvancedToDosInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceAllClosedAdvancedToDosInGroupResults *results = [QXAuthUserServiceAllClosedAdvancedToDosInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- MoreClosedAdvancedToDosWithStatusInGroup ---
- (QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults *) MoreClosedAdvancedToDosWithStatusInGroup:(NSString *)groupId status:(NSNumber *)status afterTime:(NSString *)afterTime {
	
	QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults *results = [QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults alloc];
	QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupParams *params = [[QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setStatus:status];
	[params setAfterTime:afterTime];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MoreClosedAdvancedToDosWithStatusInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) moreClosedAdvancedToDosWithStatusInGroup:(NSString *)groupId status:(NSNumber *)status afterTime:(NSString *)afterTime success:(void (^)(QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults *results = [QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults alloc];
		QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupParams *params = [[QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupParams alloc] init];
		[params setGroupId:groupId];
		[params setStatus:status];
		[params setAfterTime:afterTime];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MoreClosedAdvancedToDosWithStatusInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults *results = [QXAuthUserServiceMoreClosedAdvancedToDosWithStatusInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CountOfClosedToDosInGroup ---
- (QXAuthUserServiceCountOfClosedToDosInGroupResults *) CountOfClosedToDosInGroup:(NSNumber *)ttype groupId:(NSString *)groupId {
	
	QXAuthUserServiceCountOfClosedToDosInGroupResults *results = [QXAuthUserServiceCountOfClosedToDosInGroupResults alloc];
	QXAuthUserServiceCountOfClosedToDosInGroupParams *params = [[QXAuthUserServiceCountOfClosedToDosInGroupParams alloc] init];
	[params setTtype:ttype];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CountOfClosedToDosInGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) countOfClosedToDosInGroup:(NSNumber *)ttype groupId:(NSString *)groupId success:(void (^)(QXAuthUserServiceCountOfClosedToDosInGroupResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceCountOfClosedToDosInGroupResults *results = [QXAuthUserServiceCountOfClosedToDosInGroupResults alloc];
		QXAuthUserServiceCountOfClosedToDosInGroupParams *params = [[QXAuthUserServiceCountOfClosedToDosInGroupParams alloc] init];
		[params setTtype:ttype];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CountOfClosedToDosInGroup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceCountOfClosedToDosInGroupResults *results = [QXAuthUserServiceCountOfClosedToDosInGroupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ToDoCSV ---
- (QXAuthUserServiceToDoCSVResults *) ToDoCSV:(NSString *)groupId {
	
	QXAuthUserServiceToDoCSVResults *results = [QXAuthUserServiceToDoCSVResults alloc];
	QXAuthUserServiceToDoCSVParams *params = [[QXAuthUserServiceToDoCSVParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ToDoCSV.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) toDoCSV:(NSString *)groupId success:(void (^)(QXAuthUserServiceToDoCSVResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXAuthUserServiceToDoCSVResults *results = [QXAuthUserServiceToDoCSVResults alloc];
		QXAuthUserServiceToDoCSVParams *params = [[QXAuthUserServiceToDoCSVParams alloc] init];
		[params setGroupId:groupId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ToDoCSV.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXAuthUserServiceToDoCSVResults *results = [QXAuthUserServiceToDoCSVResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}
@end

@implementation QXPublicService : NSObject

- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}


// --- GetSession ---
- (QXPublicServiceGetSessionResults *) GetSession:(NSString *)email password:(NSString *)password locale:(NSString *)locale {
	
	QXPublicServiceGetSessionResults *results = [QXPublicServiceGetSessionResults alloc];
	QXPublicServiceGetSessionParams *params = [[QXPublicServiceGetSessionParams alloc] init];
	[params setEmail:email];
	[params setPassword:password];
	[params setLocale:locale];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetSession.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getSession:(NSString *)email password:(NSString *)password locale:(NSString *)locale success:(void (^)(QXPublicServiceGetSessionResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceGetSessionResults *results = [QXPublicServiceGetSessionResults alloc];
		QXPublicServiceGetSessionParams *params = [[QXPublicServiceGetSessionParams alloc] init];
		[params setEmail:email];
		[params setPassword:password];
		[params setLocale:locale];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetSession.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceGetSessionResults *results = [QXPublicServiceGetSessionResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetAuthUserService ---
- (QXAuthUserService *) GetAuthUserService:(NSString *)session {
	
	QXAuthUserService *results = [QXAuthUserService alloc];
	[results setSession:session];
	
	return results;
}

- (void) getAuthUserService:(NSString *)session success:(void (^)(QXAuthUserService* AuthUserService))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		QXAuthUserService *results = [QXAuthUserService alloc];
		
			[results setSession:session];
		
	
}

// --- GetAuthorizedAdmin ---
- (QXPublicServiceGetAuthorizedAdminResults *) GetAuthorizedAdmin:(NSString *)session {
	
	QXPublicServiceGetAuthorizedAdminResults *results = [QXPublicServiceGetAuthorizedAdminResults alloc];
	QXPublicServiceGetAuthorizedAdminParams *params = [[QXPublicServiceGetAuthorizedAdminParams alloc] init];
	[params setSession:session];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetAuthorizedAdmin.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getAuthorizedAdmin:(NSString *)session success:(void (^)(QXPublicServiceGetAuthorizedAdminResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceGetAuthorizedAdminResults *results = [QXPublicServiceGetAuthorizedAdminResults alloc];
		QXPublicServiceGetAuthorizedAdminParams *params = [[QXPublicServiceGetAuthorizedAdminParams alloc] init];
		[params setSession:session];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetAuthorizedAdmin.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceGetAuthorizedAdminResults *results = [QXPublicServiceGetAuthorizedAdminResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetAuthAdminService ---
- (QXAuthAdminService *) GetAuthAdminService:(NSString *)session {
	
	QXAuthAdminService *results = [QXAuthAdminService alloc];
	[results setSession:session];
	
	return results;
}

- (void) getAuthAdminService:(NSString *)session success:(void (^)(QXAuthAdminService* AuthAdminService))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		QXAuthAdminService *results = [QXAuthAdminService alloc];
		
			[results setSession:session];
		
	
}

// --- FindPassword ---
- (NSError *) FindPassword:(NSString *)email {
	
	QXPublicServiceFindPasswordResults *results = [QXPublicServiceFindPasswordResults alloc];
	QXPublicServiceFindPasswordParams *params = [[QXPublicServiceFindPasswordParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/FindPassword.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) findPassword:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceFindPasswordResults *results = [QXPublicServiceFindPasswordResults alloc];
		QXPublicServiceFindPasswordParams *params = [[QXPublicServiceFindPasswordParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/FindPassword.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceFindPasswordResults *results = [QXPublicServiceFindPasswordResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- ResetPassword ---
- (QXPublicServiceResetPasswordResults *) ResetPassword:(NSString *)token password:(NSString *)password confirmedPassword:(NSString *)confirmedPassword {
	
	QXPublicServiceResetPasswordResults *results = [QXPublicServiceResetPasswordResults alloc];
	QXPublicServiceResetPasswordParams *params = [[QXPublicServiceResetPasswordParams alloc] init];
	[params setToken:token];
	[params setPassword:password];
	[params setConfirmedPassword:confirmedPassword];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ResetPassword.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) resetPassword:(NSString *)token password:(NSString *)password confirmedPassword:(NSString *)confirmedPassword success:(void (^)(QXPublicServiceResetPasswordResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceResetPasswordResults *results = [QXPublicServiceResetPasswordResults alloc];
		QXPublicServiceResetPasswordParams *params = [[QXPublicServiceResetPasswordParams alloc] init];
		[params setToken:token];
		[params setPassword:password];
		[params setConfirmedPassword:confirmedPassword];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ResetPassword.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceResetPasswordResults *results = [QXPublicServiceResetPasswordResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- PrepareChangingEmail ---
- (QXPublicServicePrepareChangingEmailResults *) PrepareChangingEmail:(NSString *)memberId newEmail:(NSString *)newEmail sharingToken:(NSString *)sharingToken invitationToken:(NSString *)invitationToken {
	
	QXPublicServicePrepareChangingEmailResults *results = [QXPublicServicePrepareChangingEmailResults alloc];
	QXPublicServicePrepareChangingEmailParams *params = [[QXPublicServicePrepareChangingEmailParams alloc] init];
	[params setMemberId:memberId];
	[params setNewEmail:newEmail];
	[params setSharingToken:sharingToken];
	[params setInvitationToken:invitationToken];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/PrepareChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) prepareChangingEmail:(NSString *)memberId newEmail:(NSString *)newEmail sharingToken:(NSString *)sharingToken invitationToken:(NSString *)invitationToken success:(void (^)(QXPublicServicePrepareChangingEmailResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServicePrepareChangingEmailResults *results = [QXPublicServicePrepareChangingEmailResults alloc];
		QXPublicServicePrepareChangingEmailParams *params = [[QXPublicServicePrepareChangingEmailParams alloc] init];
		[params setMemberId:memberId];
		[params setNewEmail:newEmail];
		[params setSharingToken:sharingToken];
		[params setInvitationToken:invitationToken];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/PrepareChangingEmail.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServicePrepareChangingEmailResults *results = [QXPublicServicePrepareChangingEmailResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ConfirmChangingEmail ---
- (QXPublicServiceConfirmChangingEmailResults *) ConfirmChangingEmail:(NSString *)token {
	
	QXPublicServiceConfirmChangingEmailResults *results = [QXPublicServiceConfirmChangingEmailResults alloc];
	QXPublicServiceConfirmChangingEmailParams *params = [[QXPublicServiceConfirmChangingEmailParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ConfirmChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) confirmChangingEmail:(NSString *)token success:(void (^)(QXPublicServiceConfirmChangingEmailResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceConfirmChangingEmailResults *results = [QXPublicServiceConfirmChangingEmailResults alloc];
		QXPublicServiceConfirmChangingEmailParams *params = [[QXPublicServiceConfirmChangingEmailParams alloc] init];
		[params setToken:token];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ConfirmChangingEmail.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceConfirmChangingEmailResults *results = [QXPublicServiceConfirmChangingEmailResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CancelChangingEmail ---
- (NSError *) CancelChangingEmail:(NSString *)token {
	
	QXPublicServiceCancelChangingEmailResults *results = [QXPublicServiceCancelChangingEmailResults alloc];
	QXPublicServiceCancelChangingEmailParams *params = [[QXPublicServiceCancelChangingEmailParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/CancelChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) cancelChangingEmail:(NSString *)token success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceCancelChangingEmailResults *results = [QXPublicServiceCancelChangingEmailResults alloc];
		QXPublicServiceCancelChangingEmailParams *params = [[QXPublicServiceCancelChangingEmailParams alloc] init];
		[params setToken:token];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/CancelChangingEmail.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceCancelChangingEmailResults *results = [QXPublicServiceCancelChangingEmailResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- ChangeEmailToAcceptSharing ---
- (NSError *) ChangeEmailToAcceptSharing:(NSString *)token newEmail:(NSString *)newEmail {
	
	QXPublicServiceChangeEmailToAcceptSharingResults *results = [QXPublicServiceChangeEmailToAcceptSharingResults alloc];
	QXPublicServiceChangeEmailToAcceptSharingParams *params = [[QXPublicServiceChangeEmailToAcceptSharingParams alloc] init];
	[params setToken:token];
	[params setNewEmail:newEmail];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ChangeEmailToAcceptSharing.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) changeEmailToAcceptSharing:(NSString *)token newEmail:(NSString *)newEmail success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceChangeEmailToAcceptSharingResults *results = [QXPublicServiceChangeEmailToAcceptSharingResults alloc];
		QXPublicServiceChangeEmailToAcceptSharingParams *params = [[QXPublicServiceChangeEmailToAcceptSharingParams alloc] init];
		[params setToken:token];
		[params setNewEmail:newEmail];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ChangeEmailToAcceptSharing.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceChangeEmailToAcceptSharingResults *results = [QXPublicServiceChangeEmailToAcceptSharingResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- GetShareRequest ---
- (QXPublicServiceGetShareRequestResults *) GetShareRequest:(NSString *)token memberId:(NSString *)memberId {
	
	QXPublicServiceGetShareRequestResults *results = [QXPublicServiceGetShareRequestResults alloc];
	QXPublicServiceGetShareRequestParams *params = [[QXPublicServiceGetShareRequestParams alloc] init];
	[params setToken:token];
	[params setMemberId:memberId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetShareRequest.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getShareRequest:(NSString *)token memberId:(NSString *)memberId success:(void (^)(QXPublicServiceGetShareRequestResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceGetShareRequestResults *results = [QXPublicServiceGetShareRequestResults alloc];
		QXPublicServiceGetShareRequestParams *params = [[QXPublicServiceGetShareRequestParams alloc] init];
		[params setToken:token];
		[params setMemberId:memberId];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetShareRequest.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceGetShareRequestResults *results = [QXPublicServiceGetShareRequestResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- ContactUs ---
- (QXPublicServiceContactUsResults *) ContactUs:(QXContactInput *)input {
	
	QXPublicServiceContactUsResults *results = [QXPublicServiceContactUsResults alloc];
	QXPublicServiceContactUsParams *params = [[QXPublicServiceContactUsParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ContactUs.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) contactUs:(QXContactInput *)input success:(void (^)(QXPublicServiceContactUsResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceContactUsResults *results = [QXPublicServiceContactUsResults alloc];
		QXPublicServiceContactUsParams *params = [[QXPublicServiceContactUsParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ContactUs.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceContactUsResults *results = [QXPublicServiceContactUsResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetBlogEntries ---
- (QXPublicServiceGetBlogEntriesResults *) GetBlogEntries:(NSString *)doi pageNum:(NSNumber *)pageNum limit:(NSNumber *)limit {
	
	QXPublicServiceGetBlogEntriesResults *results = [QXPublicServiceGetBlogEntriesResults alloc];
	QXPublicServiceGetBlogEntriesParams *params = [[QXPublicServiceGetBlogEntriesParams alloc] init];
	[params setDoi:doi];
	[params setPageNum:pageNum];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetBlogEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getBlogEntries:(NSString *)doi pageNum:(NSNumber *)pageNum limit:(NSNumber *)limit success:(void (^)(QXPublicServiceGetBlogEntriesResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceGetBlogEntriesResults *results = [QXPublicServiceGetBlogEntriesResults alloc];
		QXPublicServiceGetBlogEntriesParams *params = [[QXPublicServiceGetBlogEntriesParams alloc] init];
		[params setDoi:doi];
		[params setPageNum:pageNum];
		[params setLimit:limit];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetBlogEntries.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceGetBlogEntriesResults *results = [QXPublicServiceGetBlogEntriesResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GetBlogEntryBySlug ---
- (QXPublicServiceGetBlogEntryBySlugResults *) GetBlogEntryBySlug:(NSString *)doi slug:(NSString *)slug {
	
	QXPublicServiceGetBlogEntryBySlugResults *results = [QXPublicServiceGetBlogEntryBySlugResults alloc];
	QXPublicServiceGetBlogEntryBySlugParams *params = [[QXPublicServiceGetBlogEntryBySlugParams alloc] init];
	[params setDoi:doi];
	[params setSlug:slug];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetBlogEntryBySlug.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) getBlogEntryBySlug:(NSString *)doi slug:(NSString *)slug success:(void (^)(QXPublicServiceGetBlogEntryBySlugResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceGetBlogEntryBySlugResults *results = [QXPublicServiceGetBlogEntryBySlugResults alloc];
		QXPublicServiceGetBlogEntryBySlugParams *params = [[QXPublicServiceGetBlogEntryBySlugParams alloc] init];
		[params setDoi:doi];
		[params setSlug:slug];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetBlogEntryBySlug.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceGetBlogEntryBySlugResults *results = [QXPublicServiceGetBlogEntryBySlugResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- GenerateBlogEntrySlug ---
- (QXPublicServiceGenerateBlogEntrySlugResults *) GenerateBlogEntrySlug:(NSString *)doi slug:(NSString *)slug {
	
	QXPublicServiceGenerateBlogEntrySlugResults *results = [QXPublicServiceGenerateBlogEntrySlugResults alloc];
	QXPublicServiceGenerateBlogEntrySlugParams *params = [[QXPublicServiceGenerateBlogEntrySlugParams alloc] init];
	[params setDoi:doi];
	[params setSlug:slug];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GenerateBlogEntrySlug.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) generateBlogEntrySlug:(NSString *)doi slug:(NSString *)slug success:(void (^)(QXPublicServiceGenerateBlogEntrySlugResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceGenerateBlogEntrySlugResults *results = [QXPublicServiceGenerateBlogEntrySlugResults alloc];
		QXPublicServiceGenerateBlogEntrySlugParams *params = [[QXPublicServiceGenerateBlogEntrySlugParams alloc] init];
		[params setDoi:doi];
		[params setSlug:slug];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GenerateBlogEntrySlug.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceGenerateBlogEntrySlugResults *results = [QXPublicServiceGenerateBlogEntrySlugResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- CreateNewsletter ---
- (QXPublicServiceCreateNewsletterResults *) CreateNewsletter:(QXNewsletterInput *)input {
	
	QXPublicServiceCreateNewsletterResults *results = [QXPublicServiceCreateNewsletterResults alloc];
	QXPublicServiceCreateNewsletterParams *params = [[QXPublicServiceCreateNewsletterParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/CreateNewsletter.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

- (void) createNewsletter:(QXNewsletterInput *)input success:(void (^)(QXPublicServiceCreateNewsletterResults *results))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceCreateNewsletterResults *results = [QXPublicServiceCreateNewsletterResults alloc];
		QXPublicServiceCreateNewsletterParams *params = [[QXPublicServiceCreateNewsletterParams alloc] init];
		[params setInput:input];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/CreateNewsletter.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceCreateNewsletterResults *results = [QXPublicServiceCreateNewsletterResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results);
			}
		}];
	
}

// --- RequestNewSignupToken ---
- (NSError *) RequestNewSignupToken:(NSString *)email {
	
	QXPublicServiceRequestNewSignupTokenResults *results = [QXPublicServiceRequestNewSignupTokenResults alloc];
	QXPublicServiceRequestNewSignupTokenParams *params = [[QXPublicServiceRequestNewSignupTokenParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewSignupToken.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) requestNewSignupToken:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceRequestNewSignupTokenResults *results = [QXPublicServiceRequestNewSignupTokenResults alloc];
		QXPublicServiceRequestNewSignupTokenParams *params = [[QXPublicServiceRequestNewSignupTokenParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewSignupToken.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceRequestNewSignupTokenResults *results = [QXPublicServiceRequestNewSignupTokenResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- RequestNewInvitationToken ---
- (NSError *) RequestNewInvitationToken:(NSString *)orgId email:(NSString *)email {
	
	QXPublicServiceRequestNewInvitationTokenResults *results = [QXPublicServiceRequestNewInvitationTokenResults alloc];
	QXPublicServiceRequestNewInvitationTokenParams *params = [[QXPublicServiceRequestNewInvitationTokenParams alloc] init];
	[params setOrgId:orgId];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewInvitationToken.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) requestNewInvitationToken:(NSString *)orgId email:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceRequestNewInvitationTokenResults *results = [QXPublicServiceRequestNewInvitationTokenResults alloc];
		QXPublicServiceRequestNewInvitationTokenParams *params = [[QXPublicServiceRequestNewInvitationTokenParams alloc] init];
		[params setOrgId:orgId];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewInvitationToken.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceRequestNewInvitationTokenResults *results = [QXPublicServiceRequestNewInvitationTokenResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- RequestNewSharingToken ---
- (NSError *) RequestNewSharingToken:(NSString *)email {
	
	QXPublicServiceRequestNewSharingTokenResults *results = [QXPublicServiceRequestNewSharingTokenResults alloc];
	QXPublicServiceRequestNewSharingTokenParams *params = [[QXPublicServiceRequestNewSharingTokenParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewSharingToken.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) requestNewSharingToken:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceRequestNewSharingTokenResults *results = [QXPublicServiceRequestNewSharingTokenResults alloc];
		QXPublicServiceRequestNewSharingTokenParams *params = [[QXPublicServiceRequestNewSharingTokenParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewSharingToken.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceRequestNewSharingTokenResults *results = [QXPublicServiceRequestNewSharingTokenResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- InviteMe ---
- (NSError *) InviteMe:(NSString *)organizationId email:(NSString *)email {
	
	QXPublicServiceInviteMeResults *results = [QXPublicServiceInviteMeResults alloc];
	QXPublicServiceInviteMeParams *params = [[QXPublicServiceInviteMeParams alloc] init];
	[params setOrganizationId:organizationId];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/InviteMe.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) inviteMe:(NSString *)organizationId email:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceInviteMeResults *results = [QXPublicServiceInviteMeResults alloc];
		QXPublicServiceInviteMeParams *params = [[QXPublicServiceInviteMeParams alloc] init];
		[params setOrganizationId:organizationId];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/InviteMe.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceInviteMeResults *results = [QXPublicServiceInviteMeResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}

// --- RequestSignup ---
- (NSError *) RequestSignup:(NSString *)email {
	
	QXPublicServiceRequestSignupResults *results = [QXPublicServiceRequestSignupResults alloc];
	QXPublicServiceRequestSignupParams *params = [[QXPublicServiceRequestSignupParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestSignup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

- (void) requestSignup:(NSString *)email success:(void (^)(NSError *error))successBlock failure:(void (^)(NSError *error))failureBlock {
	
		// QXPublicServiceRequestSignupResults *results = [QXPublicServiceRequestSignupResults alloc];
		QXPublicServiceRequestSignupParams *params = [[QXPublicServiceRequestSignupParams alloc] init];
		[params setEmail:email];
		

		QXQortexapi * _api = [QXQortexapi get];
		NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestSignup.json", [_api BaseURL]]];
		if([_api Verbose]) {
			NSLog(@"Requesting URL: %@", url);
		}

		[QXQortexapi request:url parameters:@{@"This": [self dictionary], @"Params": [params dictionary]} completionHandler:^(NSDictionary *data, NSError *error) {
			if (error && failureBlock) {
				if([_api Verbose]) {
					NSLog(@"Error: %@", error);
				}

				failureBlock(error);
			}

			if (successBlock) {
				QXPublicServiceRequestSignupResults *results = [QXPublicServiceRequestSignupResults alloc];
				results = [results initWithDictionary: data];
				successBlock(results.Err);
			}
		}];
	
}
@end

