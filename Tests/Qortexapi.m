// Generated by github.com/sunfmin/goapigen
// DO NOT EDIT


#import "qortexapi.h"

static QXQortexapi * _qortexapi;
static NSDateFormatter * _dateFormatter;

@implementation QXQortexapi : NSObject
+ (QXQortexapi *) get {
	if(!_qortexapi) {
		_qortexapi = [[QXQortexapi alloc] init];
	}
	return _qortexapi;
}

+ (NSDateFormatter *) dateFormatter {
	if(!_dateFormatter) {
		_dateFormatter = [[NSDateFormatter alloc] init];
		[_dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ"];
	}
	return _dateFormatter;
}

+ (NSDate *) dateFromString:(NSString *)dateString {
	if(!dateString) {
		return nil;
	}
	NSRange range = [dateString rangeOfString:@":" options:NSBackwardsSearch];
	if (range.location != NSNotFound && range.location >= dateString.length - 4) {
		dateString = [dateString stringByReplacingCharactersInRange:range withString:@""];
	}
	return [[QXQortexapi dateFormatter] dateFromString:dateString];
}

+ (NSString *) stringFromDate:(NSDate *) date {
	if(!date) {
		return nil;
	}
	NSString * dateString = [[QXQortexapi dateFormatter] stringFromDate:date];
	dateString = [[[dateString substringToIndex:(dateString.length - 3)] stringByAppendingString:@":"] stringByAppendingString:[dateString substringFromIndex:(dateString.length - 2)]];
	return dateString;
}

+ (NSDictionary *) request:(NSURL*)url req:(NSDictionary *)req error:(NSError **)error {
	NSMutableURLRequest *httpRequest = [NSMutableURLRequest requestWithURL:url];
	[httpRequest setHTTPMethod:@"POST"];
	[httpRequest setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
	QXQortexapi * _api = [QXQortexapi get];
	NSData *requestBody = [NSJSONSerialization dataWithJSONObject:req options:NSJSONWritingPrettyPrinted error:error];
	if([_api Verbose]) {
		NSLog(@"Request: %@", [NSString stringWithUTF8String:[requestBody bytes]]);
	}
	[httpRequest setHTTPBody:requestBody];
	if(*error != nil) {
		return nil;
	}
	NSURLResponse  *response = nil;
	NSData *returnData = [NSURLConnection sendSynchronousRequest:httpRequest returningResponse:&response error:error];
	if(*error != nil || returnData == nil) {
		return nil;
	}
	if([_api Verbose]) {
		NSLog(@"Response: %@", [NSString stringWithUTF8String:[returnData bytes]]);
	}
	return [NSJSONSerialization JSONObjectWithData:returnData options:NSJSONReadingAllowFragments error:error];
}

+ (NSError *)errorWithDictionary:(NSDictionary *)dict {
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return nil;
	}
	if ([[dict allKeys] count] == 0) {
		return nil;
	}
	NSMutableDictionary *userInfo = [NSMutableDictionary alloc];
	id reason = [dict valueForKey:@"Reason"];
	if ([reason isKindOfClass:[NSDictionary class]]) {
		userInfo = [userInfo initWithDictionary:reason];
	} else {
		userInfo = [userInfo init];
	}
	[userInfo setObject:[dict valueForKey:@"Message"] forKey:NSLocalizedDescriptionKey];

	NSString *code = [dict valueForKey:@"Code"];
	NSNumberFormatter *f = [[NSNumberFormatter alloc] init];
	[f setNumberStyle:NSNumberFormatterDecimalStyle];
	NSNumber *codeNumber = [f numberFromString:code];
	NSInteger intCode = -1;
	if (codeNumber != nil) {
		intCode = [codeNumber integerValue];
	}
	NSError *err = [NSError errorWithDomain:@"QortexapiError" code:intCode userInfo:userInfo];
	return err;
}

@end


// --- AccessReq ---
@implementation QXAccessReq

@synthesize Email;
@synthesize AccessCode;
@synthesize Status;
@synthesize ApprovedBy;
@synthesize CreatedAt;
@synthesize UpdatedAt;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setAccessCode:[dict valueForKey:@"AccessCode"]];
	[self setStatus:[dict valueForKey:@"Status"]];
	[self setApprovedBy:[dict valueForKey:@"ApprovedBy"]];
	[self setCreatedAt:[dict valueForKey:@"CreatedAt"]];
	[self setUpdatedAt:[dict valueForKey:@"UpdatedAt"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.AccessCode forKey:@"AccessCode"];
	[dict setValue:self.Status forKey:@"Status"];
	[dict setValue:self.ApprovedBy forKey:@"ApprovedBy"];
	[dict setValue:self.CreatedAt forKey:@"CreatedAt"];
	[dict setValue:self.UpdatedAt forKey:@"UpdatedAt"];

	return dict;
}

@end

// --- BroadcastInput ---
@implementation QXBroadcastInput

@synthesize Id;
@synthesize Title;
@synthesize Content;
@synthesize ToOrgIds;
@synthesize BroadcastType;
@synthesize RootId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setToOrgIds:[dict valueForKey:@"ToOrgIds"]];
	[self setBroadcastType:[dict valueForKey:@"BroadcastType"]];
	[self setRootId:[dict valueForKey:@"RootId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.ToOrgIds forKey:@"ToOrgIds"];
	[dict setValue:self.BroadcastType forKey:@"BroadcastType"];
	[dict setValue:self.RootId forKey:@"RootId"];

	return dict;
}

@end

// --- GroupInput ---
@implementation QXGroupInput

@synthesize Id;
@synthesize Name;
@synthesize Description;
@synthesize Type;
@synthesize LogoURL;
@synthesize IconName;
@synthesize Slug;
@synthesize IsPrivate;
@synthesize IsShared;
@synthesize GroupOwners;
@synthesize InvitedOrgIds;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setDescription:[dict valueForKey:@"Description"]];
	[self setType:[dict valueForKey:@"Type"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setIconName:[dict valueForKey:@"IconName"]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setIsPrivate:[[dict valueForKey:@"IsPrivate"] boolValue]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setGroupOwners:[dict valueForKey:@"GroupOwners"]];
	[self setInvitedOrgIds:[dict valueForKey:@"InvitedOrgIds"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Description forKey:@"Description"];
	[dict setValue:self.Type forKey:@"Type"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.IconName forKey:@"IconName"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:[NSNumber numberWithBool:self.IsPrivate] forKey:@"IsPrivate"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:self.GroupOwners forKey:@"GroupOwners"];
	[dict setValue:self.InvitedOrgIds forKey:@"InvitedOrgIds"];

	return dict;
}

@end

// --- OrgSettingsInput ---
@implementation QXOrgSettingsInput

@synthesize AllowUsersCreateGroups;
@synthesize AllowUsersInvitePeople;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAllowUsersCreateGroups:[[dict valueForKey:@"AllowUsersCreateGroups"] boolValue]];
	[self setAllowUsersInvitePeople:[[dict valueForKey:@"AllowUsersInvitePeople"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersCreateGroups] forKey:@"AllowUsersCreateGroups"];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersInvitePeople] forKey:@"AllowUsersInvitePeople"];

	return dict;
}

@end

// --- OrganizationInput ---
@implementation QXOrganizationInput

@synthesize Id;
@synthesize OType;
@synthesize Name;
@synthesize Summary;
@synthesize Address;
@synthesize Phone;
@synthesize Website;
@synthesize Domain;
@synthesize Domains;
@synthesize RestrictSubscriptionMail;
@synthesize AuthorId;
@synthesize MemberIds;
@synthesize GroupIds;
@synthesize QortexURL;
@synthesize LogoURL;
@synthesize ChatToken;
@synthesize RegistrationMode;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setOType:[dict valueForKey:@"OType"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setSummary:[dict valueForKey:@"Summary"]];
	[self setAddress:[dict valueForKey:@"Address"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setWebsite:[dict valueForKey:@"Website"]];
	[self setDomain:[dict valueForKey:@"Domain"]];
	[self setDomains:[dict valueForKey:@"Domains"]];
	[self setRestrictSubscriptionMail:[[dict valueForKey:@"RestrictSubscriptionMail"] boolValue]];
	[self setAuthorId:[dict valueForKey:@"AuthorId"]];
	[self setMemberIds:[dict valueForKey:@"MemberIds"]];
	[self setGroupIds:[dict valueForKey:@"GroupIds"]];
	[self setQortexURL:[dict valueForKey:@"QortexURL"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setChatToken:[dict valueForKey:@"ChatToken"]];
	[self setRegistrationMode:[dict valueForKey:@"RegistrationMode"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.OType forKey:@"OType"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Summary forKey:@"Summary"];
	[dict setValue:self.Address forKey:@"Address"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Website forKey:@"Website"];
	[dict setValue:self.Domain forKey:@"Domain"];
	[dict setValue:self.Domains forKey:@"Domains"];
	[dict setValue:[NSNumber numberWithBool:self.RestrictSubscriptionMail] forKey:@"RestrictSubscriptionMail"];
	[dict setValue:self.AuthorId forKey:@"AuthorId"];
	[dict setValue:self.MemberIds forKey:@"MemberIds"];
	[dict setValue:self.GroupIds forKey:@"GroupIds"];
	[dict setValue:self.QortexURL forKey:@"QortexURL"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.ChatToken forKey:@"ChatToken"];
	[dict setValue:self.RegistrationMode forKey:@"RegistrationMode"];

	return dict;
}

@end

// --- LikeInput ---
@implementation QXLikeInput

@synthesize EntryId;
@synthesize GroupId;
@synthesize Like;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setLike:[dict valueForKey:@"Like"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Like forKey:@"Like"];

	return dict;
}

@end

// --- PreferencesInput ---
@implementation QXPreferencesInput

@synthesize Timezone;
@synthesize TimezoneOffset;
@synthesize PreferFullName;
@synthesize EnterForNewLine;
@synthesize AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse;
@synthesize ShowMarkUnreadThreshold;
@synthesize AdminModeOn;
@synthesize PreferMarkdown;
@synthesize AutoFollowPublicGroup;
@synthesize EnableHTML5Notification;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setTimezoneOffset:[dict valueForKey:@"TimezoneOffset"]];
	[self setPreferFullName:[dict valueForKey:@"PreferFullName"]];
	[self setEnterForNewLine:[dict valueForKey:@"EnterForNewLine"]];
	[self setAsideGroupsCollapse:[dict valueForKey:@"AsideGroupsCollapse"]];
	[self setAsideOtherGroupsCollapse:[dict valueForKey:@"AsideOtherGroupsCollapse"]];
	[self setShowMarkUnreadThreshold:[dict valueForKey:@"ShowMarkUnreadThreshold"]];
	[self setAdminModeOn:[dict valueForKey:@"AdminModeOn"]];
	[self setPreferMarkdown:[dict valueForKey:@"PreferMarkdown"]];
	[self setAutoFollowPublicGroup:[dict valueForKey:@"AutoFollowPublicGroup"]];
	[self setEnableHTML5Notification:[dict valueForKey:@"EnableHTML5Notification"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:self.TimezoneOffset forKey:@"TimezoneOffset"];
	[dict setValue:self.PreferFullName forKey:@"PreferFullName"];
	[dict setValue:self.EnterForNewLine forKey:@"EnterForNewLine"];
	[dict setValue:self.AsideGroupsCollapse forKey:@"AsideGroupsCollapse"];
	[dict setValue:self.AsideOtherGroupsCollapse forKey:@"AsideOtherGroupsCollapse"];
	[dict setValue:self.ShowMarkUnreadThreshold forKey:@"ShowMarkUnreadThreshold"];
	[dict setValue:self.AdminModeOn forKey:@"AdminModeOn"];
	[dict setValue:self.PreferMarkdown forKey:@"PreferMarkdown"];
	[dict setValue:self.AutoFollowPublicGroup forKey:@"AutoFollowPublicGroup"];
	[dict setValue:self.EnableHTML5Notification forKey:@"EnableHTML5Notification"];

	return dict;
}

@end

// --- MemberAccountInput ---
@implementation QXMemberAccountInput

@synthesize FirstName;
@synthesize LastName;
@synthesize AvatarURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFirstName:[dict valueForKey:@"FirstName"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setAvatarURL:[dict valueForKey:@"AvatarURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FirstName forKey:@"FirstName"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.AvatarURL forKey:@"AvatarURL"];

	return dict;
}

@end

// --- NewsletterInput ---
@implementation QXNewsletterInput

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- ShareChatInput ---
@implementation QXShareChatInput

@synthesize Title;
@synthesize Content;
@synthesize BasedConvId;
@synthesize BaseOnEntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setBasedConvId:[dict valueForKey:@"BasedConvId"]];
	[self setBaseOnEntryId:[dict valueForKey:@"BaseOnEntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.BasedConvId forKey:@"BasedConvId"];
	[dict setValue:self.BaseOnEntryId forKey:@"BaseOnEntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- ContactInput ---
@implementation QXContactInput

@synthesize FirstName;
@synthesize LastName;
@synthesize CompanyName;
@synthesize CompanySize;
@synthesize Email;
@synthesize Phone;
@synthesize Country;
@synthesize City;
@synthesize HelpContent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFirstName:[dict valueForKey:@"FirstName"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setCompanyName:[dict valueForKey:@"CompanyName"]];
	[self setCompanySize:[dict valueForKey:@"CompanySize"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setCountry:[dict valueForKey:@"Country"]];
	[self setCity:[dict valueForKey:@"City"]];
	[self setHelpContent:[dict valueForKey:@"HelpContent"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FirstName forKey:@"FirstName"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.CompanyName forKey:@"CompanyName"];
	[dict setValue:self.CompanySize forKey:@"CompanySize"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Country forKey:@"Country"];
	[dict setValue:self.City forKey:@"City"];
	[dict setValue:self.HelpContent forKey:@"HelpContent"];

	return dict;
}

@end

// --- UserProfileInput ---
@implementation QXUserProfileInput

@synthesize Summary;
@synthesize Title;
@synthesize Department;
@synthesize Location;
@synthesize Expertise;
@synthesize Interests;
@synthesize BirthMonth;
@synthesize BirthDay;
@synthesize WorkPhone;
@synthesize Mobile;
@synthesize Twitter;
@synthesize Skype;
@synthesize Facebook;
@synthesize OtherWebsites;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSummary:[dict valueForKey:@"Summary"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setDepartment:[dict valueForKey:@"Department"]];
	[self setLocation:[dict valueForKey:@"Location"]];
	[self setExpertise:[dict valueForKey:@"Expertise"]];
	[self setInterests:[dict valueForKey:@"Interests"]];
	[self setBirthMonth:[dict valueForKey:@"BirthMonth"]];
	[self setBirthDay:[dict valueForKey:@"BirthDay"]];
	[self setWorkPhone:[dict valueForKey:@"WorkPhone"]];
	[self setMobile:[dict valueForKey:@"Mobile"]];
	[self setTwitter:[dict valueForKey:@"Twitter"]];
	[self setSkype:[dict valueForKey:@"Skype"]];
	[self setFacebook:[dict valueForKey:@"Facebook"]];
	[self setOtherWebsites:[dict valueForKey:@"OtherWebsites"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Summary forKey:@"Summary"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Department forKey:@"Department"];
	[dict setValue:self.Location forKey:@"Location"];
	[dict setValue:self.Expertise forKey:@"Expertise"];
	[dict setValue:self.Interests forKey:@"Interests"];
	[dict setValue:self.BirthMonth forKey:@"BirthMonth"];
	[dict setValue:self.BirthDay forKey:@"BirthDay"];
	[dict setValue:self.WorkPhone forKey:@"WorkPhone"];
	[dict setValue:self.Mobile forKey:@"Mobile"];
	[dict setValue:self.Twitter forKey:@"Twitter"];
	[dict setValue:self.Skype forKey:@"Skype"];
	[dict setValue:self.Facebook forKey:@"Facebook"];
	[dict setValue:self.OtherWebsites forKey:@"OtherWebsites"];

	return dict;
}

@end

// --- MailUpdatesInput ---
@implementation QXMailUpdatesInput

@synthesize IndividualIsOn;
@synthesize SendLag;
@synthesize AckRequest;
@synthesize AckConfirmation;
@synthesize Todo;
@synthesize TodoConfirmation;
@synthesize SystemMessage;
@synthesize EntryNotification;
@synthesize Like;
@synthesize SendTimeIsOn;
@synthesize Mon;
@synthesize Tue;
@synthesize Wed;
@synthesize Thu;
@synthesize Fri;
@synthesize Sat;
@synthesize Sun;
@synthesize SendHoursIsOn;
@synthesize StartAt;
@synthesize EndAt;
@synthesize DailyIsOn;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIndividualIsOn:[[dict valueForKey:@"IndividualIsOn"] boolValue]];
	[self setSendLag:[dict valueForKey:@"SendLag"]];
	[self setAckRequest:[[dict valueForKey:@"AckRequest"] boolValue]];
	[self setAckConfirmation:[[dict valueForKey:@"AckConfirmation"] boolValue]];
	[self setTodo:[[dict valueForKey:@"Todo"] boolValue]];
	[self setTodoConfirmation:[[dict valueForKey:@"TodoConfirmation"] boolValue]];
	[self setSystemMessage:[[dict valueForKey:@"SystemMessage"] boolValue]];
	[self setEntryNotification:[[dict valueForKey:@"EntryNotification"] boolValue]];
	[self setLike:[[dict valueForKey:@"Like"] boolValue]];
	[self setSendTimeIsOn:[[dict valueForKey:@"SendTimeIsOn"] boolValue]];
	[self setMon:[[dict valueForKey:@"Mon"] boolValue]];
	[self setTue:[[dict valueForKey:@"Tue"] boolValue]];
	[self setWed:[[dict valueForKey:@"Wed"] boolValue]];
	[self setThu:[[dict valueForKey:@"Thu"] boolValue]];
	[self setFri:[[dict valueForKey:@"Fri"] boolValue]];
	[self setSat:[[dict valueForKey:@"Sat"] boolValue]];
	[self setSun:[[dict valueForKey:@"Sun"] boolValue]];
	[self setSendHoursIsOn:[[dict valueForKey:@"SendHoursIsOn"] boolValue]];
	[self setStartAt:[dict valueForKey:@"StartAt"]];
	[self setEndAt:[dict valueForKey:@"EndAt"]];
	[self setDailyIsOn:[[dict valueForKey:@"DailyIsOn"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IndividualIsOn] forKey:@"IndividualIsOn"];
	[dict setValue:self.SendLag forKey:@"SendLag"];
	[dict setValue:[NSNumber numberWithBool:self.AckRequest] forKey:@"AckRequest"];
	[dict setValue:[NSNumber numberWithBool:self.AckConfirmation] forKey:@"AckConfirmation"];
	[dict setValue:[NSNumber numberWithBool:self.Todo] forKey:@"Todo"];
	[dict setValue:[NSNumber numberWithBool:self.TodoConfirmation] forKey:@"TodoConfirmation"];
	[dict setValue:[NSNumber numberWithBool:self.SystemMessage] forKey:@"SystemMessage"];
	[dict setValue:[NSNumber numberWithBool:self.EntryNotification] forKey:@"EntryNotification"];
	[dict setValue:[NSNumber numberWithBool:self.Like] forKey:@"Like"];
	[dict setValue:[NSNumber numberWithBool:self.SendTimeIsOn] forKey:@"SendTimeIsOn"];
	[dict setValue:[NSNumber numberWithBool:self.Mon] forKey:@"Mon"];
	[dict setValue:[NSNumber numberWithBool:self.Tue] forKey:@"Tue"];
	[dict setValue:[NSNumber numberWithBool:self.Wed] forKey:@"Wed"];
	[dict setValue:[NSNumber numberWithBool:self.Thu] forKey:@"Thu"];
	[dict setValue:[NSNumber numberWithBool:self.Fri] forKey:@"Fri"];
	[dict setValue:[NSNumber numberWithBool:self.Sat] forKey:@"Sat"];
	[dict setValue:[NSNumber numberWithBool:self.Sun] forKey:@"Sun"];
	[dict setValue:[NSNumber numberWithBool:self.SendHoursIsOn] forKey:@"SendHoursIsOn"];
	[dict setValue:self.StartAt forKey:@"StartAt"];
	[dict setValue:self.EndAt forKey:@"EndAt"];
	[dict setValue:[NSNumber numberWithBool:self.DailyIsOn] forKey:@"DailyIsOn"];

	return dict;
}

@end

// --- OrgSettings ---
@implementation QXOrgSettings

@synthesize AllowUsersCreateGroups;
@synthesize AllowUsersInvitePeople;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAllowUsersCreateGroups:[[dict valueForKey:@"AllowUsersCreateGroups"] boolValue]];
	[self setAllowUsersInvitePeople:[[dict valueForKey:@"AllowUsersInvitePeople"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersCreateGroups] forKey:@"AllowUsersCreateGroups"];
	[dict setValue:[NSNumber numberWithBool:self.AllowUsersInvitePeople] forKey:@"AllowUsersInvitePeople"];

	return dict;
}

@end

// --- Organization ---
@implementation QXOrganization

@synthesize Id;
@synthesize Name;
@synthesize QortexURL;
@synthesize Summary;
@synthesize LogoURL;
@synthesize Address;
@synthesize Phone;
@synthesize Website;
@synthesize Domains;
@synthesize RestrictSubscriptionMail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setQortexURL:[dict valueForKey:@"QortexURL"]];
	[self setSummary:[dict valueForKey:@"Summary"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setAddress:[dict valueForKey:@"Address"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setWebsite:[dict valueForKey:@"Website"]];
	[self setDomains:[dict valueForKey:@"Domains"]];
	[self setRestrictSubscriptionMail:[[dict valueForKey:@"RestrictSubscriptionMail"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.QortexURL forKey:@"QortexURL"];
	[dict setValue:self.Summary forKey:@"Summary"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.Address forKey:@"Address"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Website forKey:@"Website"];
	[dict setValue:self.Domains forKey:@"Domains"];
	[dict setValue:[NSNumber numberWithBool:self.RestrictSubscriptionMail] forKey:@"RestrictSubscriptionMail"];

	return dict;
}

@end

// --- Blog ---
@implementation QXBlog

@synthesize Title;
@synthesize Description;
@synthesize SideContent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setDescription:[dict valueForKey:@"Description"]];
	[self setSideContent:[dict valueForKey:@"SideContent"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Description forKey:@"Description"];
	[dict setValue:self.SideContent forKey:@"SideContent"];

	return dict;
}

@end

// --- Preferences ---
@implementation QXPreferences

@synthesize Timezone;
@synthesize TimezoneOffset;
@synthesize PreferFullName;
@synthesize EnterForNewLine;
@synthesize AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse;
@synthesize ShowMarkUnreadThreshold;
@synthesize AdminModeOn;
@synthesize PreferMarkdown;
@synthesize AutoFollowPublicGroup;
@synthesize EnableHTML5Notification;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setTimezoneOffset:[dict valueForKey:@"TimezoneOffset"]];
	[self setPreferFullName:[[dict valueForKey:@"PreferFullName"] boolValue]];
	[self setEnterForNewLine:[[dict valueForKey:@"EnterForNewLine"] boolValue]];
	[self setAsideGroupsCollapse:[[dict valueForKey:@"AsideGroupsCollapse"] boolValue]];
	[self setAsideOtherGroupsCollapse:[[dict valueForKey:@"AsideOtherGroupsCollapse"] boolValue]];
	[self setShowMarkUnreadThreshold:[dict valueForKey:@"ShowMarkUnreadThreshold"]];
	[self setAdminModeOn:[[dict valueForKey:@"AdminModeOn"] boolValue]];
	[self setPreferMarkdown:[[dict valueForKey:@"PreferMarkdown"] boolValue]];
	[self setAutoFollowPublicGroup:[[dict valueForKey:@"AutoFollowPublicGroup"] boolValue]];
	[self setEnableHTML5Notification:[[dict valueForKey:@"EnableHTML5Notification"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:self.TimezoneOffset forKey:@"TimezoneOffset"];
	[dict setValue:[NSNumber numberWithBool:self.PreferFullName] forKey:@"PreferFullName"];
	[dict setValue:[NSNumber numberWithBool:self.EnterForNewLine] forKey:@"EnterForNewLine"];
	[dict setValue:[NSNumber numberWithBool:self.AsideGroupsCollapse] forKey:@"AsideGroupsCollapse"];
	[dict setValue:[NSNumber numberWithBool:self.AsideOtherGroupsCollapse] forKey:@"AsideOtherGroupsCollapse"];
	[dict setValue:self.ShowMarkUnreadThreshold forKey:@"ShowMarkUnreadThreshold"];
	[dict setValue:[NSNumber numberWithBool:self.AdminModeOn] forKey:@"AdminModeOn"];
	[dict setValue:[NSNumber numberWithBool:self.PreferMarkdown] forKey:@"PreferMarkdown"];
	[dict setValue:[NSNumber numberWithBool:self.AutoFollowPublicGroup] forKey:@"AutoFollowPublicGroup"];
	[dict setValue:[NSNumber numberWithBool:self.EnableHTML5Notification] forKey:@"EnableHTML5Notification"];

	return dict;
}

@end

// --- EmbedOrg ---
@implementation QXEmbedOrg

@synthesize Id;
@synthesize Name;
@synthesize LogoURL;
@synthesize NoNeedToShare;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setNoNeedToShare:[[dict valueForKey:@"NoNeedToShare"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:[NSNumber numberWithBool:self.NoNeedToShare] forKey:@"NoNeedToShare"];

	return dict;
}

@end

// --- EmbedUser ---
@implementation QXEmbedUser

@synthesize Id;
@synthesize Email;
@synthesize Name;
@synthesize Title;
@synthesize Avatar;
@synthesize JID;
@synthesize Timezone;
@synthesize IsSuperUser;
@synthesize IsShare;
@synthesize OrganizationId;
@synthesize OriginalOrgId;
@synthesize ProfileURL;
@synthesize NoDetail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setAvatar:[dict valueForKey:@"Avatar"]];
	[self setJID:[dict valueForKey:@"JID"]];
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setIsSuperUser:[[dict valueForKey:@"IsSuperUser"] boolValue]];
	[self setIsShare:[[dict valueForKey:@"IsShare"] boolValue]];
	[self setOrganizationId:[dict valueForKey:@"OrganizationId"]];
	[self setOriginalOrgId:[dict valueForKey:@"OriginalOrgId"]];
	[self setProfileURL:[dict valueForKey:@"ProfileURL"]];
	[self setNoDetail:[[dict valueForKey:@"NoDetail"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Avatar forKey:@"Avatar"];
	[dict setValue:self.JID forKey:@"JID"];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:[NSNumber numberWithBool:self.IsSuperUser] forKey:@"IsSuperUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsShare] forKey:@"IsShare"];
	[dict setValue:self.OrganizationId forKey:@"OrganizationId"];
	[dict setValue:self.OriginalOrgId forKey:@"OriginalOrgId"];
	[dict setValue:self.ProfileURL forKey:@"ProfileURL"];
	[dict setValue:[NSNumber numberWithBool:self.NoDetail] forKey:@"NoDetail"];

	return dict;
}

@end

// --- PanelStatus ---
@implementation QXPanelStatus

@synthesize AsideGroupsCollapse;
@synthesize AsideOtherGroupsCollapse;
@synthesize HasToDo;
@synthesize HasDraft;
@synthesize HasWatchList;
@synthesize HasChat;
@synthesize ShowMarkUnreadThreshold;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAsideGroupsCollapse:[[dict valueForKey:@"AsideGroupsCollapse"] boolValue]];
	[self setAsideOtherGroupsCollapse:[[dict valueForKey:@"AsideOtherGroupsCollapse"] boolValue]];
	[self setHasToDo:[[dict valueForKey:@"HasToDo"] boolValue]];
	[self setHasDraft:[[dict valueForKey:@"HasDraft"] boolValue]];
	[self setHasWatchList:[[dict valueForKey:@"HasWatchList"] boolValue]];
	[self setHasChat:[[dict valueForKey:@"HasChat"] boolValue]];
	[self setShowMarkUnreadThreshold:[dict valueForKey:@"ShowMarkUnreadThreshold"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.AsideGroupsCollapse] forKey:@"AsideGroupsCollapse"];
	[dict setValue:[NSNumber numberWithBool:self.AsideOtherGroupsCollapse] forKey:@"AsideOtherGroupsCollapse"];
	[dict setValue:[NSNumber numberWithBool:self.HasToDo] forKey:@"HasToDo"];
	[dict setValue:[NSNumber numberWithBool:self.HasDraft] forKey:@"HasDraft"];
	[dict setValue:[NSNumber numberWithBool:self.HasWatchList] forKey:@"HasWatchList"];
	[dict setValue:[NSNumber numberWithBool:self.HasChat] forKey:@"HasChat"];
	[dict setValue:self.ShowMarkUnreadThreshold forKey:@"ShowMarkUnreadThreshold"];

	return dict;
}

@end

// --- GroupSelectorItem ---
@implementation QXGroupSelectorItem

@synthesize Id;
@synthesize Name;
@synthesize IsSelected;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setIsSelected:[[dict valueForKey:@"IsSelected"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:[NSNumber numberWithBool:self.IsSelected] forKey:@"IsSelected"];

	return dict;
}

@end

// --- Attachment ---
@implementation QXAttachment

@synthesize Id;
@synthesize OwnerId;
@synthesize Category;
@synthesize Filename;
@synthesize ShortFilename;
@synthesize ContentType;
@synthesize ContentId;
@synthesize MD5;
@synthesize ContentLength;
@synthesize Error;
@synthesize GroupId;
@synthesize UploadTime;
@synthesize Width;
@synthesize Height;
@synthesize URL;
@synthesize S1ThumbURL;
@synthesize MThumbURL;
@synthesize LThumbURL;
@synthesize ImageIconURL;
@synthesize FileIconURL;
@synthesize HumanSize;
@synthesize IsImage;
@synthesize FileKind;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setOwnerId:[dict valueForKey:@"OwnerId"]];
	[self setCategory:[dict valueForKey:@"Category"]];
	[self setFilename:[dict valueForKey:@"Filename"]];
	[self setShortFilename:[dict valueForKey:@"ShortFilename"]];
	[self setContentType:[dict valueForKey:@"ContentType"]];
	[self setContentId:[dict valueForKey:@"ContentId"]];
	[self setMD5:[dict valueForKey:@"MD5"]];
	[self setContentLength:[dict valueForKey:@"ContentLength"]];
	[self setError:[dict valueForKey:@"Error"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUploadTime:[QXQortexapi dateFromString:[dict valueForKey:@"UploadTime"]]];
	[self setWidth:[dict valueForKey:@"Width"]];
	[self setHeight:[dict valueForKey:@"Height"]];
	[self setURL:[dict valueForKey:@"URL"]];
	[self setS1ThumbURL:[dict valueForKey:@"S1ThumbURL"]];
	[self setMThumbURL:[dict valueForKey:@"MThumbURL"]];
	[self setLThumbURL:[dict valueForKey:@"LThumbURL"]];
	[self setImageIconURL:[dict valueForKey:@"ImageIconURL"]];
	[self setFileIconURL:[dict valueForKey:@"FileIconURL"]];
	[self setHumanSize:[dict valueForKey:@"HumanSize"]];
	[self setIsImage:[[dict valueForKey:@"IsImage"] boolValue]];
	[self setFileKind:[dict valueForKey:@"FileKind"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.OwnerId forKey:@"OwnerId"];
	[dict setValue:self.Category forKey:@"Category"];
	[dict setValue:self.Filename forKey:@"Filename"];
	[dict setValue:self.ShortFilename forKey:@"ShortFilename"];
	[dict setValue:self.ContentType forKey:@"ContentType"];
	[dict setValue:self.ContentId forKey:@"ContentId"];
	[dict setValue:self.MD5 forKey:@"MD5"];
	[dict setValue:self.ContentLength forKey:@"ContentLength"];
	[dict setValue:self.Error forKey:@"Error"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:[QXQortexapi stringFromDate:self.UploadTime] forKey:@"UploadTime"];
	[dict setValue:self.Width forKey:@"Width"];
	[dict setValue:self.Height forKey:@"Height"];
	[dict setValue:self.URL forKey:@"URL"];
	[dict setValue:self.S1ThumbURL forKey:@"S1ThumbURL"];
	[dict setValue:self.MThumbURL forKey:@"MThumbURL"];
	[dict setValue:self.LThumbURL forKey:@"LThumbURL"];
	[dict setValue:self.ImageIconURL forKey:@"ImageIconURL"];
	[dict setValue:self.FileIconURL forKey:@"FileIconURL"];
	[dict setValue:self.HumanSize forKey:@"HumanSize"];
	[dict setValue:[NSNumber numberWithBool:self.IsImage] forKey:@"IsImage"];
	[dict setValue:self.FileKind forKey:@"FileKind"];

	return dict;
}

@end

// --- EntryInput ---
@implementation QXEntryInput

@synthesize Id;
@synthesize EType;
@synthesize Title;
@synthesize Content;
@synthesize GroupId;
@synthesize IsToGroup;
@synthesize ToUserIds;
@synthesize MentionedUserIds;
@synthesize IsAcknowledgement;
@synthesize TaskDue;
@synthesize RootId;
@synthesize IsCommentAcknowledgement;
@synthesize NewVersion;
@synthesize OldGroupId;
@synthesize LastUpdateAt;
@synthesize KnowledgeBase;
@synthesize AnyoneCanEdit;
@synthesize Presentation;
@synthesize IsFromEmail;
@synthesize IsPublished;
@synthesize Slug;
@synthesize Email;
@synthesize Name;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEType:[dict valueForKey:@"EType"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setIsToGroup:[dict valueForKey:@"IsToGroup"]];
	[self setToUserIds:[dict valueForKey:@"ToUserIds"]];
	[self setMentionedUserIds:[dict valueForKey:@"MentionedUserIds"]];
	[self setIsAcknowledgement:[[dict valueForKey:@"IsAcknowledgement"] boolValue]];
	[self setTaskDue:[dict valueForKey:@"TaskDue"]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setIsCommentAcknowledgement:[dict valueForKey:@"IsCommentAcknowledgement"]];
	[self setNewVersion:[dict valueForKey:@"NewVersion"]];
	[self setOldGroupId:[dict valueForKey:@"OldGroupId"]];
	[self setLastUpdateAt:[dict valueForKey:@"LastUpdateAt"]];
	[self setKnowledgeBase:[[dict valueForKey:@"KnowledgeBase"] boolValue]];
	[self setAnyoneCanEdit:[[dict valueForKey:@"AnyoneCanEdit"] boolValue]];
	[self setPresentation:[[dict valueForKey:@"Presentation"] boolValue]];
	[self setIsFromEmail:[[dict valueForKey:@"IsFromEmail"] boolValue]];
	[self setIsPublished:[[dict valueForKey:@"IsPublished"] boolValue]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setName:[dict valueForKey:@"Name"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.IsToGroup forKey:@"IsToGroup"];
	[dict setValue:self.ToUserIds forKey:@"ToUserIds"];
	[dict setValue:self.MentionedUserIds forKey:@"MentionedUserIds"];
	[dict setValue:[NSNumber numberWithBool:self.IsAcknowledgement] forKey:@"IsAcknowledgement"];
	[dict setValue:self.TaskDue forKey:@"TaskDue"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:self.IsCommentAcknowledgement forKey:@"IsCommentAcknowledgement"];
	[dict setValue:self.NewVersion forKey:@"NewVersion"];
	[dict setValue:self.OldGroupId forKey:@"OldGroupId"];
	[dict setValue:self.LastUpdateAt forKey:@"LastUpdateAt"];
	[dict setValue:[NSNumber numberWithBool:self.KnowledgeBase] forKey:@"KnowledgeBase"];
	[dict setValue:[NSNumber numberWithBool:self.AnyoneCanEdit] forKey:@"AnyoneCanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.Presentation] forKey:@"Presentation"];
	[dict setValue:[NSNumber numberWithBool:self.IsFromEmail] forKey:@"IsFromEmail"];
	[dict setValue:[NSNumber numberWithBool:self.IsPublished] forKey:@"IsPublished"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Name forKey:@"Name"];

	return dict;
}

@end

// --- LinkedEntry ---
@implementation QXLinkedEntry

@synthesize Id;
@synthesize EType;
@synthesize Title;
@synthesize GroupId;
@synthesize AuthorId;
@synthesize IsRoot;
@synthesize RootId;
@synthesize RootEntryTitle;
@synthesize Link;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEType:[dict valueForKey:@"EType"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAuthorId:[dict valueForKey:@"AuthorId"]];
	[self setIsRoot:[[dict valueForKey:@"IsRoot"] boolValue]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setRootEntryTitle:[dict valueForKey:@"RootEntryTitle"]];
	[self setLink:[dict valueForKey:@"Link"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AuthorId forKey:@"AuthorId"];
	[dict setValue:[NSNumber numberWithBool:self.IsRoot] forKey:@"IsRoot"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:self.RootEntryTitle forKey:@"RootEntryTitle"];
	[dict setValue:self.Link forKey:@"Link"];

	return dict;
}

@end

// --- GroupCount ---
@implementation QXGroupCount

@synthesize GroupId;
@synthesize UnreadCount;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUnreadCount:[dict valueForKey:@"UnreadCount"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UnreadCount forKey:@"UnreadCount"];

	return dict;
}

@end

// --- GroupHeader ---
@implementation QXGroupHeader

@synthesize HasToFollow;
@synthesize IsFollowing;
@synthesize IsManaging;
@synthesize HasFileTab;
@synthesize HasToDoTab;
@synthesize IsSystemMessage;
@synthesize SelectedGroup;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setHasToFollow:[[dict valueForKey:@"HasToFollow"] boolValue]];
	[self setIsFollowing:[[dict valueForKey:@"IsFollowing"] boolValue]];
	[self setIsManaging:[[dict valueForKey:@"IsManaging"] boolValue]];
	[self setHasFileTab:[[dict valueForKey:@"HasFileTab"] boolValue]];
	[self setHasToDoTab:[[dict valueForKey:@"HasToDoTab"] boolValue]];
	[self setIsSystemMessage:[[dict valueForKey:@"IsSystemMessage"] boolValue]];
	[self setSelectedGroup:[[dict valueForKey:@"SelectedGroup"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.HasToFollow] forKey:@"HasToFollow"];
	[dict setValue:[NSNumber numberWithBool:self.IsFollowing] forKey:@"IsFollowing"];
	[dict setValue:[NSNumber numberWithBool:self.IsManaging] forKey:@"IsManaging"];
	[dict setValue:[NSNumber numberWithBool:self.HasFileTab] forKey:@"HasFileTab"];
	[dict setValue:[NSNumber numberWithBool:self.HasToDoTab] forKey:@"HasToDoTab"];
	[dict setValue:[NSNumber numberWithBool:self.IsSystemMessage] forKey:@"IsSystemMessage"];
	[dict setValue:[NSNumber numberWithBool:self.SelectedGroup] forKey:@"SelectedGroup"];

	return dict;
}

@end

// --- InlineHelp ---
@implementation QXInlineHelp

@synthesize QortexOverview;
@synthesize WhatNext;
@synthesize WhatChats;
@synthesize InviteOthersURL;
@synthesize WhatChatsURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setQortexOverview:[[dict valueForKey:@"QortexOverview"] boolValue]];
	[self setWhatNext:[[dict valueForKey:@"WhatNext"] boolValue]];
	[self setWhatChats:[[dict valueForKey:@"WhatChats"] boolValue]];
	[self setInviteOthersURL:[dict valueForKey:@"InviteOthersURL"]];
	[self setWhatChatsURL:[dict valueForKey:@"WhatChatsURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.QortexOverview] forKey:@"QortexOverview"];
	[dict setValue:[NSNumber numberWithBool:self.WhatNext] forKey:@"WhatNext"];
	[dict setValue:[NSNumber numberWithBool:self.WhatChats] forKey:@"WhatChats"];
	[dict setValue:self.InviteOthersURL forKey:@"InviteOthersURL"];
	[dict setValue:self.WhatChatsURL forKey:@"WhatChatsURL"];

	return dict;
}

@end

// --- EmailChanger ---
@implementation QXEmailChanger

@synthesize Token;
@synthesize Email;
@synthesize SharingToken;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];

	return dict;
}

@end

// --- Newsletter ---
@implementation QXNewsletter

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- ContactInfo ---
@implementation QXContactInfo

@synthesize FirstName;
@synthesize LastName;
@synthesize CompanyName;
@synthesize CompanySize;
@synthesize Email;
@synthesize Phone;
@synthesize Country;
@synthesize City;
@synthesize HelpContent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFirstName:[dict valueForKey:@"FirstName"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setCompanyName:[dict valueForKey:@"CompanyName"]];
	[self setCompanySize:[dict valueForKey:@"CompanySize"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPhone:[dict valueForKey:@"Phone"]];
	[self setCountry:[dict valueForKey:@"Country"]];
	[self setCity:[dict valueForKey:@"City"]];
	[self setHelpContent:[dict valueForKey:@"HelpContent"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FirstName forKey:@"FirstName"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.CompanyName forKey:@"CompanyName"];
	[dict setValue:self.CompanySize forKey:@"CompanySize"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Phone forKey:@"Phone"];
	[dict setValue:self.Country forKey:@"Country"];
	[dict setValue:self.City forKey:@"City"];
	[dict setValue:self.HelpContent forKey:@"HelpContent"];

	return dict;
}

@end

// --- TotalStats ---
@implementation QXTotalStats

@synthesize OrgCount;
@synthesize MemberCount;
@synthesize GroupCount;
@synthesize EntryCount;
@synthesize CommentCount;
@synthesize ChatCount;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgCount:[dict valueForKey:@"OrgCount"]];
	[self setMemberCount:[dict valueForKey:@"MemberCount"]];
	[self setGroupCount:[dict valueForKey:@"GroupCount"]];
	[self setEntryCount:[dict valueForKey:@"EntryCount"]];
	[self setCommentCount:[dict valueForKey:@"CommentCount"]];
	[self setChatCount:[dict valueForKey:@"ChatCount"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgCount forKey:@"OrgCount"];
	[dict setValue:self.MemberCount forKey:@"MemberCount"];
	[dict setValue:self.GroupCount forKey:@"GroupCount"];
	[dict setValue:self.EntryCount forKey:@"EntryCount"];
	[dict setValue:self.CommentCount forKey:@"CommentCount"];
	[dict setValue:self.ChatCount forKey:@"ChatCount"];

	return dict;
}

@end

// --- GroupUsers ---
@implementation QXGroupUsers

@synthesize GroupId;
@synthesize EmbedUsers;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	NSMutableArray * mEmbedUsers = [[NSMutableArray alloc] init];
	NSArray * lEmbedUsers = [dict valueForKey:@"EmbedUsers"];
	if ([lEmbedUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEmbedUsers) {
			[mEmbedUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setEmbedUsers:mEmbedUsers];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	NSMutableArray * mEmbedUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in EmbedUsers) {
		[mEmbedUsers addObject:[p dictionary]];
	}
	[dict setValue:mEmbedUsers forKey:@"EmbedUsers"];
	

	return dict;
}

@end

// --- Group ---
@implementation QXGroup

@synthesize Id;
@synthesize Name;
@synthesize Description;
@synthesize GType;
@synthesize LogoURL;
@synthesize IconName;
@synthesize Link;
@synthesize Slug;
@synthesize Author;
@synthesize IsAdmin;
@synthesize IsPrivate;
@synthesize Editable;
@synthesize Managable;
@synthesize FollowedByMe;
@synthesize AdministratedByMe;
@synthesize IsPreShared;
@synthesize IsShared;
@synthesize IsDefaultLogoURL;
@synthesize HostOrgName;
@synthesize IsDispayHostOrgName;
@synthesize EntriesCount;
@synthesize FollowersCount;
@synthesize IsAnnoucement;
@synthesize GroupOwners;
@synthesize SharedGroupFromOrg;
@synthesize AcceptedEmbedOrgs;
@synthesize PreSharingEmails;
@synthesize ForwardedOrgs;
@synthesize HasPendingItems;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setDescription:[dict valueForKey:@"Description"]];
	[self setGType:[dict valueForKey:@"GType"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];
	[self setIconName:[dict valueForKey:@"IconName"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setSlug:[dict valueForKey:@"Slug"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}
	[self setIsAdmin:[[dict valueForKey:@"IsAdmin"] boolValue]];
	[self setIsPrivate:[[dict valueForKey:@"IsPrivate"] boolValue]];
	[self setEditable:[[dict valueForKey:@"Editable"] boolValue]];
	[self setManagable:[[dict valueForKey:@"Managable"] boolValue]];
	[self setFollowedByMe:[[dict valueForKey:@"FollowedByMe"] boolValue]];
	[self setAdministratedByMe:[[dict valueForKey:@"AdministratedByMe"] boolValue]];
	[self setIsPreShared:[[dict valueForKey:@"IsPreShared"] boolValue]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setIsDefaultLogoURL:[[dict valueForKey:@"IsDefaultLogoURL"] boolValue]];
	[self setHostOrgName:[dict valueForKey:@"HostOrgName"]];
	[self setIsDispayHostOrgName:[[dict valueForKey:@"IsDispayHostOrgName"] boolValue]];
	[self setEntriesCount:[dict valueForKey:@"EntriesCount"]];
	[self setFollowersCount:[dict valueForKey:@"FollowersCount"]];
	[self setIsAnnoucement:[[dict valueForKey:@"IsAnnoucement"] boolValue]];

	NSMutableArray * mGroupOwners = [[NSMutableArray alloc] init];
	NSArray * lGroupOwners = [dict valueForKey:@"GroupOwners"];
	if ([lGroupOwners isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupOwners) {
			[mGroupOwners addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setGroupOwners:mGroupOwners];
	}

	id dictSharedGroupFromOrg = [dict valueForKey:@"SharedGroupFromOrg"];
	if ([dictSharedGroupFromOrg isKindOfClass:[NSDictionary class]]){
		[self setSharedGroupFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictSharedGroupFromOrg]];
	}

	NSMutableArray * mAcceptedEmbedOrgs = [[NSMutableArray alloc] init];
	NSArray * lAcceptedEmbedOrgs = [dict valueForKey:@"AcceptedEmbedOrgs"];
	if ([lAcceptedEmbedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAcceptedEmbedOrgs) {
			[mAcceptedEmbedOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setAcceptedEmbedOrgs:mAcceptedEmbedOrgs];
	}
	[self setPreSharingEmails:[dict valueForKey:@"PreSharingEmails"]];

	NSMutableArray * mForwardedOrgs = [[NSMutableArray alloc] init];
	NSArray * lForwardedOrgs = [dict valueForKey:@"ForwardedOrgs"];
	if ([lForwardedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lForwardedOrgs) {
			[mForwardedOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setForwardedOrgs:mForwardedOrgs];
	}
	[self setHasPendingItems:[[dict valueForKey:@"HasPendingItems"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Description forKey:@"Description"];
	[dict setValue:self.GType forKey:@"GType"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];
	[dict setValue:self.IconName forKey:@"IconName"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsAdmin] forKey:@"IsAdmin"];
	[dict setValue:[NSNumber numberWithBool:self.IsPrivate] forKey:@"IsPrivate"];
	[dict setValue:[NSNumber numberWithBool:self.Editable] forKey:@"Editable"];
	[dict setValue:[NSNumber numberWithBool:self.Managable] forKey:@"Managable"];
	[dict setValue:[NSNumber numberWithBool:self.FollowedByMe] forKey:@"FollowedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.AdministratedByMe] forKey:@"AdministratedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.IsPreShared] forKey:@"IsPreShared"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:[NSNumber numberWithBool:self.IsDefaultLogoURL] forKey:@"IsDefaultLogoURL"];
	[dict setValue:self.HostOrgName forKey:@"HostOrgName"];
	[dict setValue:[NSNumber numberWithBool:self.IsDispayHostOrgName] forKey:@"IsDispayHostOrgName"];
	[dict setValue:self.EntriesCount forKey:@"EntriesCount"];
	[dict setValue:self.FollowersCount forKey:@"FollowersCount"];
	[dict setValue:[NSNumber numberWithBool:self.IsAnnoucement] forKey:@"IsAnnoucement"];

	NSMutableArray * mGroupOwners = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in GroupOwners) {
		[mGroupOwners addObject:[p dictionary]];
	}
	[dict setValue:mGroupOwners forKey:@"GroupOwners"];
	
	[dict setValue:[self.SharedGroupFromOrg dictionary] forKey:@"SharedGroupFromOrg"];
	

	NSMutableArray * mAcceptedEmbedOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in AcceptedEmbedOrgs) {
		[mAcceptedEmbedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mAcceptedEmbedOrgs forKey:@"AcceptedEmbedOrgs"];
	
	[dict setValue:self.PreSharingEmails forKey:@"PreSharingEmails"];

	NSMutableArray * mForwardedOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in ForwardedOrgs) {
		[mForwardedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mForwardedOrgs forKey:@"ForwardedOrgs"];
	
	[dict setValue:[NSNumber numberWithBool:self.HasPendingItems] forKey:@"HasPendingItems"];

	return dict;
}

@end

// --- Invitation ---
@implementation QXInvitation

@synthesize Email;
@synthesize Token;
@synthesize SentAgo;
@synthesize ByUser;
@synthesize HideInPendingList;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setToken:[dict valueForKey:@"Token"]];
	[self setSentAgo:[dict valueForKey:@"SentAgo"]];

	id dictByUser = [dict valueForKey:@"ByUser"];
	if ([dictByUser isKindOfClass:[NSDictionary class]]){
		[self setByUser:[[QXEmbedUser alloc] initWithDictionary:dictByUser]];
	}
	[self setHideInPendingList:[[dict valueForKey:@"HideInPendingList"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.SentAgo forKey:@"SentAgo"];
	[dict setValue:[self.ByUser dictionary] forKey:@"ByUser"];
	
	[dict setValue:[NSNumber numberWithBool:self.HideInPendingList] forKey:@"HideInPendingList"];

	return dict;
}

@end

// --- MyCount ---
@implementation QXMyCount

@synthesize UserId;
@synthesize FollowedUnreadCount;
@synthesize NotificationUnreadCount;
@synthesize ActiveTasksCount;
@synthesize GroupCounts;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];
	[self setFollowedUnreadCount:[dict valueForKey:@"FollowedUnreadCount"]];
	[self setNotificationUnreadCount:[dict valueForKey:@"NotificationUnreadCount"]];
	[self setActiveTasksCount:[dict valueForKey:@"ActiveTasksCount"]];

	NSMutableArray * mGroupCounts = [[NSMutableArray alloc] init];
	NSArray * lGroupCounts = [dict valueForKey:@"GroupCounts"];
	if ([lGroupCounts isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupCounts) {
			[mGroupCounts addObject: [[QXGroupCount alloc] initWithDictionary:d]];
		}
		[self setGroupCounts:mGroupCounts];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];
	[dict setValue:self.FollowedUnreadCount forKey:@"FollowedUnreadCount"];
	[dict setValue:self.NotificationUnreadCount forKey:@"NotificationUnreadCount"];
	[dict setValue:self.ActiveTasksCount forKey:@"ActiveTasksCount"];

	NSMutableArray * mGroupCounts = [[NSMutableArray alloc] init];
	for (QXGroupCount * p in GroupCounts) {
		[mGroupCounts addObject:[p dictionary]];
	}
	[dict setValue:mGroupCounts forKey:@"GroupCounts"];
	

	return dict;
}

@end

// --- EmbedEntry ---
@implementation QXEmbedEntry

@synthesize Id;
@synthesize GroupId;
@synthesize Title;
@synthesize HtmlTitle;
@synthesize EType;
@synthesize Author;
@synthesize ToUsers;
@synthesize Link;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setHtmlTitle:[dict valueForKey:@"HtmlTitle"]];
	[self setEType:[dict valueForKey:@"EType"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	NSArray * lToUsers = [dict valueForKey:@"ToUsers"];
	if ([lToUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToUsers) {
			[mToUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setToUsers:mToUsers];
	}
	[self setLink:[dict valueForKey:@"Link"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.HtmlTitle forKey:@"HtmlTitle"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in ToUsers) {
		[mToUsers addObject:[p dictionary]];
	}
	[dict setValue:mToUsers forKey:@"ToUsers"];
	
	[dict setValue:self.Link forKey:@"Link"];

	return dict;
}

@end

// --- Member ---
@implementation QXMember

@synthesize Name;
@synthesize Email;
@synthesize ComfirmationSentAt;
@synthesize SignupConfirmedAt;
@synthesize SignupStatus;
@synthesize JoinedOrgs;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setComfirmationSentAt:[dict valueForKey:@"ComfirmationSentAt"]];
	[self setSignupConfirmedAt:[dict valueForKey:@"SignupConfirmedAt"]];
	[self setSignupStatus:[dict valueForKey:@"SignupStatus"]];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	NSArray * lJoinedOrgs = [dict valueForKey:@"JoinedOrgs"];
	if ([lJoinedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lJoinedOrgs) {
			[mJoinedOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setJoinedOrgs:mJoinedOrgs];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.ComfirmationSentAt forKey:@"ComfirmationSentAt"];
	[dict setValue:self.SignupConfirmedAt forKey:@"SignupConfirmedAt"];
	[dict setValue:self.SignupStatus forKey:@"SignupStatus"];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in JoinedOrgs) {
		[mJoinedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mJoinedOrgs forKey:@"JoinedOrgs"];
	

	return dict;
}

@end

// --- OrgStats ---
@implementation QXOrgStats

@synthesize Organization;
@synthesize UserCount;
@synthesize GroupCount;
@synthesize SharedGroupCount;
@synthesize EntryCount;
@synthesize CommentCount;
@synthesize ChatCount;
@synthesize CreatedAt;
@synthesize LastUpdate;
@synthesize Author;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrganization = [dict valueForKey:@"Organization"];
	if ([dictOrganization isKindOfClass:[NSDictionary class]]){
		[self setOrganization:[[QXOrganization alloc] initWithDictionary:dictOrganization]];
	}
	[self setUserCount:[dict valueForKey:@"UserCount"]];
	[self setGroupCount:[dict valueForKey:@"GroupCount"]];
	[self setSharedGroupCount:[dict valueForKey:@"SharedGroupCount"]];
	[self setEntryCount:[dict valueForKey:@"EntryCount"]];
	[self setCommentCount:[dict valueForKey:@"CommentCount"]];
	[self setChatCount:[dict valueForKey:@"ChatCount"]];
	[self setCreatedAt:[dict valueForKey:@"CreatedAt"]];
	[self setLastUpdate:[dict valueForKey:@"LastUpdate"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Organization dictionary] forKey:@"Organization"];
	
	[dict setValue:self.UserCount forKey:@"UserCount"];
	[dict setValue:self.GroupCount forKey:@"GroupCount"];
	[dict setValue:self.SharedGroupCount forKey:@"SharedGroupCount"];
	[dict setValue:self.EntryCount forKey:@"EntryCount"];
	[dict setValue:self.CommentCount forKey:@"CommentCount"];
	[dict setValue:self.ChatCount forKey:@"ChatCount"];
	[dict setValue:self.CreatedAt forKey:@"CreatedAt"];
	[dict setValue:self.LastUpdate forKey:@"LastUpdate"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	

	return dict;
}

@end

// --- GroupSelector ---
@implementation QXGroupSelector

@synthesize Header;
@synthesize SelectedGroupId;
@synthesize SysMessage;
@synthesize FollowingNormalGroups;
@synthesize FollowingSharedGroups;
@synthesize UnFollowingNormalGroups;
@synthesize UnFollowingSharedGroups;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setHeader:[dict valueForKey:@"Header"]];
	[self setSelectedGroupId:[dict valueForKey:@"SelectedGroupId"]];

	id dictSysMessage = [dict valueForKey:@"SysMessage"];
	if ([dictSysMessage isKindOfClass:[NSDictionary class]]){
		[self setSysMessage:[[QXGroupSelectorItem alloc] initWithDictionary:dictSysMessage]];
	}

	NSMutableArray * mFollowingNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingNormalGroups = [dict valueForKey:@"FollowingNormalGroups"];
	if ([lFollowingNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingNormalGroups) {
			[mFollowingNormalGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setFollowingNormalGroups:mFollowingNormalGroups];
	}

	NSMutableArray * mFollowingSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingSharedGroups = [dict valueForKey:@"FollowingSharedGroups"];
	if ([lFollowingSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingSharedGroups) {
			[mFollowingSharedGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setFollowingSharedGroups:mFollowingSharedGroups];
	}

	NSMutableArray * mUnFollowingNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowingNormalGroups = [dict valueForKey:@"UnFollowingNormalGroups"];
	if ([lUnFollowingNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowingNormalGroups) {
			[mUnFollowingNormalGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setUnFollowingNormalGroups:mUnFollowingNormalGroups];
	}

	NSMutableArray * mUnFollowingSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowingSharedGroups = [dict valueForKey:@"UnFollowingSharedGroups"];
	if ([lUnFollowingSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowingSharedGroups) {
			[mUnFollowingSharedGroups addObject: [[QXGroupSelectorItem alloc] initWithDictionary:d]];
		}
		[self setUnFollowingSharedGroups:mUnFollowingSharedGroups];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Header forKey:@"Header"];
	[dict setValue:self.SelectedGroupId forKey:@"SelectedGroupId"];
	[dict setValue:[self.SysMessage dictionary] forKey:@"SysMessage"];
	

	NSMutableArray * mFollowingNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in FollowingNormalGroups) {
		[mFollowingNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingNormalGroups forKey:@"FollowingNormalGroups"];
	

	NSMutableArray * mFollowingSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in FollowingSharedGroups) {
		[mFollowingSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingSharedGroups forKey:@"FollowingSharedGroups"];
	

	NSMutableArray * mUnFollowingNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in UnFollowingNormalGroups) {
		[mUnFollowingNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowingNormalGroups forKey:@"UnFollowingNormalGroups"];
	

	NSMutableArray * mUnFollowingSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroupSelectorItem * p in UnFollowingSharedGroups) {
		[mUnFollowingSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowingSharedGroups forKey:@"UnFollowingSharedGroups"];
	

	return dict;
}

@end

// --- AbandonInfo ---
@implementation QXAbandonInfo

@synthesize AbandonFromOrg;
@synthesize AvailableOrgs;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictAbandonFromOrg = [dict valueForKey:@"AbandonFromOrg"];
	if ([dictAbandonFromOrg isKindOfClass:[NSDictionary class]]){
		[self setAbandonFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictAbandonFromOrg]];
	}

	NSMutableArray * mAvailableOrgs = [[NSMutableArray alloc] init];
	NSArray * lAvailableOrgs = [dict valueForKey:@"AvailableOrgs"];
	if ([lAvailableOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAvailableOrgs) {
			[mAvailableOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setAvailableOrgs:mAvailableOrgs];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.AbandonFromOrg dictionary] forKey:@"AbandonFromOrg"];
	

	NSMutableArray * mAvailableOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in AvailableOrgs) {
		[mAvailableOrgs addObject:[p dictionary]];
	}
	[dict setValue:mAvailableOrgs forKey:@"AvailableOrgs"];
	

	return dict;
}

@end

// --- Message ---
@implementation QXMessage

@synthesize Id;
@synthesize ConversationId;
@synthesize UserId;
@synthesize Content;
@synthesize HtmlContent;
@synthesize CreatedAt;
@synthesize EmbedUser;
@synthesize ShowUser;
@synthesize HighlightedContent;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setConversationId:[dict valueForKey:@"ConversationId"]];
	[self setUserId:[dict valueForKey:@"UserId"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setHtmlContent:[dict valueForKey:@"HtmlContent"]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];

	id dictEmbedUser = [dict valueForKey:@"EmbedUser"];
	if ([dictEmbedUser isKindOfClass:[NSDictionary class]]){
		[self setEmbedUser:[[QXEmbedUser alloc] initWithDictionary:dictEmbedUser]];
	}
	[self setShowUser:[[dict valueForKey:@"ShowUser"] boolValue]];
	[self setHighlightedContent:[dict valueForKey:@"HighlightedContent"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.ConversationId forKey:@"ConversationId"];
	[dict setValue:self.UserId forKey:@"UserId"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.HtmlContent forKey:@"HtmlContent"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[self.EmbedUser dictionary] forKey:@"EmbedUser"];
	
	[dict setValue:[NSNumber numberWithBool:self.ShowUser] forKey:@"ShowUser"];
	[dict setValue:self.HighlightedContent forKey:@"HighlightedContent"];

	return dict;
}

@end

// --- BlogEntry ---
@implementation QXBlogEntry

@synthesize Id;
@synthesize Title;
@synthesize HtmlTitle;
@synthesize Slug;
@synthesize CreatedAt;
@synthesize UpdatedAt;
@synthesize Permalink;
@synthesize CreateCommentURL;
@synthesize HtmlContent;
@synthesize HtmlContentPart;
@synthesize Author;
@synthesize Comments;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setHtmlTitle:[dict valueForKey:@"HtmlTitle"]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setUpdatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"UpdatedAt"]]];
	[self setPermalink:[dict valueForKey:@"Permalink"]];
	[self setCreateCommentURL:[dict valueForKey:@"CreateCommentURL"]];
	[self setHtmlContent:[dict valueForKey:@"HtmlContent"]];
	[self setHtmlContentPart:[dict valueForKey:@"HtmlContentPart"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	NSArray * lComments = [dict valueForKey:@"Comments"];
	if ([lComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lComments) {
			[mComments addObject: [[QXBlogEntry alloc] initWithDictionary:d]];
		}
		[self setComments:mComments];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.HtmlTitle forKey:@"HtmlTitle"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.UpdatedAt] forKey:@"UpdatedAt"];
	[dict setValue:self.Permalink forKey:@"Permalink"];
	[dict setValue:self.CreateCommentURL forKey:@"CreateCommentURL"];
	[dict setValue:self.HtmlContent forKey:@"HtmlContent"];
	[dict setValue:self.HtmlContentPart forKey:@"HtmlContentPart"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	for (QXBlogEntry * p in Comments) {
		[mComments addObject:[p dictionary]];
	}
	[dict setValue:mComments forKey:@"Comments"];
	

	return dict;
}

@end

// --- EntryVersion ---
@implementation QXEntryVersion

@synthesize Id;
@synthesize GroupId;
@synthesize UpdatedAt;
@synthesize LocalUpdatedAt;
@synthesize UpdatedAtUnixNano;
@synthesize CurrentVersionEditor;
@synthesize IsNewVersion;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUpdatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"UpdatedAt"]]];
	[self setLocalUpdatedAt:[dict valueForKey:@"LocalUpdatedAt"]];
	[self setUpdatedAtUnixNano:[dict valueForKey:@"UpdatedAtUnixNano"]];

	id dictCurrentVersionEditor = [dict valueForKey:@"CurrentVersionEditor"];
	if ([dictCurrentVersionEditor isKindOfClass:[NSDictionary class]]){
		[self setCurrentVersionEditor:[[QXEmbedUser alloc] initWithDictionary:dictCurrentVersionEditor]];
	}
	[self setIsNewVersion:[[dict valueForKey:@"IsNewVersion"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:[QXQortexapi stringFromDate:self.UpdatedAt] forKey:@"UpdatedAt"];
	[dict setValue:self.LocalUpdatedAt forKey:@"LocalUpdatedAt"];
	[dict setValue:self.UpdatedAtUnixNano forKey:@"UpdatedAtUnixNano"];
	[dict setValue:[self.CurrentVersionEditor dictionary] forKey:@"CurrentVersionEditor"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsNewVersion] forKey:@"IsNewVersion"];

	return dict;
}

@end

// --- Task ---
@implementation QXTask

@synthesize IsTaskOwner;
@synthesize IsTaskAssignee;
@synthesize IsOthers;
@synthesize IsCurrentUserDone;
@synthesize IsAcknowledgement;
@synthesize IsTodoForOne;
@synthesize IsTodoForAll;
@synthesize IsCompleted;
@synthesize IsClosed;
@synthesize IsDueToday;
@synthesize IsOverDue;
@synthesize CreatedAt;
@synthesize Due;
@synthesize CompletedAt;
@synthesize LocalCreatedDate;
@synthesize LocalDue;
@synthesize LocalDueShortDate;
@synthesize DueInputValue;
@synthesize TotalUsersCount;
@synthesize CompletedUsersCount;
@synthesize PendingUsersCount;
@synthesize Owner;
@synthesize ToUsers;
@synthesize PendingUsers;
@synthesize CompletedUsers;
@synthesize ColorCssClass;
@synthesize TaskBarHtml;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setIsTaskOwner:[[dict valueForKey:@"IsTaskOwner"] boolValue]];
	[self setIsTaskAssignee:[[dict valueForKey:@"IsTaskAssignee"] boolValue]];
	[self setIsOthers:[[dict valueForKey:@"IsOthers"] boolValue]];
	[self setIsCurrentUserDone:[[dict valueForKey:@"IsCurrentUserDone"] boolValue]];
	[self setIsAcknowledgement:[[dict valueForKey:@"IsAcknowledgement"] boolValue]];
	[self setIsTodoForOne:[[dict valueForKey:@"IsTodoForOne"] boolValue]];
	[self setIsTodoForAll:[[dict valueForKey:@"IsTodoForAll"] boolValue]];
	[self setIsCompleted:[[dict valueForKey:@"IsCompleted"] boolValue]];
	[self setIsClosed:[[dict valueForKey:@"IsClosed"] boolValue]];
	[self setIsDueToday:[[dict valueForKey:@"IsDueToday"] boolValue]];
	[self setIsOverDue:[[dict valueForKey:@"IsOverDue"] boolValue]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setDue:[QXQortexapi dateFromString:[dict valueForKey:@"Due"]]];
	[self setCompletedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CompletedAt"]]];
	[self setLocalCreatedDate:[dict valueForKey:@"LocalCreatedDate"]];
	[self setLocalDue:[dict valueForKey:@"LocalDue"]];
	[self setLocalDueShortDate:[dict valueForKey:@"LocalDueShortDate"]];
	[self setDueInputValue:[dict valueForKey:@"DueInputValue"]];
	[self setTotalUsersCount:[dict valueForKey:@"TotalUsersCount"]];
	[self setCompletedUsersCount:[dict valueForKey:@"CompletedUsersCount"]];
	[self setPendingUsersCount:[dict valueForKey:@"PendingUsersCount"]];

	id dictOwner = [dict valueForKey:@"Owner"];
	if ([dictOwner isKindOfClass:[NSDictionary class]]){
		[self setOwner:[[QXEmbedUser alloc] initWithDictionary:dictOwner]];
	}

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	NSArray * lToUsers = [dict valueForKey:@"ToUsers"];
	if ([lToUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToUsers) {
			[mToUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setToUsers:mToUsers];
	}

	NSMutableArray * mPendingUsers = [[NSMutableArray alloc] init];
	NSArray * lPendingUsers = [dict valueForKey:@"PendingUsers"];
	if ([lPendingUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lPendingUsers) {
			[mPendingUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setPendingUsers:mPendingUsers];
	}

	NSMutableArray * mCompletedUsers = [[NSMutableArray alloc] init];
	NSArray * lCompletedUsers = [dict valueForKey:@"CompletedUsers"];
	if ([lCompletedUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lCompletedUsers) {
			[mCompletedUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setCompletedUsers:mCompletedUsers];
	}
	[self setColorCssClass:[dict valueForKey:@"ColorCssClass"]];
	[self setTaskBarHtml:[dict valueForKey:@"TaskBarHtml"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskOwner] forKey:@"IsTaskOwner"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskAssignee] forKey:@"IsTaskAssignee"];
	[dict setValue:[NSNumber numberWithBool:self.IsOthers] forKey:@"IsOthers"];
	[dict setValue:[NSNumber numberWithBool:self.IsCurrentUserDone] forKey:@"IsCurrentUserDone"];
	[dict setValue:[NSNumber numberWithBool:self.IsAcknowledgement] forKey:@"IsAcknowledgement"];
	[dict setValue:[NSNumber numberWithBool:self.IsTodoForOne] forKey:@"IsTodoForOne"];
	[dict setValue:[NSNumber numberWithBool:self.IsTodoForAll] forKey:@"IsTodoForAll"];
	[dict setValue:[NSNumber numberWithBool:self.IsCompleted] forKey:@"IsCompleted"];
	[dict setValue:[NSNumber numberWithBool:self.IsClosed] forKey:@"IsClosed"];
	[dict setValue:[NSNumber numberWithBool:self.IsDueToday] forKey:@"IsDueToday"];
	[dict setValue:[NSNumber numberWithBool:self.IsOverDue] forKey:@"IsOverDue"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.Due] forKey:@"Due"];
	[dict setValue:[QXQortexapi stringFromDate:self.CompletedAt] forKey:@"CompletedAt"];
	[dict setValue:self.LocalCreatedDate forKey:@"LocalCreatedDate"];
	[dict setValue:self.LocalDue forKey:@"LocalDue"];
	[dict setValue:self.LocalDueShortDate forKey:@"LocalDueShortDate"];
	[dict setValue:self.DueInputValue forKey:@"DueInputValue"];
	[dict setValue:self.TotalUsersCount forKey:@"TotalUsersCount"];
	[dict setValue:self.CompletedUsersCount forKey:@"CompletedUsersCount"];
	[dict setValue:self.PendingUsersCount forKey:@"PendingUsersCount"];
	[dict setValue:[self.Owner dictionary] forKey:@"Owner"];
	

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in ToUsers) {
		[mToUsers addObject:[p dictionary]];
	}
	[dict setValue:mToUsers forKey:@"ToUsers"];
	

	NSMutableArray * mPendingUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in PendingUsers) {
		[mPendingUsers addObject:[p dictionary]];
	}
	[dict setValue:mPendingUsers forKey:@"PendingUsers"];
	

	NSMutableArray * mCompletedUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in CompletedUsers) {
		[mCompletedUsers addObject:[p dictionary]];
	}
	[dict setValue:mCompletedUsers forKey:@"CompletedUsers"];
	
	[dict setValue:self.ColorCssClass forKey:@"ColorCssClass"];
	[dict setValue:self.TaskBarHtml forKey:@"TaskBarHtml"];

	return dict;
}

@end

// --- User ---
@implementation QXUser

@synthesize Id;
@synthesize Email;
@synthesize Firstame;
@synthesize LastName;
@synthesize Name;
@synthesize Title;
@synthesize Avatar;
@synthesize JID;
@synthesize Timezone;
@synthesize IsSuperUser;
@synthesize IsSharedUser;
@synthesize OrgId;
@synthesize OriginalOrgId;
@synthesize PrefixURL;
@synthesize ProfileURL;
@synthesize IsLoggedInUser;
@synthesize IsAvailable;
@synthesize IsDisabled;
@synthesize IsDeleted;
@synthesize FromSharedGroup;
@synthesize FromOrganizationName;
@synthesize Editable;
@synthesize Followable;
@synthesize FollowedByMe;
@synthesize FollowingTheGroup;
@synthesize Department;
@synthesize Location;
@synthesize FollowingGroups;
@synthesize Preferences;
@synthesize NoDetail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setFirstame:[dict valueForKey:@"Firstame"]];
	[self setLastName:[dict valueForKey:@"LastName"]];
	[self setName:[dict valueForKey:@"Name"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setAvatar:[dict valueForKey:@"Avatar"]];
	[self setJID:[dict valueForKey:@"JID"]];
	[self setTimezone:[dict valueForKey:@"Timezone"]];
	[self setIsSuperUser:[[dict valueForKey:@"IsSuperUser"] boolValue]];
	[self setIsSharedUser:[[dict valueForKey:@"IsSharedUser"] boolValue]];
	[self setOrgId:[dict valueForKey:@"OrgId"]];
	[self setOriginalOrgId:[dict valueForKey:@"OriginalOrgId"]];
	[self setPrefixURL:[dict valueForKey:@"PrefixURL"]];
	[self setProfileURL:[dict valueForKey:@"ProfileURL"]];
	[self setIsLoggedInUser:[[dict valueForKey:@"IsLoggedInUser"] boolValue]];
	[self setIsAvailable:[[dict valueForKey:@"IsAvailable"] boolValue]];
	[self setIsDisabled:[[dict valueForKey:@"IsDisabled"] boolValue]];
	[self setIsDeleted:[[dict valueForKey:@"IsDeleted"] boolValue]];
	[self setFromSharedGroup:[[dict valueForKey:@"FromSharedGroup"] boolValue]];
	[self setFromOrganizationName:[dict valueForKey:@"FromOrganizationName"]];
	[self setEditable:[[dict valueForKey:@"Editable"] boolValue]];
	[self setFollowable:[[dict valueForKey:@"Followable"] boolValue]];
	[self setFollowedByMe:[[dict valueForKey:@"FollowedByMe"] boolValue]];
	[self setFollowingTheGroup:[[dict valueForKey:@"FollowingTheGroup"] boolValue]];
	[self setDepartment:[dict valueForKey:@"Department"]];
	[self setLocation:[dict valueForKey:@"Location"]];

	NSMutableArray * mFollowingGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowingGroups = [dict valueForKey:@"FollowingGroups"];
	if ([lFollowingGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingGroups) {
			[mFollowingGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowingGroups:mFollowingGroups];
	}

	id dictPreferences = [dict valueForKey:@"Preferences"];
	if ([dictPreferences isKindOfClass:[NSDictionary class]]){
		[self setPreferences:[[QXPreferences alloc] initWithDictionary:dictPreferences]];
	}
	[self setNoDetail:[[dict valueForKey:@"NoDetail"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Firstame forKey:@"Firstame"];
	[dict setValue:self.LastName forKey:@"LastName"];
	[dict setValue:self.Name forKey:@"Name"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Avatar forKey:@"Avatar"];
	[dict setValue:self.JID forKey:@"JID"];
	[dict setValue:self.Timezone forKey:@"Timezone"];
	[dict setValue:[NSNumber numberWithBool:self.IsSuperUser] forKey:@"IsSuperUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsSharedUser] forKey:@"IsSharedUser"];
	[dict setValue:self.OrgId forKey:@"OrgId"];
	[dict setValue:self.OriginalOrgId forKey:@"OriginalOrgId"];
	[dict setValue:self.PrefixURL forKey:@"PrefixURL"];
	[dict setValue:self.ProfileURL forKey:@"ProfileURL"];
	[dict setValue:[NSNumber numberWithBool:self.IsLoggedInUser] forKey:@"IsLoggedInUser"];
	[dict setValue:[NSNumber numberWithBool:self.IsAvailable] forKey:@"IsAvailable"];
	[dict setValue:[NSNumber numberWithBool:self.IsDisabled] forKey:@"IsDisabled"];
	[dict setValue:[NSNumber numberWithBool:self.IsDeleted] forKey:@"IsDeleted"];
	[dict setValue:[NSNumber numberWithBool:self.FromSharedGroup] forKey:@"FromSharedGroup"];
	[dict setValue:self.FromOrganizationName forKey:@"FromOrganizationName"];
	[dict setValue:[NSNumber numberWithBool:self.Editable] forKey:@"Editable"];
	[dict setValue:[NSNumber numberWithBool:self.Followable] forKey:@"Followable"];
	[dict setValue:[NSNumber numberWithBool:self.FollowedByMe] forKey:@"FollowedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.FollowingTheGroup] forKey:@"FollowingTheGroup"];
	[dict setValue:self.Department forKey:@"Department"];
	[dict setValue:self.Location forKey:@"Location"];

	NSMutableArray * mFollowingGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowingGroups) {
		[mFollowingGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowingGroups forKey:@"FollowingGroups"];
	
	[dict setValue:[self.Preferences dictionary] forKey:@"Preferences"];
	
	[dict setValue:[NSNumber numberWithBool:self.NoDetail] forKey:@"NoDetail"];

	return dict;
}

@end

// --- Conversation ---
@implementation QXConversation

@synthesize Id;
@synthesize Title;
@synthesize UserIds;
@synthesize Participants;
@synthesize CreatedAt;
@synthesize EndedAt;
@synthesize LocalHumanCreatedAt;
@synthesize Topic;
@synthesize Private;
@synthesize IsClose;
@synthesize IsShared;
@synthesize SharedMessageIds;
@synthesize MessagesCount;
@synthesize Messages;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setUserIds:[dict valueForKey:@"UserIds"]];

	NSMutableArray * mParticipants = [[NSMutableArray alloc] init];
	NSArray * lParticipants = [dict valueForKey:@"Participants"];
	if ([lParticipants isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lParticipants) {
			[mParticipants addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setParticipants:mParticipants];
	}
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setEndedAt:[QXQortexapi dateFromString:[dict valueForKey:@"EndedAt"]]];
	[self setLocalHumanCreatedAt:[dict valueForKey:@"LocalHumanCreatedAt"]];
	[self setTopic:[dict valueForKey:@"Topic"]];
	[self setPrivate:[[dict valueForKey:@"Private"] boolValue]];
	[self setIsClose:[[dict valueForKey:@"IsClose"] boolValue]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setSharedMessageIds:[dict valueForKey:@"SharedMessageIds"]];
	[self setMessagesCount:[dict valueForKey:@"MessagesCount"]];

	NSMutableArray * mMessages = [[NSMutableArray alloc] init];
	NSArray * lMessages = [dict valueForKey:@"Messages"];
	if ([lMessages isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMessages) {
			[mMessages addObject: [[QXMessage alloc] initWithDictionary:d]];
		}
		[self setMessages:mMessages];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.UserIds forKey:@"UserIds"];

	NSMutableArray * mParticipants = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in Participants) {
		[mParticipants addObject:[p dictionary]];
	}
	[dict setValue:mParticipants forKey:@"Participants"];
	
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.EndedAt] forKey:@"EndedAt"];
	[dict setValue:self.LocalHumanCreatedAt forKey:@"LocalHumanCreatedAt"];
	[dict setValue:self.Topic forKey:@"Topic"];
	[dict setValue:[NSNumber numberWithBool:self.Private] forKey:@"Private"];
	[dict setValue:[NSNumber numberWithBool:self.IsClose] forKey:@"IsClose"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:self.SharedMessageIds forKey:@"SharedMessageIds"];
	[dict setValue:self.MessagesCount forKey:@"MessagesCount"];

	NSMutableArray * mMessages = [[NSMutableArray alloc] init];
	for (QXMessage * p in Messages) {
		[mMessages addObject:[p dictionary]];
	}
	[dict setValue:mMessages forKey:@"Messages"];
	

	return dict;
}

@end

// --- NotificationItem ---
@implementation QXNotificationItem

@synthesize Id;
@synthesize GroupId;
@synthesize ToUser;
@synthesize ForEntry;
@synthesize FromUser;
@synthesize FromOrg;
@synthesize CausedByEntry;
@synthesize NotifiedAt;
@synthesize ReadAt;
@synthesize Readed;
@synthesize Type;
@synthesize Link;
@synthesize SharingRequestToEmail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	id dictToUser = [dict valueForKey:@"ToUser"];
	if ([dictToUser isKindOfClass:[NSDictionary class]]){
		[self setToUser:[[QXEmbedUser alloc] initWithDictionary:dictToUser]];
	}

	id dictForEntry = [dict valueForKey:@"ForEntry"];
	if ([dictForEntry isKindOfClass:[NSDictionary class]]){
		[self setForEntry:[[QXEmbedEntry alloc] initWithDictionary:dictForEntry]];
	}

	id dictFromUser = [dict valueForKey:@"FromUser"];
	if ([dictFromUser isKindOfClass:[NSDictionary class]]){
		[self setFromUser:[[QXEmbedUser alloc] initWithDictionary:dictFromUser]];
	}

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	id dictCausedByEntry = [dict valueForKey:@"CausedByEntry"];
	if ([dictCausedByEntry isKindOfClass:[NSDictionary class]]){
		[self setCausedByEntry:[[QXEmbedEntry alloc] initWithDictionary:dictCausedByEntry]];
	}
	[self setNotifiedAt:[QXQortexapi dateFromString:[dict valueForKey:@"NotifiedAt"]]];
	[self setReadAt:[QXQortexapi dateFromString:[dict valueForKey:@"ReadAt"]]];
	[self setReaded:[[dict valueForKey:@"Readed"] boolValue]];
	[self setType:[dict valueForKey:@"Type"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setSharingRequestToEmail:[dict valueForKey:@"SharingRequestToEmail"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:[self.ToUser dictionary] forKey:@"ToUser"];
	
	[dict setValue:[self.ForEntry dictionary] forKey:@"ForEntry"];
	
	[dict setValue:[self.FromUser dictionary] forKey:@"FromUser"];
	
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	
	[dict setValue:[self.CausedByEntry dictionary] forKey:@"CausedByEntry"];
	
	[dict setValue:[QXQortexapi stringFromDate:self.NotifiedAt] forKey:@"NotifiedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.ReadAt] forKey:@"ReadAt"];
	[dict setValue:[NSNumber numberWithBool:self.Readed] forKey:@"Readed"];
	[dict setValue:self.Type forKey:@"Type"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.SharingRequestToEmail forKey:@"SharingRequestToEmail"];

	return dict;
}

@end

// --- SharingInvitation ---
@implementation QXSharingInvitation

@synthesize FromOrg;
@synthesize FromUserId;
@synthesize SharedGroup;
@synthesize IsNewAccount;
@synthesize Email;
@synthesize Token;
@synthesize JoinedOrgs;
@synthesize IsAccepted;
@synthesize IsRejected;
@synthesize IsPending;
@synthesize IsForwarded;
@synthesize IsCanceled;
@synthesize IsStopped;
@synthesize PendingDuration;
@synthesize ToOrgName;
@synthesize ToOrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}
	[self setFromUserId:[dict valueForKey:@"FromUserId"]];

	id dictSharedGroup = [dict valueForKey:@"SharedGroup"];
	if ([dictSharedGroup isKindOfClass:[NSDictionary class]]){
		[self setSharedGroup:[[QXGroup alloc] initWithDictionary:dictSharedGroup]];
	}
	[self setIsNewAccount:[[dict valueForKey:@"IsNewAccount"] boolValue]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setToken:[dict valueForKey:@"Token"]];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	NSArray * lJoinedOrgs = [dict valueForKey:@"JoinedOrgs"];
	if ([lJoinedOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lJoinedOrgs) {
			[mJoinedOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setJoinedOrgs:mJoinedOrgs];
	}
	[self setIsAccepted:[[dict valueForKey:@"IsAccepted"] boolValue]];
	[self setIsRejected:[[dict valueForKey:@"IsRejected"] boolValue]];
	[self setIsPending:[[dict valueForKey:@"IsPending"] boolValue]];
	[self setIsForwarded:[[dict valueForKey:@"IsForwarded"] boolValue]];
	[self setIsCanceled:[[dict valueForKey:@"IsCanceled"] boolValue]];
	[self setIsStopped:[[dict valueForKey:@"IsStopped"] boolValue]];
	[self setPendingDuration:[dict valueForKey:@"PendingDuration"]];
	[self setToOrgName:[dict valueForKey:@"ToOrgName"]];
	[self setToOrgId:[dict valueForKey:@"ToOrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	
	[dict setValue:self.FromUserId forKey:@"FromUserId"];
	[dict setValue:[self.SharedGroup dictionary] forKey:@"SharedGroup"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsNewAccount] forKey:@"IsNewAccount"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Token forKey:@"Token"];

	NSMutableArray * mJoinedOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in JoinedOrgs) {
		[mJoinedOrgs addObject:[p dictionary]];
	}
	[dict setValue:mJoinedOrgs forKey:@"JoinedOrgs"];
	
	[dict setValue:[NSNumber numberWithBool:self.IsAccepted] forKey:@"IsAccepted"];
	[dict setValue:[NSNumber numberWithBool:self.IsRejected] forKey:@"IsRejected"];
	[dict setValue:[NSNumber numberWithBool:self.IsPending] forKey:@"IsPending"];
	[dict setValue:[NSNumber numberWithBool:self.IsForwarded] forKey:@"IsForwarded"];
	[dict setValue:[NSNumber numberWithBool:self.IsCanceled] forKey:@"IsCanceled"];
	[dict setValue:[NSNumber numberWithBool:self.IsStopped] forKey:@"IsStopped"];
	[dict setValue:self.PendingDuration forKey:@"PendingDuration"];
	[dict setValue:self.ToOrgName forKey:@"ToOrgName"];
	[dict setValue:self.ToOrgId forKey:@"ToOrgId"];

	return dict;
}

@end

// --- Request ---
@implementation QXRequest

@synthesize CurrentPrefixURL;
@synthesize Info;
@synthesize ActionButton;
@synthesize FromOrg;
@synthesize ToOrg;
@synthesize SharedGroup;
@synthesize SharedOrgIdHex;
@synthesize FromUserIdHex;
@synthesize SharedInvitee;
@synthesize SharedInviter;
@synthesize SharedResponsor;
@synthesize ToEmail;
@synthesize State;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setCurrentPrefixURL:[dict valueForKey:@"CurrentPrefixURL"]];
	[self setInfo:[dict valueForKey:@"Info"]];
	[self setActionButton:[dict valueForKey:@"ActionButton"]];

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	id dictToOrg = [dict valueForKey:@"ToOrg"];
	if ([dictToOrg isKindOfClass:[NSDictionary class]]){
		[self setToOrg:[[QXEmbedOrg alloc] initWithDictionary:dictToOrg]];
	}

	id dictSharedGroup = [dict valueForKey:@"SharedGroup"];
	if ([dictSharedGroup isKindOfClass:[NSDictionary class]]){
		[self setSharedGroup:[[QXGroup alloc] initWithDictionary:dictSharedGroup]];
	}
	[self setSharedOrgIdHex:[dict valueForKey:@"SharedOrgIdHex"]];
	[self setFromUserIdHex:[dict valueForKey:@"FromUserIdHex"]];

	id dictSharedInvitee = [dict valueForKey:@"SharedInvitee"];
	if ([dictSharedInvitee isKindOfClass:[NSDictionary class]]){
		[self setSharedInvitee:[[QXEmbedUser alloc] initWithDictionary:dictSharedInvitee]];
	}

	id dictSharedInviter = [dict valueForKey:@"SharedInviter"];
	if ([dictSharedInviter isKindOfClass:[NSDictionary class]]){
		[self setSharedInviter:[[QXEmbedUser alloc] initWithDictionary:dictSharedInviter]];
	}

	id dictSharedResponsor = [dict valueForKey:@"SharedResponsor"];
	if ([dictSharedResponsor isKindOfClass:[NSDictionary class]]){
		[self setSharedResponsor:[[QXEmbedUser alloc] initWithDictionary:dictSharedResponsor]];
	}
	[self setToEmail:[dict valueForKey:@"ToEmail"]];
	[self setState:[dict valueForKey:@"State"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.CurrentPrefixURL forKey:@"CurrentPrefixURL"];
	[dict setValue:self.Info forKey:@"Info"];
	[dict setValue:self.ActionButton forKey:@"ActionButton"];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	
	[dict setValue:[self.ToOrg dictionary] forKey:@"ToOrg"];
	
	[dict setValue:[self.SharedGroup dictionary] forKey:@"SharedGroup"];
	
	[dict setValue:self.SharedOrgIdHex forKey:@"SharedOrgIdHex"];
	[dict setValue:self.FromUserIdHex forKey:@"FromUserIdHex"];
	[dict setValue:[self.SharedInvitee dictionary] forKey:@"SharedInvitee"];
	
	[dict setValue:[self.SharedInviter dictionary] forKey:@"SharedInviter"];
	
	[dict setValue:[self.SharedResponsor dictionary] forKey:@"SharedResponsor"];
	
	[dict setValue:self.ToEmail forKey:@"ToEmail"];
	[dict setValue:self.State forKey:@"State"];

	return dict;
}

@end

// --- MyNotifications ---
@implementation QXMyNotifications

@synthesize NotificationItems;
@synthesize HasMore;
@synthesize LatestNotifyTime;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	NSArray * lNotificationItems = [dict valueForKey:@"NotificationItems"];
	if ([lNotificationItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNotificationItems) {
			[mNotificationItems addObject: [[QXNotificationItem alloc] initWithDictionary:d]];
		}
		[self setNotificationItems:mNotificationItems];
	}
	[self setHasMore:[[dict valueForKey:@"HasMore"] boolValue]];
	[self setLatestNotifyTime:[dict valueForKey:@"LatestNotifyTime"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	for (QXNotificationItem * p in NotificationItems) {
		[mNotificationItems addObject:[p dictionary]];
	}
	[dict setValue:mNotificationItems forKey:@"NotificationItems"];
	
	[dict setValue:[NSNumber numberWithBool:self.HasMore] forKey:@"HasMore"];
	[dict setValue:self.LatestNotifyTime forKey:@"LatestNotifyTime"];

	return dict;
}

@end

// --- Entry ---
@implementation QXEntry

@synthesize Id;
@synthesize EType;
@synthesize Title;
@synthesize Slug;
@synthesize Content;
@synthesize TypeTitle;
@synthesize RootId;
@synthesize GroupId;
@synthesize AuthorId;
@synthesize CreatedAt;
@synthesize UpdatedAt;
@synthesize BumpedUpAt;
@synthesize AllAttachmentsURL;
@synthesize Permalink;
@synthesize IconName;
@synthesize LocalHumanCreatedAt;
@synthesize LocalHumanUpdatedAt;
@synthesize WholeLastUpdateAtAgo;
@synthesize LastUpdateAtAgo;
@synthesize WatchedAtAgo;
@synthesize MentionedUserIds;
@synthesize DomainURL;
@synthesize UpdatedAtUnixNano;
@synthesize LastUpdateAt;
@synthesize HtmlTitle;
@synthesize HtmlContent;
@synthesize HtmlContentPart;
@synthesize TaskHtmlContentPart;
@synthesize WatchlistHtml;
@synthesize ToUsersHtml;
@synthesize LikedByUsersHtml;
@synthesize NotifyOptionsHtml;
@synthesize Link;
@synthesize PresentationLink;
@synthesize UploadURL;
@synthesize IsShared;
@synthesize IsPublished;
@synthesize IsCanPublish;
@synthesize IsMuted;
@synthesize IsReminding;
@synthesize IsSmartReminding;
@synthesize IsNoReminding;
@synthesize IsSystemMessage;
@synthesize IsInnerMessage;
@synthesize SystemMessageType;
@synthesize BroadcastType;
@synthesize IsBroadcast;
@synthesize IsBroadcastTypeToAllAdmins;
@synthesize IsBroadcastTypeToAllUsers;
@synthesize IsBroadcastTypeToSomeOrgs;
@synthesize IsFromSuperOrg;
@synthesize IsFeedback;
@synthesize FromOrg;
@synthesize ToOrgs;
@synthesize ToOrgsHtml;
@synthesize IsRequest;
@synthesize Request;
@synthesize VisibleForSuperUserInSuperOrg;
@synthesize VisibleForSuperOrg;
@synthesize IsKnowledgeBase;
@synthesize IsPost;
@synthesize IsComment;
@synthesize IsTask;
@synthesize IsChat;
@synthesize IsTaskToDo;
@synthesize IsTaskAck;
@synthesize IsInWatchList;
@synthesize IsToGroup;
@synthesize CurrentUserCanEdit;
@synthesize CanEdit;
@synthesize CanReply;
@synthesize ManagerCanEdit;
@synthesize LikedByMe;
@synthesize HasInlineTask;
@synthesize TaskIsCompleted;
@synthesize IsRoot;
@synthesize IsUnread;
@synthesize IsUpdated;
@synthesize IsLastVersion;
@synthesize Presentation;
@synthesize AnyoneCanEdit;
@synthesize IsInGroup;
@synthesize IsFromEmail;
@synthesize AllAttachmentsCount;
@synthesize CommentsCount;
@synthesize AllLikesCount;
@synthesize VersionCount;
@synthesize UnreadCommnetCount;
@synthesize Author;
@synthesize CurrentVersionEditor;
@synthesize Group;
@synthesize Task;
@synthesize Conversation;
@synthesize LinkedEntries;
@synthesize Versions;
@synthesize ToUsers;
@synthesize MentionedUsers;
@synthesize LikedByUsers;
@synthesize Attachments;
@synthesize FirstPicture;
@synthesize Comments;
@synthesize ExternalComments;
@synthesize CurrentVersionComments;
@synthesize OtherVersionsComments;
@synthesize NewComment;
@synthesize NewEntry;
@synthesize GroupSlector;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setEType:[dict valueForKey:@"EType"]];
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setSlug:[dict valueForKey:@"Slug"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setTypeTitle:[dict valueForKey:@"TypeTitle"]];
	[self setRootId:[dict valueForKey:@"RootId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setAuthorId:[dict valueForKey:@"AuthorId"]];
	[self setCreatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"CreatedAt"]]];
	[self setUpdatedAt:[QXQortexapi dateFromString:[dict valueForKey:@"UpdatedAt"]]];
	[self setBumpedUpAt:[QXQortexapi dateFromString:[dict valueForKey:@"BumpedUpAt"]]];
	[self setAllAttachmentsURL:[dict valueForKey:@"AllAttachmentsURL"]];
	[self setPermalink:[dict valueForKey:@"Permalink"]];
	[self setIconName:[dict valueForKey:@"IconName"]];
	[self setLocalHumanCreatedAt:[dict valueForKey:@"LocalHumanCreatedAt"]];
	[self setLocalHumanUpdatedAt:[dict valueForKey:@"LocalHumanUpdatedAt"]];
	[self setWholeLastUpdateAtAgo:[dict valueForKey:@"WholeLastUpdateAtAgo"]];
	[self setLastUpdateAtAgo:[dict valueForKey:@"LastUpdateAtAgo"]];
	[self setWatchedAtAgo:[dict valueForKey:@"WatchedAtAgo"]];
	[self setMentionedUserIds:[dict valueForKey:@"MentionedUserIds"]];
	[self setDomainURL:[dict valueForKey:@"DomainURL"]];
	[self setUpdatedAtUnixNano:[dict valueForKey:@"UpdatedAtUnixNano"]];
	[self setLastUpdateAt:[dict valueForKey:@"LastUpdateAt"]];
	[self setHtmlTitle:[dict valueForKey:@"HtmlTitle"]];
	[self setHtmlContent:[dict valueForKey:@"HtmlContent"]];
	[self setHtmlContentPart:[dict valueForKey:@"HtmlContentPart"]];
	[self setTaskHtmlContentPart:[dict valueForKey:@"TaskHtmlContentPart"]];
	[self setWatchlistHtml:[dict valueForKey:@"WatchlistHtml"]];
	[self setToUsersHtml:[dict valueForKey:@"ToUsersHtml"]];
	[self setLikedByUsersHtml:[dict valueForKey:@"LikedByUsersHtml"]];
	[self setNotifyOptionsHtml:[dict valueForKey:@"NotifyOptionsHtml"]];
	[self setLink:[dict valueForKey:@"Link"]];
	[self setPresentationLink:[dict valueForKey:@"PresentationLink"]];
	[self setUploadURL:[dict valueForKey:@"UploadURL"]];
	[self setIsShared:[[dict valueForKey:@"IsShared"] boolValue]];
	[self setIsPublished:[[dict valueForKey:@"IsPublished"] boolValue]];
	[self setIsCanPublish:[[dict valueForKey:@"IsCanPublish"] boolValue]];
	[self setIsMuted:[[dict valueForKey:@"IsMuted"] boolValue]];
	[self setIsReminding:[[dict valueForKey:@"IsReminding"] boolValue]];
	[self setIsSmartReminding:[[dict valueForKey:@"IsSmartReminding"] boolValue]];
	[self setIsNoReminding:[[dict valueForKey:@"IsNoReminding"] boolValue]];
	[self setIsSystemMessage:[[dict valueForKey:@"IsSystemMessage"] boolValue]];
	[self setIsInnerMessage:[[dict valueForKey:@"IsInnerMessage"] boolValue]];
	[self setSystemMessageType:[dict valueForKey:@"SystemMessageType"]];
	[self setBroadcastType:[dict valueForKey:@"BroadcastType"]];
	[self setIsBroadcast:[[dict valueForKey:@"IsBroadcast"] boolValue]];
	[self setIsBroadcastTypeToAllAdmins:[[dict valueForKey:@"IsBroadcastTypeToAllAdmins"] boolValue]];
	[self setIsBroadcastTypeToAllUsers:[[dict valueForKey:@"IsBroadcastTypeToAllUsers"] boolValue]];
	[self setIsBroadcastTypeToSomeOrgs:[[dict valueForKey:@"IsBroadcastTypeToSomeOrgs"] boolValue]];
	[self setIsFromSuperOrg:[[dict valueForKey:@"IsFromSuperOrg"] boolValue]];
	[self setIsFeedback:[[dict valueForKey:@"IsFeedback"] boolValue]];

	id dictFromOrg = [dict valueForKey:@"FromOrg"];
	if ([dictFromOrg isKindOfClass:[NSDictionary class]]){
		[self setFromOrg:[[QXEmbedOrg alloc] initWithDictionary:dictFromOrg]];
	}

	NSMutableArray * mToOrgs = [[NSMutableArray alloc] init];
	NSArray * lToOrgs = [dict valueForKey:@"ToOrgs"];
	if ([lToOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToOrgs) {
			[mToOrgs addObject: [[QXEmbedOrg alloc] initWithDictionary:d]];
		}
		[self setToOrgs:mToOrgs];
	}
	[self setToOrgsHtml:[dict valueForKey:@"ToOrgsHtml"]];
	[self setIsRequest:[[dict valueForKey:@"IsRequest"] boolValue]];

	id dictRequest = [dict valueForKey:@"Request"];
	if ([dictRequest isKindOfClass:[NSDictionary class]]){
		[self setRequest:[[QXRequest alloc] initWithDictionary:dictRequest]];
	}
	[self setVisibleForSuperUserInSuperOrg:[[dict valueForKey:@"VisibleForSuperUserInSuperOrg"] boolValue]];
	[self setVisibleForSuperOrg:[[dict valueForKey:@"VisibleForSuperOrg"] boolValue]];
	[self setIsKnowledgeBase:[[dict valueForKey:@"IsKnowledgeBase"] boolValue]];
	[self setIsPost:[[dict valueForKey:@"IsPost"] boolValue]];
	[self setIsComment:[[dict valueForKey:@"IsComment"] boolValue]];
	[self setIsTask:[[dict valueForKey:@"IsTask"] boolValue]];
	[self setIsChat:[[dict valueForKey:@"IsChat"] boolValue]];
	[self setIsTaskToDo:[[dict valueForKey:@"IsTaskToDo"] boolValue]];
	[self setIsTaskAck:[[dict valueForKey:@"IsTaskAck"] boolValue]];
	[self setIsInWatchList:[[dict valueForKey:@"IsInWatchList"] boolValue]];
	[self setIsToGroup:[dict valueForKey:@"IsToGroup"]];
	[self setCurrentUserCanEdit:[[dict valueForKey:@"CurrentUserCanEdit"] boolValue]];
	[self setCanEdit:[[dict valueForKey:@"CanEdit"] boolValue]];
	[self setCanReply:[[dict valueForKey:@"CanReply"] boolValue]];
	[self setManagerCanEdit:[[dict valueForKey:@"ManagerCanEdit"] boolValue]];
	[self setLikedByMe:[[dict valueForKey:@"LikedByMe"] boolValue]];
	[self setHasInlineTask:[[dict valueForKey:@"HasInlineTask"] boolValue]];
	[self setTaskIsCompleted:[[dict valueForKey:@"TaskIsCompleted"] boolValue]];
	[self setIsRoot:[[dict valueForKey:@"IsRoot"] boolValue]];
	[self setIsUnread:[[dict valueForKey:@"IsUnread"] boolValue]];
	[self setIsUpdated:[[dict valueForKey:@"IsUpdated"] boolValue]];
	[self setIsLastVersion:[[dict valueForKey:@"IsLastVersion"] boolValue]];
	[self setPresentation:[[dict valueForKey:@"Presentation"] boolValue]];
	[self setAnyoneCanEdit:[[dict valueForKey:@"AnyoneCanEdit"] boolValue]];
	[self setIsInGroup:[[dict valueForKey:@"IsInGroup"] boolValue]];
	[self setIsFromEmail:[[dict valueForKey:@"IsFromEmail"] boolValue]];
	[self setAllAttachmentsCount:[dict valueForKey:@"AllAttachmentsCount"]];
	[self setCommentsCount:[dict valueForKey:@"CommentsCount"]];
	[self setAllLikesCount:[dict valueForKey:@"AllLikesCount"]];
	[self setVersionCount:[dict valueForKey:@"VersionCount"]];
	[self setUnreadCommnetCount:[dict valueForKey:@"UnreadCommnetCount"]];

	id dictAuthor = [dict valueForKey:@"Author"];
	if ([dictAuthor isKindOfClass:[NSDictionary class]]){
		[self setAuthor:[[QXEmbedUser alloc] initWithDictionary:dictAuthor]];
	}

	id dictCurrentVersionEditor = [dict valueForKey:@"CurrentVersionEditor"];
	if ([dictCurrentVersionEditor isKindOfClass:[NSDictionary class]]){
		[self setCurrentVersionEditor:[[QXEmbedUser alloc] initWithDictionary:dictCurrentVersionEditor]];
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}

	id dictTask = [dict valueForKey:@"Task"];
	if ([dictTask isKindOfClass:[NSDictionary class]]){
		[self setTask:[[QXTask alloc] initWithDictionary:dictTask]];
	}

	id dictConversation = [dict valueForKey:@"Conversation"];
	if ([dictConversation isKindOfClass:[NSDictionary class]]){
		[self setConversation:[[QXConversation alloc] initWithDictionary:dictConversation]];
	}

	NSMutableArray * mLinkedEntries = [[NSMutableArray alloc] init];
	NSArray * lLinkedEntries = [dict valueForKey:@"LinkedEntries"];
	if ([lLinkedEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lLinkedEntries) {
			[mLinkedEntries addObject: [[QXLinkedEntry alloc] initWithDictionary:d]];
		}
		[self setLinkedEntries:mLinkedEntries];
	}

	NSMutableArray * mVersions = [[NSMutableArray alloc] init];
	NSArray * lVersions = [dict valueForKey:@"Versions"];
	if ([lVersions isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lVersions) {
			[mVersions addObject: [[QXEntryVersion alloc] initWithDictionary:d]];
		}
		[self setVersions:mVersions];
	}

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	NSArray * lToUsers = [dict valueForKey:@"ToUsers"];
	if ([lToUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lToUsers) {
			[mToUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setToUsers:mToUsers];
	}

	NSMutableArray * mMentionedUsers = [[NSMutableArray alloc] init];
	NSArray * lMentionedUsers = [dict valueForKey:@"MentionedUsers"];
	if ([lMentionedUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMentionedUsers) {
			[mMentionedUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setMentionedUsers:mMentionedUsers];
	}

	NSMutableArray * mLikedByUsers = [[NSMutableArray alloc] init];
	NSArray * lLikedByUsers = [dict valueForKey:@"LikedByUsers"];
	if ([lLikedByUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lLikedByUsers) {
			[mLikedByUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setLikedByUsers:mLikedByUsers];
	}

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	NSArray * lAttachments = [dict valueForKey:@"Attachments"];
	if ([lAttachments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAttachments) {
			[mAttachments addObject: [[QXAttachment alloc] initWithDictionary:d]];
		}
		[self setAttachments:mAttachments];
	}

	id dictFirstPicture = [dict valueForKey:@"FirstPicture"];
	if ([dictFirstPicture isKindOfClass:[NSDictionary class]]){
		[self setFirstPicture:[[QXAttachment alloc] initWithDictionary:dictFirstPicture]];
	}

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	NSArray * lComments = [dict valueForKey:@"Comments"];
	if ([lComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lComments) {
			[mComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setComments:mComments];
	}

	NSMutableArray * mExternalComments = [[NSMutableArray alloc] init];
	NSArray * lExternalComments = [dict valueForKey:@"ExternalComments"];
	if ([lExternalComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lExternalComments) {
			[mExternalComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setExternalComments:mExternalComments];
	}

	NSMutableArray * mCurrentVersionComments = [[NSMutableArray alloc] init];
	NSArray * lCurrentVersionComments = [dict valueForKey:@"CurrentVersionComments"];
	if ([lCurrentVersionComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lCurrentVersionComments) {
			[mCurrentVersionComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setCurrentVersionComments:mCurrentVersionComments];
	}

	NSMutableArray * mOtherVersionsComments = [[NSMutableArray alloc] init];
	NSArray * lOtherVersionsComments = [dict valueForKey:@"OtherVersionsComments"];
	if ([lOtherVersionsComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOtherVersionsComments) {
			[mOtherVersionsComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setOtherVersionsComments:mOtherVersionsComments];
	}

	id dictNewComment = [dict valueForKey:@"NewComment"];
	if ([dictNewComment isKindOfClass:[NSDictionary class]]){
		[self setNewComment:[[QXEntry alloc] initWithDictionary:dictNewComment]];
	}

	id dictNewEntry = [dict valueForKey:@"NewEntry"];
	if ([dictNewEntry isKindOfClass:[NSDictionary class]]){
		[self setNewEntry:[[QXEntry alloc] initWithDictionary:dictNewEntry]];
	}

	id dictGroupSlector = [dict valueForKey:@"GroupSlector"];
	if ([dictGroupSlector isKindOfClass:[NSDictionary class]]){
		[self setGroupSlector:[[QXGroupSelector alloc] initWithDictionary:dictGroupSlector]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.EType forKey:@"EType"];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.Slug forKey:@"Slug"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:self.TypeTitle forKey:@"TypeTitle"];
	[dict setValue:self.RootId forKey:@"RootId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.AuthorId forKey:@"AuthorId"];
	[dict setValue:[QXQortexapi stringFromDate:self.CreatedAt] forKey:@"CreatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.UpdatedAt] forKey:@"UpdatedAt"];
	[dict setValue:[QXQortexapi stringFromDate:self.BumpedUpAt] forKey:@"BumpedUpAt"];
	[dict setValue:self.AllAttachmentsURL forKey:@"AllAttachmentsURL"];
	[dict setValue:self.Permalink forKey:@"Permalink"];
	[dict setValue:self.IconName forKey:@"IconName"];
	[dict setValue:self.LocalHumanCreatedAt forKey:@"LocalHumanCreatedAt"];
	[dict setValue:self.LocalHumanUpdatedAt forKey:@"LocalHumanUpdatedAt"];
	[dict setValue:self.WholeLastUpdateAtAgo forKey:@"WholeLastUpdateAtAgo"];
	[dict setValue:self.LastUpdateAtAgo forKey:@"LastUpdateAtAgo"];
	[dict setValue:self.WatchedAtAgo forKey:@"WatchedAtAgo"];
	[dict setValue:self.MentionedUserIds forKey:@"MentionedUserIds"];
	[dict setValue:self.DomainURL forKey:@"DomainURL"];
	[dict setValue:self.UpdatedAtUnixNano forKey:@"UpdatedAtUnixNano"];
	[dict setValue:self.LastUpdateAt forKey:@"LastUpdateAt"];
	[dict setValue:self.HtmlTitle forKey:@"HtmlTitle"];
	[dict setValue:self.HtmlContent forKey:@"HtmlContent"];
	[dict setValue:self.HtmlContentPart forKey:@"HtmlContentPart"];
	[dict setValue:self.TaskHtmlContentPart forKey:@"TaskHtmlContentPart"];
	[dict setValue:self.WatchlistHtml forKey:@"WatchlistHtml"];
	[dict setValue:self.ToUsersHtml forKey:@"ToUsersHtml"];
	[dict setValue:self.LikedByUsersHtml forKey:@"LikedByUsersHtml"];
	[dict setValue:self.NotifyOptionsHtml forKey:@"NotifyOptionsHtml"];
	[dict setValue:self.Link forKey:@"Link"];
	[dict setValue:self.PresentationLink forKey:@"PresentationLink"];
	[dict setValue:self.UploadURL forKey:@"UploadURL"];
	[dict setValue:[NSNumber numberWithBool:self.IsShared] forKey:@"IsShared"];
	[dict setValue:[NSNumber numberWithBool:self.IsPublished] forKey:@"IsPublished"];
	[dict setValue:[NSNumber numberWithBool:self.IsCanPublish] forKey:@"IsCanPublish"];
	[dict setValue:[NSNumber numberWithBool:self.IsMuted] forKey:@"IsMuted"];
	[dict setValue:[NSNumber numberWithBool:self.IsReminding] forKey:@"IsReminding"];
	[dict setValue:[NSNumber numberWithBool:self.IsSmartReminding] forKey:@"IsSmartReminding"];
	[dict setValue:[NSNumber numberWithBool:self.IsNoReminding] forKey:@"IsNoReminding"];
	[dict setValue:[NSNumber numberWithBool:self.IsSystemMessage] forKey:@"IsSystemMessage"];
	[dict setValue:[NSNumber numberWithBool:self.IsInnerMessage] forKey:@"IsInnerMessage"];
	[dict setValue:self.SystemMessageType forKey:@"SystemMessageType"];
	[dict setValue:self.BroadcastType forKey:@"BroadcastType"];
	[dict setValue:[NSNumber numberWithBool:self.IsBroadcast] forKey:@"IsBroadcast"];
	[dict setValue:[NSNumber numberWithBool:self.IsBroadcastTypeToAllAdmins] forKey:@"IsBroadcastTypeToAllAdmins"];
	[dict setValue:[NSNumber numberWithBool:self.IsBroadcastTypeToAllUsers] forKey:@"IsBroadcastTypeToAllUsers"];
	[dict setValue:[NSNumber numberWithBool:self.IsBroadcastTypeToSomeOrgs] forKey:@"IsBroadcastTypeToSomeOrgs"];
	[dict setValue:[NSNumber numberWithBool:self.IsFromSuperOrg] forKey:@"IsFromSuperOrg"];
	[dict setValue:[NSNumber numberWithBool:self.IsFeedback] forKey:@"IsFeedback"];
	[dict setValue:[self.FromOrg dictionary] forKey:@"FromOrg"];
	

	NSMutableArray * mToOrgs = [[NSMutableArray alloc] init];
	for (QXEmbedOrg * p in ToOrgs) {
		[mToOrgs addObject:[p dictionary]];
	}
	[dict setValue:mToOrgs forKey:@"ToOrgs"];
	
	[dict setValue:self.ToOrgsHtml forKey:@"ToOrgsHtml"];
	[dict setValue:[NSNumber numberWithBool:self.IsRequest] forKey:@"IsRequest"];
	[dict setValue:[self.Request dictionary] forKey:@"Request"];
	
	[dict setValue:[NSNumber numberWithBool:self.VisibleForSuperUserInSuperOrg] forKey:@"VisibleForSuperUserInSuperOrg"];
	[dict setValue:[NSNumber numberWithBool:self.VisibleForSuperOrg] forKey:@"VisibleForSuperOrg"];
	[dict setValue:[NSNumber numberWithBool:self.IsKnowledgeBase] forKey:@"IsKnowledgeBase"];
	[dict setValue:[NSNumber numberWithBool:self.IsPost] forKey:@"IsPost"];
	[dict setValue:[NSNumber numberWithBool:self.IsComment] forKey:@"IsComment"];
	[dict setValue:[NSNumber numberWithBool:self.IsTask] forKey:@"IsTask"];
	[dict setValue:[NSNumber numberWithBool:self.IsChat] forKey:@"IsChat"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskToDo] forKey:@"IsTaskToDo"];
	[dict setValue:[NSNumber numberWithBool:self.IsTaskAck] forKey:@"IsTaskAck"];
	[dict setValue:[NSNumber numberWithBool:self.IsInWatchList] forKey:@"IsInWatchList"];
	[dict setValue:self.IsToGroup forKey:@"IsToGroup"];
	[dict setValue:[NSNumber numberWithBool:self.CurrentUserCanEdit] forKey:@"CurrentUserCanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.CanEdit] forKey:@"CanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.CanReply] forKey:@"CanReply"];
	[dict setValue:[NSNumber numberWithBool:self.ManagerCanEdit] forKey:@"ManagerCanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.LikedByMe] forKey:@"LikedByMe"];
	[dict setValue:[NSNumber numberWithBool:self.HasInlineTask] forKey:@"HasInlineTask"];
	[dict setValue:[NSNumber numberWithBool:self.TaskIsCompleted] forKey:@"TaskIsCompleted"];
	[dict setValue:[NSNumber numberWithBool:self.IsRoot] forKey:@"IsRoot"];
	[dict setValue:[NSNumber numberWithBool:self.IsUnread] forKey:@"IsUnread"];
	[dict setValue:[NSNumber numberWithBool:self.IsUpdated] forKey:@"IsUpdated"];
	[dict setValue:[NSNumber numberWithBool:self.IsLastVersion] forKey:@"IsLastVersion"];
	[dict setValue:[NSNumber numberWithBool:self.Presentation] forKey:@"Presentation"];
	[dict setValue:[NSNumber numberWithBool:self.AnyoneCanEdit] forKey:@"AnyoneCanEdit"];
	[dict setValue:[NSNumber numberWithBool:self.IsInGroup] forKey:@"IsInGroup"];
	[dict setValue:[NSNumber numberWithBool:self.IsFromEmail] forKey:@"IsFromEmail"];
	[dict setValue:self.AllAttachmentsCount forKey:@"AllAttachmentsCount"];
	[dict setValue:self.CommentsCount forKey:@"CommentsCount"];
	[dict setValue:self.AllLikesCount forKey:@"AllLikesCount"];
	[dict setValue:self.VersionCount forKey:@"VersionCount"];
	[dict setValue:self.UnreadCommnetCount forKey:@"UnreadCommnetCount"];
	[dict setValue:[self.Author dictionary] forKey:@"Author"];
	
	[dict setValue:[self.CurrentVersionEditor dictionary] forKey:@"CurrentVersionEditor"];
	
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:[self.Task dictionary] forKey:@"Task"];
	
	[dict setValue:[self.Conversation dictionary] forKey:@"Conversation"];
	

	NSMutableArray * mLinkedEntries = [[NSMutableArray alloc] init];
	for (QXLinkedEntry * p in LinkedEntries) {
		[mLinkedEntries addObject:[p dictionary]];
	}
	[dict setValue:mLinkedEntries forKey:@"LinkedEntries"];
	

	NSMutableArray * mVersions = [[NSMutableArray alloc] init];
	for (QXEntryVersion * p in Versions) {
		[mVersions addObject:[p dictionary]];
	}
	[dict setValue:mVersions forKey:@"Versions"];
	

	NSMutableArray * mToUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in ToUsers) {
		[mToUsers addObject:[p dictionary]];
	}
	[dict setValue:mToUsers forKey:@"ToUsers"];
	

	NSMutableArray * mMentionedUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in MentionedUsers) {
		[mMentionedUsers addObject:[p dictionary]];
	}
	[dict setValue:mMentionedUsers forKey:@"MentionedUsers"];
	

	NSMutableArray * mLikedByUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in LikedByUsers) {
		[mLikedByUsers addObject:[p dictionary]];
	}
	[dict setValue:mLikedByUsers forKey:@"LikedByUsers"];
	

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	for (QXAttachment * p in Attachments) {
		[mAttachments addObject:[p dictionary]];
	}
	[dict setValue:mAttachments forKey:@"Attachments"];
	
	[dict setValue:[self.FirstPicture dictionary] forKey:@"FirstPicture"];
	

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in Comments) {
		[mComments addObject:[p dictionary]];
	}
	[dict setValue:mComments forKey:@"Comments"];
	

	NSMutableArray * mExternalComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in ExternalComments) {
		[mExternalComments addObject:[p dictionary]];
	}
	[dict setValue:mExternalComments forKey:@"ExternalComments"];
	

	NSMutableArray * mCurrentVersionComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in CurrentVersionComments) {
		[mCurrentVersionComments addObject:[p dictionary]];
	}
	[dict setValue:mCurrentVersionComments forKey:@"CurrentVersionComments"];
	

	NSMutableArray * mOtherVersionsComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in OtherVersionsComments) {
		[mOtherVersionsComments addObject:[p dictionary]];
	}
	[dict setValue:mOtherVersionsComments forKey:@"OtherVersionsComments"];
	
	[dict setValue:[self.NewComment dictionary] forKey:@"NewComment"];
	
	[dict setValue:[self.NewEntry dictionary] forKey:@"NewEntry"];
	
	[dict setValue:[self.GroupSlector dictionary] forKey:@"GroupSlector"];
	

	return dict;
}

@end

// --- WatchItem ---
@implementation QXWatchItem

@synthesize AttachCnt;
@synthesize CommentCnt;
@synthesize LikeCnt;
@synthesize AttachCntStr;
@synthesize CommentCntStr;
@synthesize LikeCntStr;
@synthesize WatchTime;
@synthesize IsSmartReminding;
@synthesize IsNoReminding;
@synthesize WatchEntry;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAttachCnt:[dict valueForKey:@"AttachCnt"]];
	[self setCommentCnt:[dict valueForKey:@"CommentCnt"]];
	[self setLikeCnt:[dict valueForKey:@"LikeCnt"]];
	[self setAttachCntStr:[dict valueForKey:@"AttachCntStr"]];
	[self setCommentCntStr:[dict valueForKey:@"CommentCntStr"]];
	[self setLikeCntStr:[dict valueForKey:@"LikeCntStr"]];
	[self setWatchTime:[QXQortexapi dateFromString:[dict valueForKey:@"WatchTime"]]];
	[self setIsSmartReminding:[[dict valueForKey:@"IsSmartReminding"] boolValue]];
	[self setIsNoReminding:[[dict valueForKey:@"IsNoReminding"] boolValue]];

	id dictWatchEntry = [dict valueForKey:@"WatchEntry"];
	if ([dictWatchEntry isKindOfClass:[NSDictionary class]]){
		[self setWatchEntry:[[QXEntry alloc] initWithDictionary:dictWatchEntry]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.AttachCnt forKey:@"AttachCnt"];
	[dict setValue:self.CommentCnt forKey:@"CommentCnt"];
	[dict setValue:self.LikeCnt forKey:@"LikeCnt"];
	[dict setValue:self.AttachCntStr forKey:@"AttachCntStr"];
	[dict setValue:self.CommentCntStr forKey:@"CommentCntStr"];
	[dict setValue:self.LikeCntStr forKey:@"LikeCntStr"];
	[dict setValue:[QXQortexapi stringFromDate:self.WatchTime] forKey:@"WatchTime"];
	[dict setValue:[NSNumber numberWithBool:self.IsSmartReminding] forKey:@"IsSmartReminding"];
	[dict setValue:[NSNumber numberWithBool:self.IsNoReminding] forKey:@"IsNoReminding"];
	[dict setValue:[self.WatchEntry dictionary] forKey:@"WatchEntry"];
	

	return dict;
}

@end

// --- MyChats ---
@implementation QXMyChats

@synthesize ChatEntries;
@synthesize HasMore;
@synthesize LatestCreateTime;
@synthesize WhatChats;
@synthesize PrefixURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mChatEntries = [[NSMutableArray alloc] init];
	NSArray * lChatEntries = [dict valueForKey:@"ChatEntries"];
	if ([lChatEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lChatEntries) {
			[mChatEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setChatEntries:mChatEntries];
	}
	[self setHasMore:[[dict valueForKey:@"HasMore"] boolValue]];
	[self setLatestCreateTime:[dict valueForKey:@"LatestCreateTime"]];
	[self setWhatChats:[[dict valueForKey:@"WhatChats"] boolValue]];
	[self setPrefixURL:[dict valueForKey:@"PrefixURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mChatEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in ChatEntries) {
		[mChatEntries addObject:[p dictionary]];
	}
	[dict setValue:mChatEntries forKey:@"ChatEntries"];
	
	[dict setValue:[NSNumber numberWithBool:self.HasMore] forKey:@"HasMore"];
	[dict setValue:self.LatestCreateTime forKey:@"LatestCreateTime"];
	[dict setValue:[NSNumber numberWithBool:self.WhatChats] forKey:@"WhatChats"];
	[dict setValue:self.PrefixURL forKey:@"PrefixURL"];

	return dict;
}

@end

// --- MyTask ---
@implementation QXMyTask

@synthesize TasksForMe;
@synthesize MyCreatedTasks;
@synthesize AboutTodos;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTasksForMe = [[NSMutableArray alloc] init];
	NSArray * lTasksForMe = [dict valueForKey:@"TasksForMe"];
	if ([lTasksForMe isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTasksForMe) {
			[mTasksForMe addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setTasksForMe:mTasksForMe];
	}

	NSMutableArray * mMyCreatedTasks = [[NSMutableArray alloc] init];
	NSArray * lMyCreatedTasks = [dict valueForKey:@"MyCreatedTasks"];
	if ([lMyCreatedTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMyCreatedTasks) {
			[mMyCreatedTasks addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setMyCreatedTasks:mMyCreatedTasks];
	}
	[self setAboutTodos:[[dict valueForKey:@"AboutTodos"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTasksForMe = [[NSMutableArray alloc] init];
	for (QXEntry * p in TasksForMe) {
		[mTasksForMe addObject:[p dictionary]];
	}
	[dict setValue:mTasksForMe forKey:@"TasksForMe"];
	

	NSMutableArray * mMyCreatedTasks = [[NSMutableArray alloc] init];
	for (QXEntry * p in MyCreatedTasks) {
		[mMyCreatedTasks addObject:[p dictionary]];
	}
	[dict setValue:mMyCreatedTasks forKey:@"MyCreatedTasks"];
	
	[dict setValue:[NSNumber numberWithBool:self.AboutTodos] forKey:@"AboutTodos"];

	return dict;
}

@end

// --- DraftList ---
@implementation QXDraftList

@synthesize DraftItems;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mDraftItems = [[NSMutableArray alloc] init];
	NSArray * lDraftItems = [dict valueForKey:@"DraftItems"];
	if ([lDraftItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lDraftItems) {
			[mDraftItems addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setDraftItems:mDraftItems];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mDraftItems = [[NSMutableArray alloc] init];
	for (QXEntry * p in DraftItems) {
		[mDraftItems addObject:[p dictionary]];
	}
	[dict setValue:mDraftItems forKey:@"DraftItems"];
	

	return dict;
}

@end

// --- WatchList ---
@implementation QXWatchList

@synthesize Items;
@synthesize WhatWatchList;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mItems = [[NSMutableArray alloc] init];
	NSArray * lItems = [dict valueForKey:@"Items"];
	if ([lItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lItems) {
			[mItems addObject: [[QXWatchItem alloc] initWithDictionary:d]];
		}
		[self setItems:mItems];
	}
	[self setWhatWatchList:[[dict valueForKey:@"WhatWatchList"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mItems = [[NSMutableArray alloc] init];
	for (QXWatchItem * p in Items) {
		[mItems addObject:[p dictionary]];
	}
	[dict setValue:mItems forKey:@"Items"];
	
	[dict setValue:[NSNumber numberWithBool:self.WhatWatchList] forKey:@"WhatWatchList"];

	return dict;
}

@end


// === Interfaces ===



// --- QXGetTotalStatsParams ---
@implementation QXAuthAdminServiceGetTotalStatsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetTotalStatsResults ---
@implementation QXAuthAdminServiceGetTotalStatsResults : NSObject

@synthesize TotalStat;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTotalStat = [dict valueForKey:@"TotalStat"];
	if ([dictTotalStat isKindOfClass:[NSDictionary class]]){
		[self setTotalStat:[[QXTotalStats alloc] initWithDictionary:dictTotalStat]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.TotalStat dictionary] forKey:@"TotalStat"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetWeeklyTotalStatsParams ---
@implementation QXAuthAdminServiceGetWeeklyTotalStatsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetWeeklyTotalStatsResults ---
@implementation QXAuthAdminServiceGetWeeklyTotalStatsResults : NSObject

@synthesize TotalStat;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictTotalStat = [dict valueForKey:@"TotalStat"];
	if ([dictTotalStat isKindOfClass:[NSDictionary class]]){
		[self setTotalStat:[[QXTotalStats alloc] initWithDictionary:dictTotalStat]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.TotalStat dictionary] forKey:@"TotalStat"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgStatsParams ---
@implementation QXAuthAdminServiceGetOrgStatsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOrgStatsResults ---
@implementation QXAuthAdminServiceGetOrgStatsResults : NSObject

@synthesize OrgStats;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgStats = [[NSMutableArray alloc] init];
	NSArray * lOrgStats = [dict valueForKey:@"OrgStats"];
	if ([lOrgStats isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgStats) {
			[mOrgStats addObject: [[QXOrgStats alloc] initWithDictionary:d]];
		}
		[self setOrgStats:mOrgStats];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgStats = [[NSMutableArray alloc] init];
	for (QXOrgStats * p in OrgStats) {
		[mOrgStats addObject:[p dictionary]];
	}
	[dict setValue:mOrgStats forKey:@"OrgStats"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAccessRequestsParams ---
@implementation QXAuthAdminServiceGetAccessRequestsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetAccessRequestsResults ---
@implementation QXAuthAdminServiceGetAccessRequestsResults : NSObject

@synthesize AccessReqs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mAccessReqs = [[NSMutableArray alloc] init];
	NSArray * lAccessReqs = [dict valueForKey:@"AccessReqs"];
	if ([lAccessReqs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAccessReqs) {
			[mAccessReqs addObject: [[QXAccessReq alloc] initWithDictionary:d]];
		}
		[self setAccessReqs:mAccessReqs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mAccessReqs = [[NSMutableArray alloc] init];
	for (QXAccessReq * p in AccessReqs) {
		[mAccessReqs addObject:[p dictionary]];
	}
	[dict setValue:mAccessReqs forKey:@"AccessReqs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXApproveAccessParams ---
@implementation QXAuthAdminServiceApproveAccessParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXApproveAccessResults ---
@implementation QXAuthAdminServiceApproveAccessResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAllMembersParams ---
@implementation QXAuthAdminServiceGetAllMembersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetAllMembersResults ---
@implementation QXAuthAdminServiceGetAllMembersResults : NSObject

@synthesize Members;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mMembers = [[NSMutableArray alloc] init];
	NSArray * lMembers = [dict valueForKey:@"Members"];
	if ([lMembers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMembers) {
			[mMembers addObject: [[QXMember alloc] initWithDictionary:d]];
		}
		[self setMembers:mMembers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mMembers = [[NSMutableArray alloc] init];
	for (QXMember * p in Members) {
		[mMembers addObject:[p dictionary]];
	}
	[dict setValue:mMembers forKey:@"Members"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end


// --- QXSwitchOrganizationParams ---
@implementation QXAuthMemberServiceSwitchOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXSwitchOrganizationResults ---
@implementation QXAuthMemberServiceSwitchOrganizationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAbandonInfoParams ---
@implementation QXAuthMemberServiceGetAbandonInfoParams : NSObject

@synthesize AbandonOrgId;
@synthesize MemberId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAbandonOrgId:[dict valueForKey:@"AbandonOrgId"]];
	[self setMemberId:[dict valueForKey:@"MemberId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.AbandonOrgId forKey:@"AbandonOrgId"];
	[dict setValue:self.MemberId forKey:@"MemberId"];

	return dict;
}

@end

// --- QXGetAbandonInfoResults ---
@implementation QXAuthMemberServiceGetAbandonInfoResults : NSObject

@synthesize Info;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInfo = [dict valueForKey:@"Info"];
	if ([dictInfo isKindOfClass:[NSDictionary class]]){
		[self setInfo:[[QXAbandonInfo alloc] initWithDictionary:dictInfo]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Info dictionary] forKey:@"Info"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetSharingInviationByTokenParams ---
@implementation QXAuthMemberServiceGetSharingInviationByTokenParams : NSObject

@synthesize SharingInviationToken;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSharingInviationToken:[dict valueForKey:@"SharingInviationToken"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.SharingInviationToken forKey:@"SharingInviationToken"];

	return dict;
}

@end

// --- QXGetSharingInviationByTokenResults ---
@implementation QXAuthMemberServiceGetSharingInviationByTokenResults : NSObject

@synthesize Invitation;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInvitation = [dict valueForKey:@"Invitation"];
	if ([dictInvitation isKindOfClass:[NSDictionary class]]){
		[self setInvitation:[[QXSharingInvitation alloc] initWithDictionary:dictInvitation]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Invitation dictionary] forKey:@"Invitation"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRejectSharingBeforeForwardingParams ---
@implementation QXAuthMemberServiceRejectSharingBeforeForwardingParams : NSObject

@synthesize GroupId;
@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRejectSharingBeforeForwardingResults ---
@implementation QXAuthMemberServiceRejectSharingBeforeForwardingResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRespondSharingRequestParams ---
@implementation QXAuthMemberServiceRespondSharingRequestParams : NSObject

@synthesize Token;
@synthesize ToOrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setToOrgId:[dict valueForKey:@"ToOrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.ToOrgId forKey:@"ToOrgId"];

	return dict;
}

@end

// --- QXRespondSharingRequestResults ---
@implementation QXAuthMemberServiceRespondSharingRequestResults : NSObject

@synthesize PrefixURL;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setPrefixURL:[dict valueForKey:@"PrefixURL"]];
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.PrefixURL forKey:@"PrefixURL"];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end


// --- QXGetNewEntryParams ---
@implementation QXAuthUserServiceGetNewEntryParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetNewEntryResults ---
@implementation QXAuthUserServiceGetNewEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetQortexMessagesParams ---
@implementation QXAuthUserServiceGetQortexMessagesParams : NSObject

@synthesize MesssageType;
@synthesize Before;
@synthesize Limit;
@synthesize WithComments;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setMesssageType:[dict valueForKey:@"MesssageType"]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];
	[self setWithComments:[[dict valueForKey:@"WithComments"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.MesssageType forKey:@"MesssageType"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];
	[dict setValue:[NSNumber numberWithBool:self.WithComments] forKey:@"WithComments"];

	return dict;
}

@end

// --- QXGetQortexMessagesResults ---
@implementation QXAuthUserServiceGetQortexMessagesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateBroadcastParams ---
@implementation QXAuthUserServiceCreateBroadcastParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXBroadcastInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateBroadcastResults ---
@implementation QXAuthUserServiceCreateBroadcastResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateBroadcastCommentParams ---
@implementation QXAuthUserServiceCreateBroadcastCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXBroadcastInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateBroadcastCommentResults ---
@implementation QXAuthUserServiceCreateBroadcastCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetSharingRequestEntryParams ---
@implementation QXAuthUserServiceGetSharingRequestEntryParams : NSObject

@synthesize EntryId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];

	return dict;
}

@end

// --- QXGetSharingRequestEntryResults ---
@implementation QXAuthUserServiceGetSharingRequestEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetBroadcastParams ---
@implementation QXAuthUserServiceGetBroadcastParams : NSObject

@synthesize EntryId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];

	return dict;
}

@end

// --- QXGetBroadcastResults ---
@implementation QXAuthUserServiceGetBroadcastResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetBroadcastCommentParams ---
@implementation QXAuthUserServiceGetBroadcastCommentParams : NSObject

@synthesize EntryId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];

	return dict;
}

@end

// --- QXGetBroadcastCommentResults ---
@implementation QXAuthUserServiceGetBroadcastCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateBroadcastParams ---
@implementation QXAuthUserServiceUpdateBroadcastParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXBroadcastInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateBroadcastResults ---
@implementation QXAuthUserServiceUpdateBroadcastResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateBroadcastCommentParams ---
@implementation QXAuthUserServiceUpdateBroadcastCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXBroadcastInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateBroadcastCommentResults ---
@implementation QXAuthUserServiceUpdateBroadcastCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateEntryParams ---
@implementation QXAuthUserServiceCreateEntryParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateEntryResults ---
@implementation QXAuthUserServiceCreateEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateTaskParams ---
@implementation QXAuthUserServiceCreateTaskParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateTaskResults ---
@implementation QXAuthUserServiceCreateTaskResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCloseTaskParams ---
@implementation QXAuthUserServiceCloseTaskParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXCloseTaskResults ---
@implementation QXAuthUserServiceCloseTaskResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXTask alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateCommentParams ---
@implementation QXAuthUserServiceCreateCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateCommentResults ---
@implementation QXAuthUserServiceCreateCommentResults : NSObject

@synthesize Entry;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetCommentParams ---
@implementation QXAuthUserServiceGetCommentParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetCommentResults ---
@implementation QXAuthUserServiceGetCommentResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateCommentParams ---
@implementation QXAuthUserServiceUpdateCommentParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateCommentResults ---
@implementation QXAuthUserServiceUpdateCommentResults : NSObject

@synthesize Entry;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateEntryParams ---
@implementation QXAuthUserServiceUpdateEntryParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXEntryInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateEntryResults ---
@implementation QXAuthUserServiceUpdateEntryResults : NSObject

@synthesize Entry;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetLatestUpdatedEntryIdByTitleParams ---
@implementation QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams : NSObject

@synthesize Title;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTitle:[dict valueForKey:@"Title"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Title forKey:@"Title"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetLatestUpdatedEntryIdByTitleResults ---
@implementation QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults : NSObject

@synthesize EntryId;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetEntryParams ---
@implementation QXAuthUserServiceGetEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize UpdateAtUnixNanoForVersion;
@synthesize HightlightKeywords;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUpdateAtUnixNanoForVersion:[dict valueForKey:@"UpdateAtUnixNanoForVersion"]];
	[self setHightlightKeywords:[dict valueForKey:@"HightlightKeywords"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UpdateAtUnixNanoForVersion forKey:@"UpdateAtUnixNanoForVersion"];
	[dict setValue:self.HightlightKeywords forKey:@"HightlightKeywords"];

	return dict;
}

@end

// --- QXGetEntryResults ---
@implementation QXAuthUserServiceGetEntryResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteEntryParams ---
@implementation QXAuthUserServiceDeleteEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize DType;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setDType:[dict valueForKey:@"DType"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.DType forKey:@"DType"];

	return dict;
}

@end

// --- QXDeleteEntryResults ---
@implementation QXAuthUserServiceDeleteEntryResults : NSObject

@synthesize DelType;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDelType:[dict valueForKey:@"DelType"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.DelType forKey:@"DelType"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXMuteEntryParams ---
@implementation QXAuthUserServiceMuteEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXMuteEntryResults ---
@implementation QXAuthUserServiceMuteEntryResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUndoMuteEntryParams ---
@implementation QXAuthUserServiceUndoMuteEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXUndoMuteEntryResults ---
@implementation QXAuthUserServiceUndoMuteEntryResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetEntryAttachmentsParams ---
@implementation QXAuthUserServiceGetEntryAttachmentsParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetEntryAttachmentsResults ---
@implementation QXAuthUserServiceGetEntryAttachmentsResults : NSObject

@synthesize Attachments;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	NSArray * lAttachments = [dict valueForKey:@"Attachments"];
	if ([lAttachments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lAttachments) {
			[mAttachments addObject: [[QXAttachment alloc] initWithDictionary:d]];
		}
		[self setAttachments:mAttachments];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mAttachments = [[NSMutableArray alloc] init];
	for (QXAttachment * p in Attachments) {
		[mAttachments addObject:[p dictionary]];
	}
	[dict setValue:mAttachments forKey:@"Attachments"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOtherVersionsCommentsParams ---
@implementation QXAuthUserServiceGetOtherVersionsCommentsParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize UpdateAtUnixNanoForVersion;
@synthesize HightlightKeywords;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUpdateAtUnixNanoForVersion:[dict valueForKey:@"UpdateAtUnixNanoForVersion"]];
	[self setHightlightKeywords:[dict valueForKey:@"HightlightKeywords"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UpdateAtUnixNanoForVersion forKey:@"UpdateAtUnixNanoForVersion"];
	[dict setValue:self.HightlightKeywords forKey:@"HightlightKeywords"];

	return dict;
}

@end

// --- QXGetOtherVersionsCommentsResults ---
@implementation QXAuthUserServiceGetOtherVersionsCommentsResults : NSObject

@synthesize Comments;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	NSArray * lComments = [dict valueForKey:@"Comments"];
	if ([lComments isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lComments) {
			[mComments addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setComments:mComments];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mComments = [[NSMutableArray alloc] init];
	for (QXEntry * p in Comments) {
		[mComments addObject:[p dictionary]];
	}
	[dict setValue:mComments forKey:@"Comments"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupEntriesParams ---
@implementation QXAuthUserServiceGetGroupEntriesParams : NSObject

@synthesize GroupId;
@synthesize EntryType;
@synthesize Before;
@synthesize Limit;
@synthesize WithComments;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];
	[self setWithComments:[[dict valueForKey:@"WithComments"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];
	[dict setValue:[NSNumber numberWithBool:self.WithComments] forKey:@"WithComments"];

	return dict;
}

@end

// --- QXGetGroupEntriesResults ---
@implementation QXAuthUserServiceGetGroupEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyFeedEntriesParams ---
@implementation QXAuthUserServiceGetMyFeedEntriesParams : NSObject

@synthesize EntryType;
@synthesize Before;
@synthesize Limit;
@synthesize WithComments;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];
	[self setWithComments:[[dict valueForKey:@"WithComments"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];
	[dict setValue:[NSNumber numberWithBool:self.WithComments] forKey:@"WithComments"];

	return dict;
}

@end

// --- QXGetMyFeedEntriesResults ---
@implementation QXAuthUserServiceGetMyFeedEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetNewFeedEntriesParams ---
@implementation QXAuthUserServiceGetNewFeedEntriesParams : NSObject

@synthesize EntryType;
@synthesize FromTimeUnixNano;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setFromTimeUnixNano:[dict valueForKey:@"FromTimeUnixNano"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.FromTimeUnixNano forKey:@"FromTimeUnixNano"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetNewFeedEntriesResults ---
@implementation QXAuthUserServiceGetNewFeedEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyTaskEntriesParams ---
@implementation QXAuthUserServiceGetMyTaskEntriesParams : NSObject

@synthesize Active;
@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setActive:[[dict valueForKey:@"Active"] boolValue]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Active] forKey:@"Active"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetMyTaskEntriesResults ---
@implementation QXAuthUserServiceGetMyTaskEntriesResults : NSObject

@synthesize TasksForMe;
@synthesize MyCreatedTasks;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mTasksForMe = [[NSMutableArray alloc] init];
	NSArray * lTasksForMe = [dict valueForKey:@"TasksForMe"];
	if ([lTasksForMe isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lTasksForMe) {
			[mTasksForMe addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setTasksForMe:mTasksForMe];
	}

	NSMutableArray * mMyCreatedTasks = [[NSMutableArray alloc] init];
	NSArray * lMyCreatedTasks = [dict valueForKey:@"MyCreatedTasks"];
	if ([lMyCreatedTasks isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lMyCreatedTasks) {
			[mMyCreatedTasks addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setMyCreatedTasks:mMyCreatedTasks];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mTasksForMe = [[NSMutableArray alloc] init];
	for (QXEntry * p in TasksForMe) {
		[mTasksForMe addObject:[p dictionary]];
	}
	[dict setValue:mTasksForMe forKey:@"TasksForMe"];
	

	NSMutableArray * mMyCreatedTasks = [[NSMutableArray alloc] init];
	for (QXEntry * p in MyCreatedTasks) {
		[mMyCreatedTasks addObject:[p dictionary]];
	}
	[dict setValue:mMyCreatedTasks forKey:@"MyCreatedTasks"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetUserEntriesParams ---
@implementation QXAuthUserServiceGetUserEntriesParams : NSObject

@synthesize UserId;
@synthesize EntryType;
@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];
	[self setEntryType:[dict valueForKey:@"EntryType"]];
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];
	[dict setValue:self.EntryType forKey:@"EntryType"];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetUserEntriesResults ---
@implementation QXAuthUserServiceGetUserEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyNotificationItemsParams ---
@implementation QXAuthUserServiceGetMyNotificationItemsParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetMyNotificationItemsResults ---
@implementation QXAuthUserServiceGetMyNotificationItemsResults : NSObject

@synthesize NotificationItems;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	NSArray * lNotificationItems = [dict valueForKey:@"NotificationItems"];
	if ([lNotificationItems isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lNotificationItems) {
			[mNotificationItems addObject: [[QXNotificationItem alloc] initWithDictionary:d]];
		}
		[self setNotificationItems:mNotificationItems];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mNotificationItems = [[NSMutableArray alloc] init];
	for (QXNotificationItem * p in NotificationItems) {
		[mNotificationItems addObject:[p dictionary]];
	}
	[dict setValue:mNotificationItems forKey:@"NotificationItems"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXMarkAllAsReadParams ---
@implementation QXAuthUserServiceMarkAllAsReadParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXMarkAllAsReadResults ---
@implementation QXAuthUserServiceMarkAllAsReadResults : NSObject

@synthesize Mycount;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictMycount = [dict valueForKey:@"Mycount"];
	if ([dictMycount isKindOfClass:[NSDictionary class]]){
		[self setMycount:[[QXMyCount alloc] initWithDictionary:dictMycount]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Mycount dictionary] forKey:@"Mycount"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetWatchListParams ---
@implementation QXAuthUserServiceGetWatchListParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[QXQortexapi dateFromString:[dict valueForKey:@"Before"]]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[QXQortexapi stringFromDate:self.Before] forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetWatchListResults ---
@implementation QXAuthUserServiceGetWatchListResults : NSObject

@synthesize Watchlist;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictWatchlist = [dict valueForKey:@"Watchlist"];
	if ([dictWatchlist isKindOfClass:[NSDictionary class]]){
		[self setWatchlist:[[QXWatchList alloc] initWithDictionary:dictWatchlist]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Watchlist dictionary] forKey:@"Watchlist"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAddToWatchListParams ---
@implementation QXAuthUserServiceAddToWatchListParams : NSObject

@synthesize EntryId;
@synthesize GroupId;
@synthesize RemindMode;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setRemindMode:[dict valueForKey:@"RemindMode"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.RemindMode forKey:@"RemindMode"];

	return dict;
}

@end

// --- QXAddToWatchListResults ---
@implementation QXAuthUserServiceAddToWatchListResults : NSObject

@synthesize Added;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setAdded:[[dict valueForKey:@"Added"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Added] forKey:@"Added"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStopWatchingParams ---
@implementation QXAuthUserServiceStopWatchingParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXStopWatchingResults ---
@implementation QXAuthUserServiceStopWatchingResults : NSObject

@synthesize Stopped;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStopped:[[dict valueForKey:@"Stopped"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Stopped] forKey:@"Stopped"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXReadWatchingParams ---
@implementation QXAuthUserServiceReadWatchingParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXReadWatchingResults ---
@implementation QXAuthUserServiceReadWatchingResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRemindMeParams ---
@implementation QXAuthUserServiceRemindMeParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXRemindMeResults ---
@implementation QXAuthUserServiceRemindMeResults : NSObject

@synthesize Reminded;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setReminded:[[dict valueForKey:@"Reminded"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Reminded] forKey:@"Reminded"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStartSmartRemindingParams ---
@implementation QXAuthUserServiceStartSmartRemindingParams : NSObject

@synthesize GroupId;
@synthesize WatchItemId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setWatchItemId:[dict valueForKey:@"WatchItemId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.WatchItemId forKey:@"WatchItemId"];

	return dict;
}

@end

// --- QXStartSmartRemindingResults ---
@implementation QXAuthUserServiceStartSmartRemindingResults : NSObject

@synthesize Stopped;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStopped:[[dict valueForKey:@"Stopped"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Stopped] forKey:@"Stopped"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStopRemindingParams ---
@implementation QXAuthUserServiceStopRemindingParams : NSObject

@synthesize GroupId;
@synthesize WatchItemId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setWatchItemId:[dict valueForKey:@"WatchItemId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.WatchItemId forKey:@"WatchItemId"];

	return dict;
}

@end

// --- QXStopRemindingResults ---
@implementation QXAuthUserServiceStopRemindingResults : NSObject

@synthesize Stopped;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setStopped:[[dict valueForKey:@"Stopped"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Stopped] forKey:@"Stopped"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateLikeParams ---
@implementation QXAuthUserServiceUpdateLikeParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXLikeInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateLikeResults ---
@implementation QXAuthUserServiceUpdateLikeResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetDraftListParams ---
@implementation QXAuthUserServiceGetDraftListParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[QXQortexapi dateFromString:[dict valueForKey:@"Before"]]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[QXQortexapi stringFromDate:self.Before] forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetDraftListResults ---
@implementation QXAuthUserServiceGetDraftListResults : NSObject

@synthesize Draftlist;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictDraftlist = [dict valueForKey:@"Draftlist"];
	if ([dictDraftlist isKindOfClass:[NSDictionary class]]){
		[self setDraftlist:[[QXDraftList alloc] initWithDictionary:dictDraftlist]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Draftlist dictionary] forKey:@"Draftlist"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetDraftParams ---
@implementation QXAuthUserServiceGetDraftParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetDraftResults ---
@implementation QXAuthUserServiceGetDraftResults : NSObject

@synthesize Entry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictEntry = [dict valueForKey:@"Entry"];
	if ([dictEntry isKindOfClass:[NSDictionary class]]){
		[self setEntry:[[QXEntry alloc] initWithDictionary:dictEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Entry dictionary] forKey:@"Entry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteDraftParams ---
@implementation QXAuthUserServiceDeleteDraftParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXDeleteDraftResults ---
@implementation QXAuthUserServiceDeleteDraftResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetNewGroupParams ---
@implementation QXAuthUserServiceGetNewGroupParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetNewGroupResults ---
@implementation QXAuthUserServiceGetNewGroupResults : NSObject

@synthesize Group;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupParams ---
@implementation QXAuthUserServiceGetGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetGroupResults ---
@implementation QXAuthUserServiceGetGroupResults : NSObject

@synthesize Group;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateGroupParams ---
@implementation QXAuthUserServiceCreateGroupParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXGroupInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateGroupResults ---
@implementation QXAuthUserServiceCreateGroupResults : NSObject

@synthesize Group;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateGroupParams ---
@implementation QXAuthUserServiceUpdateGroupParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXGroupInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateGroupResults ---
@implementation QXAuthUserServiceUpdateGroupResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateGroupLogoParams ---
@implementation QXAuthUserServiceUpdateGroupLogoParams : NSObject

@synthesize GroupId;
@synthesize LogoURL;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setLogoURL:[dict valueForKey:@"LogoURL"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.LogoURL forKey:@"LogoURL"];

	return dict;
}

@end

// --- QXUpdateGroupLogoResults ---
@implementation QXAuthUserServiceUpdateGroupLogoResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteGroupParams ---
@implementation QXAuthUserServiceDeleteGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXDeleteGroupResults ---
@implementation QXAuthUserServiceDeleteGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupBySlugParams ---
@implementation QXAuthUserServiceGetGroupBySlugParams : NSObject

@synthesize Slug;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSlug:[dict valueForKey:@"Slug"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Slug forKey:@"Slug"];

	return dict;
}

@end

// --- QXGetGroupBySlugResults ---
@implementation QXAuthUserServiceGetGroupBySlugResults : NSObject

@synthesize Group;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictGroup = [dict valueForKey:@"Group"];
	if ([dictGroup isKindOfClass:[NSDictionary class]]){
		[self setGroup:[[QXGroup alloc] initWithDictionary:dictGroup]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Group dictionary] forKey:@"Group"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupsParams ---
@implementation QXAuthUserServiceGetGroupsParams : NSObject

@synthesize Keyword;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];

	return dict;
}

@end

// --- QXGetGroupsResults ---
@implementation QXAuthUserServiceGetGroupsResults : NSObject

@synthesize Groups;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	NSArray * lGroups = [dict valueForKey:@"Groups"];
	if ([lGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroups) {
			[mGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setGroups:mGroups];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in Groups) {
		[mGroups addObject:[p dictionary]];
	}
	[dict setValue:mGroups forKey:@"Groups"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetPublicGroupsParams ---
@implementation QXAuthUserServiceGetPublicGroupsParams : NSObject

@synthesize Keyword;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];

	return dict;
}

@end

// --- QXGetPublicGroupsResults ---
@implementation QXAuthUserServiceGetPublicGroupsResults : NSObject

@synthesize Groups;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	NSArray * lGroups = [dict valueForKey:@"Groups"];
	if ([lGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroups) {
			[mGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setGroups:mGroups];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in Groups) {
		[mGroups addObject:[p dictionary]];
	}
	[dict setValue:mGroups forKey:@"Groups"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAddUserToGroupParams ---
@implementation QXAuthUserServiceAddUserToGroupParams : NSObject

@synthesize GroupId;
@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXAddUserToGroupResults ---
@implementation QXAuthUserServiceAddUserToGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRemoveUserFromGroupParams ---
@implementation QXAuthUserServiceRemoveUserFromGroupParams : NSObject

@synthesize GroupId;
@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXRemoveUserFromGroupResults ---
@implementation QXAuthUserServiceRemoveUserFromGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupHeaderParams ---
@implementation QXAuthUserServiceGetGroupHeaderParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetGroupHeaderResults ---
@implementation QXAuthUserServiceGetGroupHeaderResults : NSObject

@synthesize Header;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictHeader = [dict valueForKey:@"Header"];
	if ([dictHeader isKindOfClass:[NSDictionary class]]){
		[self setHeader:[[QXGroupHeader alloc] initWithDictionary:dictHeader]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Header dictionary] forKey:@"Header"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetClassifiedGroupsParams ---
@implementation QXAuthUserServiceGetClassifiedGroupsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetClassifiedGroupsResults ---
@implementation QXAuthUserServiceGetClassifiedGroupsResults : NSObject

@synthesize AnouncementGroup;
@synthesize FollowedNormalGroups;
@synthesize FollowedSharedGroups;
@synthesize UnFollowedNormalGroups;
@synthesize UnFollowedSharedGroups;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictAnouncementGroup = [dict valueForKey:@"AnouncementGroup"];
	if ([dictAnouncementGroup isKindOfClass:[NSDictionary class]]){
		[self setAnouncementGroup:[[QXGroup alloc] initWithDictionary:dictAnouncementGroup]];
	}

	NSMutableArray * mFollowedNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowedNormalGroups = [dict valueForKey:@"FollowedNormalGroups"];
	if ([lFollowedNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowedNormalGroups) {
			[mFollowedNormalGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowedNormalGroups:mFollowedNormalGroups];
	}

	NSMutableArray * mFollowedSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lFollowedSharedGroups = [dict valueForKey:@"FollowedSharedGroups"];
	if ([lFollowedSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowedSharedGroups) {
			[mFollowedSharedGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setFollowedSharedGroups:mFollowedSharedGroups];
	}

	NSMutableArray * mUnFollowedNormalGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowedNormalGroups = [dict valueForKey:@"UnFollowedNormalGroups"];
	if ([lUnFollowedNormalGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowedNormalGroups) {
			[mUnFollowedNormalGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setUnFollowedNormalGroups:mUnFollowedNormalGroups];
	}

	NSMutableArray * mUnFollowedSharedGroups = [[NSMutableArray alloc] init];
	NSArray * lUnFollowedSharedGroups = [dict valueForKey:@"UnFollowedSharedGroups"];
	if ([lUnFollowedSharedGroups isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUnFollowedSharedGroups) {
			[mUnFollowedSharedGroups addObject: [[QXGroup alloc] initWithDictionary:d]];
		}
		[self setUnFollowedSharedGroups:mUnFollowedSharedGroups];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.AnouncementGroup dictionary] forKey:@"AnouncementGroup"];
	

	NSMutableArray * mFollowedNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowedNormalGroups) {
		[mFollowedNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowedNormalGroups forKey:@"FollowedNormalGroups"];
	

	NSMutableArray * mFollowedSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in FollowedSharedGroups) {
		[mFollowedSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mFollowedSharedGroups forKey:@"FollowedSharedGroups"];
	

	NSMutableArray * mUnFollowedNormalGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in UnFollowedNormalGroups) {
		[mUnFollowedNormalGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowedNormalGroups forKey:@"UnFollowedNormalGroups"];
	

	NSMutableArray * mUnFollowedSharedGroups = [[NSMutableArray alloc] init];
	for (QXGroup * p in UnFollowedSharedGroups) {
		[mUnFollowedSharedGroups addObject:[p dictionary]];
	}
	[dict setValue:mUnFollowedSharedGroups forKey:@"UnFollowedSharedGroups"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAuthUserParams ---
@implementation QXAuthUserServiceGetAuthUserParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetAuthUserResults ---
@implementation QXAuthUserServiceGetAuthUserResults : NSObject

@synthesize User;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictUser = [dict valueForKey:@"User"];
	if ([dictUser isKindOfClass:[NSDictionary class]]){
		[self setUser:[[QXUser alloc] initWithDictionary:dictUser]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.User dictionary] forKey:@"User"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgUsersParams ---
@implementation QXAuthUserServiceGetOrgUsersParams : NSObject

@synthesize Keyword;
@synthesize StartFullName;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];
	[self setStartFullName:[dict valueForKey:@"StartFullName"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];
	[dict setValue:self.StartFullName forKey:@"StartFullName"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetOrgUsersResults ---
@implementation QXAuthUserServiceGetOrgUsersResults : NSObject

@synthesize Users;
@synthesize NextFullName;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[QXUser alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setNextFullName:[dict valueForKey:@"NextFullName"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (QXUser * p in Users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.NextFullName forKey:@"NextFullName"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetGroupUsersParams ---
@implementation QXAuthUserServiceGetGroupUsersParams : NSObject

@synthesize GroupId;
@synthesize Keyword;
@synthesize OnlyFollowers;
@synthesize StartFullName;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setKeyword:[dict valueForKey:@"Keyword"]];
	[self setOnlyFollowers:[[dict valueForKey:@"OnlyFollowers"] boolValue]];
	[self setStartFullName:[dict valueForKey:@"StartFullName"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Keyword forKey:@"Keyword"];
	[dict setValue:[NSNumber numberWithBool:self.OnlyFollowers] forKey:@"OnlyFollowers"];
	[dict setValue:self.StartFullName forKey:@"StartFullName"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetGroupUsersResults ---
@implementation QXAuthUserServiceGetGroupUsersResults : NSObject

@synthesize Users;
@synthesize NextFullName;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[QXUser alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setNextFullName:[dict valueForKey:@"NextFullName"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (QXUser * p in Users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.NextFullName forKey:@"NextFullName"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetUserParams ---
@implementation QXAuthUserServiceGetUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXGetUserResults ---
@implementation QXAuthUserServiceGetUserResults : NSObject

@synthesize User;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictUser = [dict valueForKey:@"User"];
	if ([dictUser isKindOfClass:[NSDictionary class]]){
		[self setUser:[[QXUser alloc] initWithDictionary:dictUser]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.User dictionary] forKey:@"User"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXEnableUserParams ---
@implementation QXAuthUserServiceEnableUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXEnableUserResults ---
@implementation QXAuthUserServiceEnableUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDisableUserParams ---
@implementation QXAuthUserServiceDisableUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXDisableUserResults ---
@implementation QXAuthUserServiceDisableUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDeleteUserParams ---
@implementation QXAuthUserServiceDeleteUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXDeleteUserResults ---
@implementation QXAuthUserServiceDeleteUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXPromoteToSuperUserParams ---
@implementation QXAuthUserServicePromoteToSuperUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXPromoteToSuperUserResults ---
@implementation QXAuthUserServicePromoteToSuperUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXDemoteFromSuperUserParams ---
@implementation QXAuthUserServiceDemoteFromSuperUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXDemoteFromSuperUserResults ---
@implementation QXAuthUserServiceDemoteFromSuperUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXFollowUserParams ---
@implementation QXAuthUserServiceFollowUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXFollowUserResults ---
@implementation QXAuthUserServiceFollowUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUnfollowUserParams ---
@implementation QXAuthUserServiceUnfollowUserParams : NSObject

@synthesize UserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setUserId:[dict valueForKey:@"UserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.UserId forKey:@"UserId"];

	return dict;
}

@end

// --- QXUnfollowUserResults ---
@implementation QXAuthUserServiceUnfollowUserResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyFollowingUsersParams ---
@implementation QXAuthUserServiceGetMyFollowingUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMyFollowingUsersResults ---
@implementation QXAuthUserServiceGetMyFollowingUsersResults : NSObject

@synthesize FollowingUsers;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mFollowingUsers = [[NSMutableArray alloc] init];
	NSArray * lFollowingUsers = [dict valueForKey:@"FollowingUsers"];
	if ([lFollowingUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lFollowingUsers) {
			[mFollowingUsers addObject: [[QXUser alloc] initWithDictionary:d]];
		}
		[self setFollowingUsers:mFollowingUsers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mFollowingUsers = [[NSMutableArray alloc] init];
	for (QXUser * p in FollowingUsers) {
		[mFollowingUsers addObject:[p dictionary]];
	}
	[dict setValue:mFollowingUsers forKey:@"FollowingUsers"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetPanelStatusParams ---
@implementation QXAuthUserServiceGetPanelStatusParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetPanelStatusResults ---
@implementation QXAuthUserServiceGetPanelStatusResults : NSObject

@synthesize PanelStatus;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPanelStatus = [dict valueForKey:@"PanelStatus"];
	if ([dictPanelStatus isKindOfClass:[NSDictionary class]]){
		[self setPanelStatus:[[QXPanelStatus alloc] initWithDictionary:dictPanelStatus]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.PanelStatus dictionary] forKey:@"PanelStatus"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetUserPreferencesParams ---
@implementation QXAuthUserServiceGetUserPreferencesParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetUserPreferencesResults ---
@implementation QXAuthUserServiceGetUserPreferencesResults : NSObject

@synthesize Preferences;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPreferences = [dict valueForKey:@"Preferences"];
	if ([dictPreferences isKindOfClass:[NSDictionary class]]){
		[self setPreferences:[[QXPreferences alloc] initWithDictionary:dictPreferences]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Preferences dictionary] forKey:@"Preferences"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateUserPreferencesParams ---
@implementation QXAuthUserServiceUpdateUserPreferencesParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXPreferencesInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateUserPreferencesResults ---
@implementation QXAuthUserServiceUpdateUserPreferencesResults : NSObject

@synthesize Preferences;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictPreferences = [dict valueForKey:@"Preferences"];
	if ([dictPreferences isKindOfClass:[NSDictionary class]]){
		[self setPreferences:[[QXPreferences alloc] initWithDictionary:dictPreferences]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Preferences dictionary] forKey:@"Preferences"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgEmbedUsersParams ---
@implementation QXAuthUserServiceGetOrgEmbedUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOrgEmbedUsersResults ---
@implementation QXAuthUserServiceGetOrgEmbedUsersResults : NSObject

@synthesize Users;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	NSArray * lUsers = [dict valueForKey:@"Users"];
	if ([lUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lUsers) {
			[mUsers addObject: [[QXEmbedUser alloc] initWithDictionary:d]];
		}
		[self setUsers:mUsers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mUsers = [[NSMutableArray alloc] init];
	for (QXEmbedUser * p in Users) {
		[mUsers addObject:[p dictionary]];
	}
	[dict setValue:mUsers forKey:@"Users"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetNonStandardGroupEmbedUsersParams ---
@implementation QXAuthUserServiceGetNonStandardGroupEmbedUsersParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetNonStandardGroupEmbedUsersResults ---
@implementation QXAuthUserServiceGetNonStandardGroupEmbedUsersResults : NSObject

@synthesize GroupUsers;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mGroupUsers = [[NSMutableArray alloc] init];
	NSArray * lGroupUsers = [dict valueForKey:@"GroupUsers"];
	if ([lGroupUsers isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lGroupUsers) {
			[mGroupUsers addObject: [[QXGroupUsers alloc] initWithDictionary:d]];
		}
		[self setGroupUsers:mGroupUsers];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mGroupUsers = [[NSMutableArray alloc] init];
	for (QXGroupUsers * p in GroupUsers) {
		[mGroupUsers addObject:[p dictionary]];
	}
	[dict setValue:mGroupUsers forKey:@"GroupUsers"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateUserProfileParams ---
@implementation QXAuthUserServiceUpdateUserProfileParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXUserProfileInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateUserProfileResults ---
@implementation QXAuthUserServiceUpdateUserProfileResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyCountParams ---
@implementation QXAuthUserServiceGetMyCountParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetMyCountResults ---
@implementation QXAuthUserServiceGetMyCountResults : NSObject

@synthesize MyCount;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictMyCount = [dict valueForKey:@"MyCount"];
	if ([dictMyCount isKindOfClass:[NSDictionary class]]){
		[self setMyCount:[[QXMyCount alloc] initWithDictionary:dictMyCount]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.MyCount dictionary] forKey:@"MyCount"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXReadEntryParams ---
@implementation QXAuthUserServiceReadEntryParams : NSObject

@synthesize EntryId;
@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXReadEntryResults ---
@implementation QXAuthUserServiceReadEntryResults : NSObject

@synthesize MyCount;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictMyCount = [dict valueForKey:@"MyCount"];
	if ([dictMyCount isKindOfClass:[NSDictionary class]]){
		[self setMyCount:[[QXMyCount alloc] initWithDictionary:dictMyCount]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.MyCount dictionary] forKey:@"MyCount"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetJoinOrgInvitationsParams ---
@implementation QXAuthUserServiceGetJoinOrgInvitationsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetJoinOrgInvitationsResults ---
@implementation QXAuthUserServiceGetJoinOrgInvitationsResults : NSObject

@synthesize Invitations;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mInvitations = [[NSMutableArray alloc] init];
	NSArray * lInvitations = [dict valueForKey:@"Invitations"];
	if ([lInvitations isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lInvitations) {
			[mInvitations addObject: [[QXInvitation alloc] initWithDictionary:d]];
		}
		[self setInvitations:mInvitations];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mInvitations = [[NSMutableArray alloc] init];
	for (QXInvitation * p in Invitations) {
		[mInvitations addObject:[p dictionary]];
	}
	[dict setValue:mInvitations forKey:@"Invitations"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrganizationParams ---
@implementation QXAuthUserServiceGetOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXGetOrganizationResults ---
@implementation QXAuthUserServiceGetOrganizationResults : NSObject

@synthesize Org;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrg = [dict valueForKey:@"Org"];
	if ([dictOrg isKindOfClass:[NSDictionary class]]){
		[self setOrg:[[QXOrganization alloc] initWithDictionary:dictOrg]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Org dictionary] forKey:@"Org"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrganizationsParams ---
@implementation QXAuthUserServiceGetOrganizationsParams : NSObject

@synthesize OrgIds;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgIds:[dict valueForKey:@"OrgIds"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgIds forKey:@"OrgIds"];

	return dict;
}

@end

// --- QXGetOrganizationsResults ---
@implementation QXAuthUserServiceGetOrganizationsResults : NSObject

@synthesize Orgs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	NSArray * lOrgs = [dict valueForKey:@"Orgs"];
	if ([lOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgs) {
			[mOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setOrgs:mOrgs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in Orgs) {
		[mOrgs addObject:[p dictionary]];
	}
	[dict setValue:mOrgs forKey:@"Orgs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSearchOrganizationsParams ---
@implementation QXAuthUserServiceSearchOrganizationsParams : NSObject

@synthesize Keyword;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setKeyword:[dict valueForKey:@"Keyword"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Keyword forKey:@"Keyword"];

	return dict;
}

@end

// --- QXSearchOrganizationsResults ---
@implementation QXAuthUserServiceSearchOrganizationsResults : NSObject

@synthesize Orgs;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	NSArray * lOrgs = [dict valueForKey:@"Orgs"];
	if ([lOrgs isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lOrgs) {
			[mOrgs addObject: [[QXOrganization alloc] initWithDictionary:d]];
		}
		[self setOrgs:mOrgs];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mOrgs = [[NSMutableArray alloc] init];
	for (QXOrganization * p in Orgs) {
		[mOrgs addObject:[p dictionary]];
	}
	[dict setValue:mOrgs forKey:@"Orgs"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateOrganizationParams ---
@implementation QXAuthUserServiceUpdateOrganizationParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXOrganizationInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateOrganizationResults ---
@implementation QXAuthUserServiceUpdateOrganizationResults : NSObject

@synthesize Org;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrg = [dict valueForKey:@"Org"];
	if ([dictOrg isKindOfClass:[NSDictionary class]]){
		[self setOrg:[[QXOrganization alloc] initWithDictionary:dictOrg]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Org dictionary] forKey:@"Org"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSwitchOrganizationParams ---
@implementation QXAuthUserServiceSwitchOrganizationParams : NSObject

@synthesize OrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];

	return dict;
}

@end

// --- QXSwitchOrganizationResults ---
@implementation QXAuthUserServiceSwitchOrganizationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXAcceptSharedGroupRequestParams ---
@implementation QXAuthUserServiceAcceptSharedGroupRequestParams : NSObject

@synthesize FromOrgId;
@synthesize SharedOrgId;
@synthesize SharedGroupId;
@synthesize FromUserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFromOrgId:[dict valueForKey:@"FromOrgId"]];
	[self setSharedOrgId:[dict valueForKey:@"SharedOrgId"]];
	[self setSharedGroupId:[dict valueForKey:@"SharedGroupId"]];
	[self setFromUserId:[dict valueForKey:@"FromUserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FromOrgId forKey:@"FromOrgId"];
	[dict setValue:self.SharedOrgId forKey:@"SharedOrgId"];
	[dict setValue:self.SharedGroupId forKey:@"SharedGroupId"];
	[dict setValue:self.FromUserId forKey:@"FromUserId"];

	return dict;
}

@end

// --- QXAcceptSharedGroupRequestResults ---
@implementation QXAuthUserServiceAcceptSharedGroupRequestResults : NSObject

@synthesize Req;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictReq = [dict valueForKey:@"Req"];
	if ([dictReq isKindOfClass:[NSDictionary class]]){
		[self setReq:[[QXRequest alloc] initWithDictionary:dictReq]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Req dictionary] forKey:@"Req"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRejectSharedGroupRequestParams ---
@implementation QXAuthUserServiceRejectSharedGroupRequestParams : NSObject

@synthesize FromOrgId;
@synthesize SharedOrgId;
@synthesize SharedGroupId;
@synthesize FromUserId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setFromOrgId:[dict valueForKey:@"FromOrgId"]];
	[self setSharedOrgId:[dict valueForKey:@"SharedOrgId"]];
	[self setSharedGroupId:[dict valueForKey:@"SharedGroupId"]];
	[self setFromUserId:[dict valueForKey:@"FromUserId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.FromOrgId forKey:@"FromOrgId"];
	[dict setValue:self.SharedOrgId forKey:@"SharedOrgId"];
	[dict setValue:self.SharedGroupId forKey:@"SharedGroupId"];
	[dict setValue:self.FromUserId forKey:@"FromUserId"];

	return dict;
}

@end

// --- QXRejectSharedGroupRequestResults ---
@implementation QXAuthUserServiceRejectSharedGroupRequestResults : NSObject

@synthesize Req;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictReq = [dict valueForKey:@"Req"];
	if ([dictReq isKindOfClass:[NSDictionary class]]){
		[self setReq:[[QXRequest alloc] initWithDictionary:dictReq]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Req dictionary] forKey:@"Req"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetOrgSettingsParams ---
@implementation QXAuthUserServiceGetOrgSettingsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXGetOrgSettingsResults ---
@implementation QXAuthUserServiceGetOrgSettingsResults : NSObject

@synthesize OrgSetting;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrgSetting = [dict valueForKey:@"OrgSetting"];
	if ([dictOrgSetting isKindOfClass:[NSDictionary class]]){
		[self setOrgSetting:[[QXOrgSettings alloc] initWithDictionary:dictOrgSetting]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.OrgSetting dictionary] forKey:@"OrgSetting"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateOrgSettingsParams ---
@implementation QXAuthUserServiceUpdateOrgSettingsParams : NSObject

@synthesize OrgSettingInput;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictOrgSettingInput = [dict valueForKey:@"OrgSettingInput"];
	if ([dictOrgSettingInput isKindOfClass:[NSDictionary class]]){
		[self setOrgSettingInput:[[QXOrgSettingsInput alloc] initWithDictionary:dictOrgSettingInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.OrgSettingInput dictionary] forKey:@"OrgSettingInput"];
	

	return dict;
}

@end

// --- QXUpdateOrgSettingsResults ---
@implementation QXAuthUserServiceUpdateOrgSettingsResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCanCreateGroupParams ---
@implementation QXAuthUserServiceCanCreateGroupParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXCanCreateGroupResults ---
@implementation QXAuthUserServiceCanCreateGroupResults : NSObject

@synthesize Ok;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOk:[[dict valueForKey:@"Ok"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Ok] forKey:@"Ok"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCanInvitePeopleParams ---
@implementation QXAuthUserServiceCanInvitePeopleParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- QXCanInvitePeopleResults ---
@implementation QXAuthUserServiceCanInvitePeopleResults : NSObject

@synthesize Ok;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOk:[[dict valueForKey:@"Ok"] boolValue]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[NSNumber numberWithBool:self.Ok] forKey:@"Ok"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXInvitePeopleParams ---
@implementation QXAuthUserServiceInvitePeopleParams : NSObject

@synthesize Emails;
@synthesize SkipInvalidEmail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmails:[dict valueForKey:@"Emails"]];
	[self setSkipInvalidEmail:[[dict valueForKey:@"SkipInvalidEmail"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Emails forKey:@"Emails"];
	[dict setValue:[NSNumber numberWithBool:self.SkipInvalidEmail] forKey:@"SkipInvalidEmail"];

	return dict;
}

@end

// --- QXInvitePeopleResults ---
@implementation QXAuthUserServiceInvitePeopleResults : NSObject

@synthesize SendedEmails;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSendedEmails:[dict valueForKey:@"SendedEmails"]];
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.SendedEmails forKey:@"SendedEmails"];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCancelInvitationParams ---
@implementation QXAuthUserServiceCancelInvitationParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXCancelInvitationResults ---
@implementation QXAuthUserServiceCancelInvitationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXResendInvitationParams ---
@implementation QXAuthUserServiceResendInvitationParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXResendInvitationResults ---
@implementation QXAuthUserServiceResendInvitationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateMailUpdatesParams ---
@implementation QXAuthUserServiceUpdateMailUpdatesParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXMailUpdatesInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateMailUpdatesResults ---
@implementation QXAuthUserServiceUpdateMailUpdatesResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXPrepareChangingEmailParams ---
@implementation QXAuthUserServicePrepareChangingEmailParams : NSObject

@synthesize NewEmail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setNewEmail:[dict valueForKey:@"NewEmail"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.NewEmail forKey:@"NewEmail"];

	return dict;
}

@end

// --- QXPrepareChangingEmailResults ---
@implementation QXAuthUserServicePrepareChangingEmailResults : NSObject

@synthesize Changer;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictChanger = [dict valueForKey:@"Changer"];
	if ([dictChanger isKindOfClass:[NSDictionary class]]){
		[self setChanger:[[QXEmailChanger alloc] initWithDictionary:dictChanger]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Changer dictionary] forKey:@"Changer"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXConfirmChangingEmailParams ---
@implementation QXAuthUserServiceConfirmChangingEmailParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXConfirmChangingEmailResults ---
@implementation QXAuthUserServiceConfirmChangingEmailResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXUpdateAccountParams ---
@implementation QXAuthUserServiceUpdateAccountParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXMemberAccountInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXUpdateAccountResults ---
@implementation QXAuthUserServiceUpdateAccountResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXSendSharingInvitationParams ---
@implementation QXAuthUserServiceSendSharingInvitationParams : NSObject

@synthesize GroupId;
@synthesize Email;
@synthesize IsResend;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setIsResend:[[dict valueForKey:@"IsResend"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:[NSNumber numberWithBool:self.IsResend] forKey:@"IsResend"];

	return dict;
}

@end

// --- QXSendSharingInvitationResults ---
@implementation QXAuthUserServiceSendSharingInvitationResults : NSObject

@synthesize Si;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictSi = [dict valueForKey:@"Si"];
	if ([dictSi isKindOfClass:[NSDictionary class]]){
		[self setSi:[[QXSharingInvitation alloc] initWithDictionary:dictSi]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Si dictionary] forKey:@"Si"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetSharingInvitationsParams ---
@implementation QXAuthUserServiceGetSharingInvitationsParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXGetSharingInvitationsResults ---
@implementation QXAuthUserServiceGetSharingInvitationsResults : NSObject

@synthesize Sis;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mSis = [[NSMutableArray alloc] init];
	NSArray * lSis = [dict valueForKey:@"Sis"];
	if ([lSis isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lSis) {
			[mSis addObject: [[QXSharingInvitation alloc] initWithDictionary:d]];
		}
		[self setSis:mSis];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mSis = [[NSMutableArray alloc] init];
	for (QXSharingInvitation * p in Sis) {
		[mSis addObject:[p dictionary]];
	}
	[dict setValue:mSis forKey:@"Sis"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCancelSharingInvitationParams ---
@implementation QXAuthUserServiceCancelSharingInvitationParams : NSObject

@synthesize GroupId;
@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXCancelSharingInvitationResults ---
@implementation QXAuthUserServiceCancelSharingInvitationResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXStopSharedGroupParams ---
@implementation QXAuthUserServiceStopSharedGroupParams : NSObject

@synthesize GroupId;
@synthesize ToStopOrgId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];
	[self setToStopOrgId:[dict valueForKey:@"ToStopOrgId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];
	[dict setValue:self.ToStopOrgId forKey:@"ToStopOrgId"];

	return dict;
}

@end

// --- QXStopSharedGroupResults ---
@implementation QXAuthUserServiceStopSharedGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXLeaveSharedGroupParams ---
@implementation QXAuthUserServiceLeaveSharedGroupParams : NSObject

@synthesize GroupId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setGroupId:[dict valueForKey:@"GroupId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.GroupId forKey:@"GroupId"];

	return dict;
}

@end

// --- QXLeaveSharedGroupResults ---
@implementation QXAuthUserServiceLeaveSharedGroupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetMyChatEntriesParams ---
@implementation QXAuthUserServiceGetMyChatEntriesParams : NSObject

@synthesize Before;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setBefore:[dict valueForKey:@"Before"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Before forKey:@"Before"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetMyChatEntriesResults ---
@implementation QXAuthUserServiceGetMyChatEntriesResults : NSObject

@synthesize Entries;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	NSArray * lEntries = [dict valueForKey:@"Entries"];
	if ([lEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lEntries) {
			[mEntries addObject: [[QXEntry alloc] initWithDictionary:d]];
		}
		[self setEntries:mEntries];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mEntries = [[NSMutableArray alloc] init];
	for (QXEntry * p in Entries) {
		[mEntries addObject:[p dictionary]];
	}
	[dict setValue:mEntries forKey:@"Entries"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXShareChatParams ---
@implementation QXAuthUserServiceShareChatParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXShareChatInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXShareChatResults ---
@implementation QXAuthUserServiceShareChatResults : NSObject

@synthesize ChatEntry;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictChatEntry = [dict valueForKey:@"ChatEntry"];
	if ([dictChatEntry isKindOfClass:[NSDictionary class]]){
		[self setChatEntry:[[QXEntry alloc] initWithDictionary:dictChatEntry]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ChatEntry dictionary] forKey:@"ChatEntry"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetPrivateChatParams ---
@implementation QXAuthUserServiceGetPrivateChatParams : NSObject

@synthesize EntryId;
@synthesize SearchKeyWords;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEntryId:[dict valueForKey:@"EntryId"]];
	[self setSearchKeyWords:[dict valueForKey:@"SearchKeyWords"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.EntryId forKey:@"EntryId"];
	[dict setValue:self.SearchKeyWords forKey:@"SearchKeyWords"];

	return dict;
}

@end

// --- QXGetPrivateChatResults ---
@implementation QXAuthUserServiceGetPrivateChatResults : NSObject

@synthesize ChatEntry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictChatEntry = [dict valueForKey:@"ChatEntry"];
	if ([dictChatEntry isKindOfClass:[NSDictionary class]]){
		[self setChatEntry:[[QXEntry alloc] initWithDictionary:dictChatEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ChatEntry dictionary] forKey:@"ChatEntry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end


// --- QXGetSessionParams ---
@implementation QXPublicServiceGetSessionParams : NSObject

@synthesize Email;
@synthesize Password;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPassword:[dict valueForKey:@"Password"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Password forKey:@"Password"];

	return dict;
}

@end

// --- QXGetSessionResults ---
@implementation QXPublicServiceGetSessionResults : NSObject

@synthesize Session;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetAuthorizedAdminParams ---
@implementation QXPublicServiceGetAuthorizedAdminParams : NSObject

@synthesize Session;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];

	return dict;
}

@end

// --- QXGetAuthorizedAdminResults ---
@implementation QXPublicServiceGetAuthorizedAdminResults : NSObject

@synthesize ApiEmbedUser;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictApiEmbedUser = [dict valueForKey:@"ApiEmbedUser"];
	if ([dictApiEmbedUser isKindOfClass:[NSDictionary class]]){
		[self setApiEmbedUser:[[QXEmbedUser alloc] initWithDictionary:dictApiEmbedUser]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.ApiEmbedUser dictionary] forKey:@"ApiEmbedUser"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXPrepareChangingEmailParams ---
@implementation QXPublicServicePrepareChangingEmailParams : NSObject

@synthesize MemberId;
@synthesize NewEmail;
@synthesize SharingToken;
@synthesize InvitationToken;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setMemberId:[dict valueForKey:@"MemberId"]];
	[self setNewEmail:[dict valueForKey:@"NewEmail"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];
	[self setInvitationToken:[dict valueForKey:@"InvitationToken"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.MemberId forKey:@"MemberId"];
	[dict setValue:self.NewEmail forKey:@"NewEmail"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];
	[dict setValue:self.InvitationToken forKey:@"InvitationToken"];

	return dict;
}

@end

// --- QXPrepareChangingEmailResults ---
@implementation QXPublicServicePrepareChangingEmailResults : NSObject

@synthesize Changer;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictChanger = [dict valueForKey:@"Changer"];
	if ([dictChanger isKindOfClass:[NSDictionary class]]){
		[self setChanger:[[QXEmailChanger alloc] initWithDictionary:dictChanger]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Changer dictionary] forKey:@"Changer"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXConfirmChangingEmailParams ---
@implementation QXPublicServiceConfirmChangingEmailParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXConfirmChangingEmailResults ---
@implementation QXPublicServiceConfirmChangingEmailResults : NSObject

@synthesize ActivationToken;
@synthesize SharingToken;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setActivationToken:[dict valueForKey:@"ActivationToken"]];
	[self setSharingToken:[dict valueForKey:@"SharingToken"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ActivationToken forKey:@"ActivationToken"];
	[dict setValue:self.SharingToken forKey:@"SharingToken"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCancelChangingEmailParams ---
@implementation QXPublicServiceCancelChangingEmailParams : NSObject

@synthesize Token;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];

	return dict;
}

@end

// --- QXCancelChangingEmailResults ---
@implementation QXPublicServiceCancelChangingEmailResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXChangeEmailToAcceptSharingParams ---
@implementation QXPublicServiceChangeEmailToAcceptSharingParams : NSObject

@synthesize Token;
@synthesize NewEmail;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setToken:[dict valueForKey:@"Token"]];
	[self setNewEmail:[dict valueForKey:@"NewEmail"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Token forKey:@"Token"];
	[dict setValue:self.NewEmail forKey:@"NewEmail"];

	return dict;
}

@end

// --- QXChangeEmailToAcceptSharingResults ---
@implementation QXPublicServiceChangeEmailToAcceptSharingResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetSharingInviationParams ---
@implementation QXPublicServiceGetSharingInviationParams : NSObject

@synthesize SharingInviationToken;
@synthesize MemberId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSharingInviationToken:[dict valueForKey:@"SharingInviationToken"]];
	[self setMemberId:[dict valueForKey:@"MemberId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.SharingInviationToken forKey:@"SharingInviationToken"];
	[dict setValue:self.MemberId forKey:@"MemberId"];

	return dict;
}

@end

// --- QXGetSharingInviationResults ---
@implementation QXPublicServiceGetSharingInviationResults : NSObject

@synthesize Invitation;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInvitation = [dict valueForKey:@"Invitation"];
	if ([dictInvitation isKindOfClass:[NSDictionary class]]){
		[self setInvitation:[[QXSharingInvitation alloc] initWithDictionary:dictInvitation]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Invitation dictionary] forKey:@"Invitation"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXContactUsParams ---
@implementation QXPublicServiceContactUsParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXContactInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXContactUsResults ---
@implementation QXPublicServiceContactUsResults : NSObject

@synthesize Contact;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictContact = [dict valueForKey:@"Contact"];
	if ([dictContact isKindOfClass:[NSDictionary class]]){
		[self setContact:[[QXContactInfo alloc] initWithDictionary:dictContact]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Contact dictionary] forKey:@"Contact"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetBlogEntriesParams ---
@implementation QXPublicServiceGetBlogEntriesParams : NSObject

@synthesize Doi;
@synthesize PageNum;
@synthesize Limit;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setPageNum:[dict valueForKey:@"PageNum"]];
	[self setLimit:[dict valueForKey:@"Limit"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.PageNum forKey:@"PageNum"];
	[dict setValue:self.Limit forKey:@"Limit"];

	return dict;
}

@end

// --- QXGetBlogEntriesResults ---
@implementation QXPublicServiceGetBlogEntriesResults : NSObject

@synthesize Blog;
@synthesize BlogEntries;
@synthesize TotalPageNum;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictBlog = [dict valueForKey:@"Blog"];
	if ([dictBlog isKindOfClass:[NSDictionary class]]){
		[self setBlog:[[QXBlog alloc] initWithDictionary:dictBlog]];
	}

	NSMutableArray * mBlogEntries = [[NSMutableArray alloc] init];
	NSArray * lBlogEntries = [dict valueForKey:@"BlogEntries"];
	if ([lBlogEntries isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lBlogEntries) {
			[mBlogEntries addObject: [[QXBlogEntry alloc] initWithDictionary:d]];
		}
		[self setBlogEntries:mBlogEntries];
	}
	[self setTotalPageNum:[dict valueForKey:@"TotalPageNum"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Blog dictionary] forKey:@"Blog"];
	

	NSMutableArray * mBlogEntries = [[NSMutableArray alloc] init];
	for (QXBlogEntry * p in BlogEntries) {
		[mBlogEntries addObject:[p dictionary]];
	}
	[dict setValue:mBlogEntries forKey:@"BlogEntries"];
	
	[dict setValue:self.TotalPageNum forKey:@"TotalPageNum"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGetBlogEntryBySlugParams ---
@implementation QXPublicServiceGetBlogEntryBySlugParams : NSObject

@synthesize Doi;
@synthesize Slug;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setSlug:[dict valueForKey:@"Slug"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.Slug forKey:@"Slug"];

	return dict;
}

@end

// --- QXGetBlogEntryBySlugResults ---
@implementation QXPublicServiceGetBlogEntryBySlugResults : NSObject

@synthesize Blog;
@synthesize BlogEntry;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictBlog = [dict valueForKey:@"Blog"];
	if ([dictBlog isKindOfClass:[NSDictionary class]]){
		[self setBlog:[[QXBlog alloc] initWithDictionary:dictBlog]];
	}

	id dictBlogEntry = [dict valueForKey:@"BlogEntry"];
	if ([dictBlogEntry isKindOfClass:[NSDictionary class]]){
		[self setBlogEntry:[[QXBlogEntry alloc] initWithDictionary:dictBlogEntry]];
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Blog dictionary] forKey:@"Blog"];
	
	[dict setValue:[self.BlogEntry dictionary] forKey:@"BlogEntry"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXGenerateBlogEntrySlugParams ---
@implementation QXPublicServiceGenerateBlogEntrySlugParams : NSObject

@synthesize Doi;
@synthesize Slug;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setDoi:[dict valueForKey:@"Doi"]];
	[self setSlug:[dict valueForKey:@"Slug"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Doi forKey:@"Doi"];
	[dict setValue:self.Slug forKey:@"Slug"];

	return dict;
}

@end

// --- QXGenerateBlogEntrySlugResults ---
@implementation QXPublicServiceGenerateBlogEntrySlugResults : NSObject

@synthesize ValidSlug;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidSlug:[dict valueForKey:@"ValidSlug"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ValidSlug forKey:@"ValidSlug"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXCreateNewsletterParams ---
@implementation QXPublicServiceCreateNewsletterParams : NSObject

@synthesize Input;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictInput = [dict valueForKey:@"Input"];
	if ([dictInput isKindOfClass:[NSDictionary class]]){
		[self setInput:[[QXNewsletterInput alloc] initWithDictionary:dictInput]];
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Input dictionary] forKey:@"Input"];
	

	return dict;
}

@end

// --- QXCreateNewsletterResults ---
@implementation QXPublicServiceCreateNewsletterResults : NSObject

@synthesize Newsletter;
@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	id dictNewsletter = [dict valueForKey:@"Newsletter"];
	if ([dictNewsletter isKindOfClass:[NSDictionary class]]){
		[self setNewsletter:[[QXNewsletter alloc] initWithDictionary:dictNewsletter]];
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:[self.Newsletter dictionary] forKey:@"Newsletter"];
	
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestNewSignupTokenParams ---
@implementation QXPublicServiceRequestNewSignupTokenParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestNewSignupTokenResults ---
@implementation QXPublicServiceRequestNewSignupTokenResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestNewInvitationTokenParams ---
@implementation QXPublicServiceRequestNewInvitationTokenParams : NSObject

@synthesize OrgId;
@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrgId:[dict valueForKey:@"OrgId"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrgId forKey:@"OrgId"];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestNewInvitationTokenResults ---
@implementation QXPublicServiceRequestNewInvitationTokenResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestNewSharingTokenParams ---
@implementation QXPublicServiceRequestNewSharingTokenParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestNewSharingTokenResults ---
@implementation QXPublicServiceRequestNewSharingTokenResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXInviteMeParams ---
@implementation QXPublicServiceInviteMeParams : NSObject

@synthesize OrganizationId;
@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setOrganizationId:[dict valueForKey:@"OrganizationId"]];
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.OrganizationId forKey:@"OrganizationId"];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXInviteMeResults ---
@implementation QXPublicServiceInviteMeResults : NSObject

@synthesize Validated;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setValidated:[dict valueForKey:@"Validated"]];
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Validated forKey:@"Validated"];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- QXRequestSignupParams ---
@implementation QXPublicServiceRequestSignupParams : NSObject

@synthesize Email;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];

	return dict;
}

@end

// --- QXRequestSignupResults ---
@implementation QXPublicServiceRequestSignupResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[QXQortexapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end



@implementation QXAuthAdminService : NSObject


@synthesize Session;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];

	return dict;
}



// --- GetTotalStats ---
- (QXAuthAdminServiceGetTotalStatsResults *) GetTotalStats {
	
	QXAuthAdminServiceGetTotalStatsResults *results = [QXAuthAdminServiceGetTotalStatsResults alloc];
	QXAuthAdminServiceGetTotalStatsParams *params = [[QXAuthAdminServiceGetTotalStatsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetTotalStats.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetWeeklyTotalStats ---
- (QXAuthAdminServiceGetWeeklyTotalStatsResults *) GetWeeklyTotalStats {
	
	QXAuthAdminServiceGetWeeklyTotalStatsResults *results = [QXAuthAdminServiceGetWeeklyTotalStatsResults alloc];
	QXAuthAdminServiceGetWeeklyTotalStatsParams *params = [[QXAuthAdminServiceGetWeeklyTotalStatsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetWeeklyTotalStats.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetOrgStats ---
- (QXAuthAdminServiceGetOrgStatsResults *) GetOrgStats {
	
	QXAuthAdminServiceGetOrgStatsResults *results = [QXAuthAdminServiceGetOrgStatsResults alloc];
	QXAuthAdminServiceGetOrgStatsParams *params = [[QXAuthAdminServiceGetOrgStatsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetOrgStats.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetAccessRequests ---
- (QXAuthAdminServiceGetAccessRequestsResults *) GetAccessRequests {
	
	QXAuthAdminServiceGetAccessRequestsResults *results = [QXAuthAdminServiceGetAccessRequestsResults alloc];
	QXAuthAdminServiceGetAccessRequestsParams *params = [[QXAuthAdminServiceGetAccessRequestsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAccessRequests.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- ApproveAccess ---
- (NSError *) ApproveAccess:(NSString *)email {
	
	QXAuthAdminServiceApproveAccessResults *results = [QXAuthAdminServiceApproveAccessResults alloc];
	QXAuthAdminServiceApproveAccessParams *params = [[QXAuthAdminServiceApproveAccessParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/ApproveAccess.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetAllMembers ---
- (QXAuthAdminServiceGetAllMembersResults *) GetAllMembers {
	
	QXAuthAdminServiceGetAllMembersResults *results = [QXAuthAdminServiceGetAllMembersResults alloc];
	QXAuthAdminServiceGetAllMembersParams *params = [[QXAuthAdminServiceGetAllMembersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthAdminService/GetAllMembers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}
@end

@implementation QXAuthMemberService : NSObject

- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}


// --- SwitchOrganization ---
- (NSError *) SwitchOrganization:(NSString *)orgId {
	
	QXAuthMemberServiceSwitchOrganizationResults *results = [QXAuthMemberServiceSwitchOrganizationResults alloc];
	QXAuthMemberServiceSwitchOrganizationParams *params = [[QXAuthMemberServiceSwitchOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/SwitchOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetAbandonInfo ---
- (QXAuthMemberServiceGetAbandonInfoResults *) GetAbandonInfo:(NSString *)abandonOrgId memberId:(NSString *)memberId {
	
	QXAuthMemberServiceGetAbandonInfoResults *results = [QXAuthMemberServiceGetAbandonInfoResults alloc];
	QXAuthMemberServiceGetAbandonInfoParams *params = [[QXAuthMemberServiceGetAbandonInfoParams alloc] init];
	[params setAbandonOrgId:abandonOrgId];
	[params setMemberId:memberId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetAbandonInfo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetSharingInviationByToken ---
- (QXAuthMemberServiceGetSharingInviationByTokenResults *) GetSharingInviationByToken:(NSString *)sharingInviationToken {
	
	QXAuthMemberServiceGetSharingInviationByTokenResults *results = [QXAuthMemberServiceGetSharingInviationByTokenResults alloc];
	QXAuthMemberServiceGetSharingInviationByTokenParams *params = [[QXAuthMemberServiceGetSharingInviationByTokenParams alloc] init];
	[params setSharingInviationToken:sharingInviationToken];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/GetSharingInviationByToken.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RejectSharingBeforeForwarding ---
- (NSError *) RejectSharingBeforeForwarding:(NSString *)groupId email:(NSString *)email {
	
	QXAuthMemberServiceRejectSharingBeforeForwardingResults *results = [QXAuthMemberServiceRejectSharingBeforeForwardingResults alloc];
	QXAuthMemberServiceRejectSharingBeforeForwardingParams *params = [[QXAuthMemberServiceRejectSharingBeforeForwardingParams alloc] init];
	[params setGroupId:groupId];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/RejectSharingBeforeForwarding.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- RespondSharingRequest ---
- (QXAuthMemberServiceRespondSharingRequestResults *) RespondSharingRequest:(NSString *)token toOrgId:(NSString *)toOrgId {
	
	QXAuthMemberServiceRespondSharingRequestResults *results = [QXAuthMemberServiceRespondSharingRequestResults alloc];
	QXAuthMemberServiceRespondSharingRequestParams *params = [[QXAuthMemberServiceRespondSharingRequestParams alloc] init];
	[params setToken:token];
	[params setToOrgId:toOrgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthMemberService/RespondSharingRequest.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}
@end

@implementation QXAuthUserService : NSObject


@synthesize Session;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setSession:[dict valueForKey:@"Session"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Session forKey:@"Session"];

	return dict;
}



// --- GetNewEntry ---
- (QXAuthUserServiceGetNewEntryResults *) GetNewEntry:(NSString *)groupId {
	
	QXAuthUserServiceGetNewEntryResults *results = [QXAuthUserServiceGetNewEntryResults alloc];
	QXAuthUserServiceGetNewEntryParams *params = [[QXAuthUserServiceGetNewEntryParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetQortexMessages ---
- (QXAuthUserServiceGetQortexMessagesResults *) GetQortexMessages:(NSString *)messsageType before:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments {
	
	QXAuthUserServiceGetQortexMessagesResults *results = [QXAuthUserServiceGetQortexMessagesResults alloc];
	QXAuthUserServiceGetQortexMessagesParams *params = [[QXAuthUserServiceGetQortexMessagesParams alloc] init];
	[params setMesssageType:messsageType];
	[params setBefore:before];
	[params setLimit:limit];
	[params setWithComments:withComments];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetQortexMessages.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CreateBroadcast ---
- (QXAuthUserServiceCreateBroadcastResults *) CreateBroadcast:(QXBroadcastInput *)input {
	
	QXAuthUserServiceCreateBroadcastResults *results = [QXAuthUserServiceCreateBroadcastResults alloc];
	QXAuthUserServiceCreateBroadcastParams *params = [[QXAuthUserServiceCreateBroadcastParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateBroadcast.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CreateBroadcastComment ---
- (QXAuthUserServiceCreateBroadcastCommentResults *) CreateBroadcastComment:(QXBroadcastInput *)input {
	
	QXAuthUserServiceCreateBroadcastCommentResults *results = [QXAuthUserServiceCreateBroadcastCommentResults alloc];
	QXAuthUserServiceCreateBroadcastCommentParams *params = [[QXAuthUserServiceCreateBroadcastCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateBroadcastComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetSharingRequestEntry ---
- (QXAuthUserServiceGetSharingRequestEntryResults *) GetSharingRequestEntry:(NSString *)entryId {
	
	QXAuthUserServiceGetSharingRequestEntryResults *results = [QXAuthUserServiceGetSharingRequestEntryResults alloc];
	QXAuthUserServiceGetSharingRequestEntryParams *params = [[QXAuthUserServiceGetSharingRequestEntryParams alloc] init];
	[params setEntryId:entryId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetSharingRequestEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetBroadcast ---
- (QXAuthUserServiceGetBroadcastResults *) GetBroadcast:(NSString *)entryId {
	
	QXAuthUserServiceGetBroadcastResults *results = [QXAuthUserServiceGetBroadcastResults alloc];
	QXAuthUserServiceGetBroadcastParams *params = [[QXAuthUserServiceGetBroadcastParams alloc] init];
	[params setEntryId:entryId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetBroadcast.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetBroadcastComment ---
- (QXAuthUserServiceGetBroadcastCommentResults *) GetBroadcastComment:(NSString *)entryId {
	
	QXAuthUserServiceGetBroadcastCommentResults *results = [QXAuthUserServiceGetBroadcastCommentResults alloc];
	QXAuthUserServiceGetBroadcastCommentParams *params = [[QXAuthUserServiceGetBroadcastCommentParams alloc] init];
	[params setEntryId:entryId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetBroadcastComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateBroadcast ---
- (QXAuthUserServiceUpdateBroadcastResults *) UpdateBroadcast:(QXBroadcastInput *)input {
	
	QXAuthUserServiceUpdateBroadcastResults *results = [QXAuthUserServiceUpdateBroadcastResults alloc];
	QXAuthUserServiceUpdateBroadcastParams *params = [[QXAuthUserServiceUpdateBroadcastParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateBroadcast.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateBroadcastComment ---
- (QXAuthUserServiceUpdateBroadcastCommentResults *) UpdateBroadcastComment:(QXBroadcastInput *)input {
	
	QXAuthUserServiceUpdateBroadcastCommentResults *results = [QXAuthUserServiceUpdateBroadcastCommentResults alloc];
	QXAuthUserServiceUpdateBroadcastCommentParams *params = [[QXAuthUserServiceUpdateBroadcastCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateBroadcastComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CreateEntry ---
- (QXAuthUserServiceCreateEntryResults *) CreateEntry:(QXEntryInput *)input {
	
	QXAuthUserServiceCreateEntryResults *results = [QXAuthUserServiceCreateEntryResults alloc];
	QXAuthUserServiceCreateEntryParams *params = [[QXAuthUserServiceCreateEntryParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CreateTask ---
- (QXAuthUserServiceCreateTaskResults *) CreateTask:(QXEntryInput *)input {
	
	QXAuthUserServiceCreateTaskResults *results = [QXAuthUserServiceCreateTaskResults alloc];
	QXAuthUserServiceCreateTaskParams *params = [[QXAuthUserServiceCreateTaskParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CloseTask ---
- (QXAuthUserServiceCloseTaskResults *) CloseTask:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceCloseTaskResults *results = [QXAuthUserServiceCloseTaskResults alloc];
	QXAuthUserServiceCloseTaskParams *params = [[QXAuthUserServiceCloseTaskParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CloseTask.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CreateComment ---
- (QXAuthUserServiceCreateCommentResults *) CreateComment:(QXEntryInput *)input {
	
	QXAuthUserServiceCreateCommentResults *results = [QXAuthUserServiceCreateCommentResults alloc];
	QXAuthUserServiceCreateCommentParams *params = [[QXAuthUserServiceCreateCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetComment ---
- (QXAuthUserServiceGetCommentResults *) GetComment:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetCommentResults *results = [QXAuthUserServiceGetCommentResults alloc];
	QXAuthUserServiceGetCommentParams *params = [[QXAuthUserServiceGetCommentParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateComment ---
- (QXAuthUserServiceUpdateCommentResults *) UpdateComment:(QXEntryInput *)input {
	
	QXAuthUserServiceUpdateCommentResults *results = [QXAuthUserServiceUpdateCommentResults alloc];
	QXAuthUserServiceUpdateCommentParams *params = [[QXAuthUserServiceUpdateCommentParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateComment.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateEntry ---
- (QXAuthUserServiceUpdateEntryResults *) UpdateEntry:(QXEntryInput *)input {
	
	QXAuthUserServiceUpdateEntryResults *results = [QXAuthUserServiceUpdateEntryResults alloc];
	QXAuthUserServiceUpdateEntryParams *params = [[QXAuthUserServiceUpdateEntryParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetLatestUpdatedEntryIdByTitle ---
- (QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults *) GetLatestUpdatedEntryIdByTitle:(NSString *)title groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults *results = [QXAuthUserServiceGetLatestUpdatedEntryIdByTitleResults alloc];
	QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams *params = [[QXAuthUserServiceGetLatestUpdatedEntryIdByTitleParams alloc] init];
	[params setTitle:title];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetLatestUpdatedEntryIdByTitle.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetEntry ---
- (QXAuthUserServiceGetEntryResults *) GetEntry:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion hightlightKeywords:(NSString *)hightlightKeywords {
	
	QXAuthUserServiceGetEntryResults *results = [QXAuthUserServiceGetEntryResults alloc];
	QXAuthUserServiceGetEntryParams *params = [[QXAuthUserServiceGetEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
	[params setHightlightKeywords:hightlightKeywords];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- DeleteEntry ---
- (QXAuthUserServiceDeleteEntryResults *) DeleteEntry:(NSString *)entryId groupId:(NSString *)groupId dType:(NSString *)dType {
	
	QXAuthUserServiceDeleteEntryResults *results = [QXAuthUserServiceDeleteEntryResults alloc];
	QXAuthUserServiceDeleteEntryParams *params = [[QXAuthUserServiceDeleteEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setDType:dType];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- MuteEntry ---
- (NSError *) MuteEntry:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceMuteEntryResults *results = [QXAuthUserServiceMuteEntryResults alloc];
	QXAuthUserServiceMuteEntryParams *params = [[QXAuthUserServiceMuteEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MuteEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- UndoMuteEntry ---
- (NSError *) UndoMuteEntry:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceUndoMuteEntryResults *results = [QXAuthUserServiceUndoMuteEntryResults alloc];
	QXAuthUserServiceUndoMuteEntryParams *params = [[QXAuthUserServiceUndoMuteEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UndoMuteEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetEntryAttachments ---
- (QXAuthUserServiceGetEntryAttachmentsResults *) GetEntryAttachments:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetEntryAttachmentsResults *results = [QXAuthUserServiceGetEntryAttachmentsResults alloc];
	QXAuthUserServiceGetEntryAttachmentsParams *params = [[QXAuthUserServiceGetEntryAttachmentsParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetEntryAttachments.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetOtherVersionsComments ---
- (QXAuthUserServiceGetOtherVersionsCommentsResults *) GetOtherVersionsComments:(NSString *)entryId groupId:(NSString *)groupId updateAtUnixNanoForVersion:(NSString *)updateAtUnixNanoForVersion hightlightKeywords:(NSString *)hightlightKeywords {
	
	QXAuthUserServiceGetOtherVersionsCommentsResults *results = [QXAuthUserServiceGetOtherVersionsCommentsResults alloc];
	QXAuthUserServiceGetOtherVersionsCommentsParams *params = [[QXAuthUserServiceGetOtherVersionsCommentsParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setUpdateAtUnixNanoForVersion:updateAtUnixNanoForVersion];
	[params setHightlightKeywords:hightlightKeywords];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOtherVersionsComments.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetGroupEntries ---
- (QXAuthUserServiceGetGroupEntriesResults *) GetGroupEntries:(NSString *)groupId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments {
	
	QXAuthUserServiceGetGroupEntriesResults *results = [QXAuthUserServiceGetGroupEntriesResults alloc];
	QXAuthUserServiceGetGroupEntriesParams *params = [[QXAuthUserServiceGetGroupEntriesParams alloc] init];
	[params setGroupId:groupId];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	[params setWithComments:withComments];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetMyFeedEntries ---
- (QXAuthUserServiceGetMyFeedEntriesResults *) GetMyFeedEntries:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit withComments:(BOOL)withComments {
	
	QXAuthUserServiceGetMyFeedEntriesResults *results = [QXAuthUserServiceGetMyFeedEntriesResults alloc];
	QXAuthUserServiceGetMyFeedEntriesParams *params = [[QXAuthUserServiceGetMyFeedEntriesParams alloc] init];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	[params setWithComments:withComments];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyFeedEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetNewFeedEntries ---
- (QXAuthUserServiceGetNewFeedEntriesResults *) GetNewFeedEntries:(NSString *)entryType fromTimeUnixNano:(NSString *)fromTimeUnixNano limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetNewFeedEntriesResults *results = [QXAuthUserServiceGetNewFeedEntriesResults alloc];
	QXAuthUserServiceGetNewFeedEntriesParams *params = [[QXAuthUserServiceGetNewFeedEntriesParams alloc] init];
	[params setEntryType:entryType];
	[params setFromTimeUnixNano:fromTimeUnixNano];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewFeedEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetMyTaskEntries ---
- (QXAuthUserServiceGetMyTaskEntriesResults *) GetMyTaskEntries:(BOOL)active before:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetMyTaskEntriesResults *results = [QXAuthUserServiceGetMyTaskEntriesResults alloc];
	QXAuthUserServiceGetMyTaskEntriesParams *params = [[QXAuthUserServiceGetMyTaskEntriesParams alloc] init];
	[params setActive:active];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyTaskEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetUserEntries ---
- (QXAuthUserServiceGetUserEntriesResults *) GetUserEntries:(NSString *)userId entryType:(NSString *)entryType before:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetUserEntriesResults *results = [QXAuthUserServiceGetUserEntriesResults alloc];
	QXAuthUserServiceGetUserEntriesParams *params = [[QXAuthUserServiceGetUserEntriesParams alloc] init];
	[params setUserId:userId];
	[params setEntryType:entryType];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUserEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetMyNotificationItems ---
- (QXAuthUserServiceGetMyNotificationItemsResults *) GetMyNotificationItems:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetMyNotificationItemsResults *results = [QXAuthUserServiceGetMyNotificationItemsResults alloc];
	QXAuthUserServiceGetMyNotificationItemsParams *params = [[QXAuthUserServiceGetMyNotificationItemsParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyNotificationItems.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- MarkAllAsRead ---
- (QXAuthUserServiceMarkAllAsReadResults *) MarkAllAsRead:(NSString *)groupId {
	
	QXAuthUserServiceMarkAllAsReadResults *results = [QXAuthUserServiceMarkAllAsReadResults alloc];
	QXAuthUserServiceMarkAllAsReadParams *params = [[QXAuthUserServiceMarkAllAsReadParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/MarkAllAsRead.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetWatchList ---
- (QXAuthUserServiceGetWatchListResults *) GetWatchList:(NSDate *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetWatchListResults *results = [QXAuthUserServiceGetWatchListResults alloc];
	QXAuthUserServiceGetWatchListParams *params = [[QXAuthUserServiceGetWatchListParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetWatchList.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- AddToWatchList ---
- (QXAuthUserServiceAddToWatchListResults *) AddToWatchList:(NSString *)entryId groupId:(NSString *)groupId remindMode:(NSString *)remindMode {
	
	QXAuthUserServiceAddToWatchListResults *results = [QXAuthUserServiceAddToWatchListResults alloc];
	QXAuthUserServiceAddToWatchListParams *params = [[QXAuthUserServiceAddToWatchListParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	[params setRemindMode:remindMode];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AddToWatchList.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- StopWatching ---
- (QXAuthUserServiceStopWatchingResults *) StopWatching:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceStopWatchingResults *results = [QXAuthUserServiceStopWatchingResults alloc];
	QXAuthUserServiceStopWatchingParams *params = [[QXAuthUserServiceStopWatchingParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopWatching.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- ReadWatching ---
- (NSError *) ReadWatching:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceReadWatchingResults *results = [QXAuthUserServiceReadWatchingResults alloc];
	QXAuthUserServiceReadWatchingParams *params = [[QXAuthUserServiceReadWatchingParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ReadWatching.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- RemindMe ---
- (QXAuthUserServiceRemindMeResults *) RemindMe {
	
	QXAuthUserServiceRemindMeResults *results = [QXAuthUserServiceRemindMeResults alloc];
	QXAuthUserServiceRemindMeParams *params = [[QXAuthUserServiceRemindMeParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RemindMe.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- StartSmartReminding ---
- (QXAuthUserServiceStartSmartRemindingResults *) StartSmartReminding:(NSString *)groupId watchItemId:(NSString *)watchItemId {
	
	QXAuthUserServiceStartSmartRemindingResults *results = [QXAuthUserServiceStartSmartRemindingResults alloc];
	QXAuthUserServiceStartSmartRemindingParams *params = [[QXAuthUserServiceStartSmartRemindingParams alloc] init];
	[params setGroupId:groupId];
	[params setWatchItemId:watchItemId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StartSmartReminding.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- StopReminding ---
- (QXAuthUserServiceStopRemindingResults *) StopReminding:(NSString *)groupId watchItemId:(NSString *)watchItemId {
	
	QXAuthUserServiceStopRemindingResults *results = [QXAuthUserServiceStopRemindingResults alloc];
	QXAuthUserServiceStopRemindingParams *params = [[QXAuthUserServiceStopRemindingParams alloc] init];
	[params setGroupId:groupId];
	[params setWatchItemId:watchItemId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopReminding.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateLike ---
- (QXAuthUserServiceUpdateLikeResults *) UpdateLike:(QXLikeInput *)input {
	
	QXAuthUserServiceUpdateLikeResults *results = [QXAuthUserServiceUpdateLikeResults alloc];
	QXAuthUserServiceUpdateLikeParams *params = [[QXAuthUserServiceUpdateLikeParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateLike.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetDraftList ---
- (QXAuthUserServiceGetDraftListResults *) GetDraftList:(NSDate *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetDraftListResults *results = [QXAuthUserServiceGetDraftListResults alloc];
	QXAuthUserServiceGetDraftListParams *params = [[QXAuthUserServiceGetDraftListParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDraftList.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetDraft ---
- (QXAuthUserServiceGetDraftResults *) GetDraft:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceGetDraftResults *results = [QXAuthUserServiceGetDraftResults alloc];
	QXAuthUserServiceGetDraftParams *params = [[QXAuthUserServiceGetDraftParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetDraft.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- DeleteDraft ---
- (NSError *) DeleteDraft:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceDeleteDraftResults *results = [QXAuthUserServiceDeleteDraftResults alloc];
	QXAuthUserServiceDeleteDraftParams *params = [[QXAuthUserServiceDeleteDraftParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteDraft.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetNewGroup ---
- (QXAuthUserServiceGetNewGroupResults *) GetNewGroup {
	
	QXAuthUserServiceGetNewGroupResults *results = [QXAuthUserServiceGetNewGroupResults alloc];
	QXAuthUserServiceGetNewGroupParams *params = [[QXAuthUserServiceGetNewGroupParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNewGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetGroup ---
- (QXAuthUserServiceGetGroupResults *) GetGroup:(NSString *)groupId {
	
	QXAuthUserServiceGetGroupResults *results = [QXAuthUserServiceGetGroupResults alloc];
	QXAuthUserServiceGetGroupParams *params = [[QXAuthUserServiceGetGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CreateGroup ---
- (QXAuthUserServiceCreateGroupResults *) CreateGroup:(QXGroupInput *)input {
	
	QXAuthUserServiceCreateGroupResults *results = [QXAuthUserServiceCreateGroupResults alloc];
	QXAuthUserServiceCreateGroupParams *params = [[QXAuthUserServiceCreateGroupParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CreateGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateGroup ---
- (QXAuthUserServiceUpdateGroupResults *) UpdateGroup:(QXGroupInput *)input {
	
	QXAuthUserServiceUpdateGroupResults *results = [QXAuthUserServiceUpdateGroupResults alloc];
	QXAuthUserServiceUpdateGroupParams *params = [[QXAuthUserServiceUpdateGroupParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateGroupLogo ---
- (NSError *) UpdateGroupLogo:(NSString *)groupId logoURL:(NSString *)logoURL {
	
	QXAuthUserServiceUpdateGroupLogoResults *results = [QXAuthUserServiceUpdateGroupLogoResults alloc];
	QXAuthUserServiceUpdateGroupLogoParams *params = [[QXAuthUserServiceUpdateGroupLogoParams alloc] init];
	[params setGroupId:groupId];
	[params setLogoURL:logoURL];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateGroupLogo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- DeleteGroup ---
- (NSError *) DeleteGroup:(NSString *)groupId {
	
	QXAuthUserServiceDeleteGroupResults *results = [QXAuthUserServiceDeleteGroupResults alloc];
	QXAuthUserServiceDeleteGroupParams *params = [[QXAuthUserServiceDeleteGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetGroupBySlug ---
- (QXAuthUserServiceGetGroupBySlugResults *) GetGroupBySlug:(NSString *)slug {
	
	QXAuthUserServiceGetGroupBySlugResults *results = [QXAuthUserServiceGetGroupBySlugResults alloc];
	QXAuthUserServiceGetGroupBySlugParams *params = [[QXAuthUserServiceGetGroupBySlugParams alloc] init];
	[params setSlug:slug];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupBySlug.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetGroups ---
- (QXAuthUserServiceGetGroupsResults *) GetGroups:(NSString *)keyword {
	
	QXAuthUserServiceGetGroupsResults *results = [QXAuthUserServiceGetGroupsResults alloc];
	QXAuthUserServiceGetGroupsParams *params = [[QXAuthUserServiceGetGroupsParams alloc] init];
	[params setKeyword:keyword];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroups.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetPublicGroups ---
- (QXAuthUserServiceGetPublicGroupsResults *) GetPublicGroups:(NSString *)keyword {
	
	QXAuthUserServiceGetPublicGroupsResults *results = [QXAuthUserServiceGetPublicGroupsResults alloc];
	QXAuthUserServiceGetPublicGroupsParams *params = [[QXAuthUserServiceGetPublicGroupsParams alloc] init];
	[params setKeyword:keyword];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPublicGroups.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- AddUserToGroup ---
- (NSError *) AddUserToGroup:(NSString *)groupId userId:(NSString *)userId {
	
	QXAuthUserServiceAddUserToGroupResults *results = [QXAuthUserServiceAddUserToGroupResults alloc];
	QXAuthUserServiceAddUserToGroupParams *params = [[QXAuthUserServiceAddUserToGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AddUserToGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- RemoveUserFromGroup ---
- (NSError *) RemoveUserFromGroup:(NSString *)groupId userId:(NSString *)userId {
	
	QXAuthUserServiceRemoveUserFromGroupResults *results = [QXAuthUserServiceRemoveUserFromGroupResults alloc];
	QXAuthUserServiceRemoveUserFromGroupParams *params = [[QXAuthUserServiceRemoveUserFromGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RemoveUserFromGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetGroupHeader ---
- (QXAuthUserServiceGetGroupHeaderResults *) GetGroupHeader:(NSString *)groupId {
	
	QXAuthUserServiceGetGroupHeaderResults *results = [QXAuthUserServiceGetGroupHeaderResults alloc];
	QXAuthUserServiceGetGroupHeaderParams *params = [[QXAuthUserServiceGetGroupHeaderParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupHeader.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetClassifiedGroups ---
- (QXAuthUserServiceGetClassifiedGroupsResults *) GetClassifiedGroups {
	
	QXAuthUserServiceGetClassifiedGroupsResults *results = [QXAuthUserServiceGetClassifiedGroupsResults alloc];
	QXAuthUserServiceGetClassifiedGroupsParams *params = [[QXAuthUserServiceGetClassifiedGroupsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetClassifiedGroups.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetAuthUser ---
- (QXAuthUserServiceGetAuthUserResults *) GetAuthUser {
	
	QXAuthUserServiceGetAuthUserResults *results = [QXAuthUserServiceGetAuthUserResults alloc];
	QXAuthUserServiceGetAuthUserParams *params = [[QXAuthUserServiceGetAuthUserParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetAuthUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetOrgUsers ---
- (QXAuthUserServiceGetOrgUsersResults *) GetOrgUsers:(NSString *)keyword startFullName:(NSString *)startFullName limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetOrgUsersResults *results = [QXAuthUserServiceGetOrgUsersResults alloc];
	QXAuthUserServiceGetOrgUsersParams *params = [[QXAuthUserServiceGetOrgUsersParams alloc] init];
	[params setKeyword:keyword];
	[params setStartFullName:startFullName];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetGroupUsers ---
- (QXAuthUserServiceGetGroupUsersResults *) GetGroupUsers:(NSString *)groupId keyword:(NSString *)keyword onlyFollowers:(BOOL)onlyFollowers startFullName:(NSString *)startFullName limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetGroupUsersResults *results = [QXAuthUserServiceGetGroupUsersResults alloc];
	QXAuthUserServiceGetGroupUsersParams *params = [[QXAuthUserServiceGetGroupUsersParams alloc] init];
	[params setGroupId:groupId];
	[params setKeyword:keyword];
	[params setOnlyFollowers:onlyFollowers];
	[params setStartFullName:startFullName];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetGroupUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetUser ---
- (QXAuthUserServiceGetUserResults *) GetUser:(NSString *)userId {
	
	QXAuthUserServiceGetUserResults *results = [QXAuthUserServiceGetUserResults alloc];
	QXAuthUserServiceGetUserParams *params = [[QXAuthUserServiceGetUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- EnableUser ---
- (NSError *) EnableUser:(NSString *)userId {
	
	QXAuthUserServiceEnableUserResults *results = [QXAuthUserServiceEnableUserResults alloc];
	QXAuthUserServiceEnableUserParams *params = [[QXAuthUserServiceEnableUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/EnableUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- DisableUser ---
- (NSError *) DisableUser:(NSString *)userId {
	
	QXAuthUserServiceDisableUserResults *results = [QXAuthUserServiceDisableUserResults alloc];
	QXAuthUserServiceDisableUserParams *params = [[QXAuthUserServiceDisableUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DisableUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- DeleteUser ---
- (NSError *) DeleteUser:(NSString *)userId {
	
	QXAuthUserServiceDeleteUserResults *results = [QXAuthUserServiceDeleteUserResults alloc];
	QXAuthUserServiceDeleteUserParams *params = [[QXAuthUserServiceDeleteUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DeleteUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- PromoteToSuperUser ---
- (NSError *) PromoteToSuperUser:(NSString *)userId {
	
	QXAuthUserServicePromoteToSuperUserResults *results = [QXAuthUserServicePromoteToSuperUserResults alloc];
	QXAuthUserServicePromoteToSuperUserParams *params = [[QXAuthUserServicePromoteToSuperUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/PromoteToSuperUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- DemoteFromSuperUser ---
- (NSError *) DemoteFromSuperUser:(NSString *)userId {
	
	QXAuthUserServiceDemoteFromSuperUserResults *results = [QXAuthUserServiceDemoteFromSuperUserResults alloc];
	QXAuthUserServiceDemoteFromSuperUserParams *params = [[QXAuthUserServiceDemoteFromSuperUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/DemoteFromSuperUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- FollowUser ---
- (NSError *) FollowUser:(NSString *)userId {
	
	QXAuthUserServiceFollowUserResults *results = [QXAuthUserServiceFollowUserResults alloc];
	QXAuthUserServiceFollowUserParams *params = [[QXAuthUserServiceFollowUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/FollowUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- UnfollowUser ---
- (NSError *) UnfollowUser:(NSString *)userId {
	
	QXAuthUserServiceUnfollowUserResults *results = [QXAuthUserServiceUnfollowUserResults alloc];
	QXAuthUserServiceUnfollowUserParams *params = [[QXAuthUserServiceUnfollowUserParams alloc] init];
	[params setUserId:userId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UnfollowUser.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetMyFollowingUsers ---
- (QXAuthUserServiceGetMyFollowingUsersResults *) GetMyFollowingUsers {
	
	QXAuthUserServiceGetMyFollowingUsersResults *results = [QXAuthUserServiceGetMyFollowingUsersResults alloc];
	QXAuthUserServiceGetMyFollowingUsersParams *params = [[QXAuthUserServiceGetMyFollowingUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyFollowingUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetPanelStatus ---
- (QXAuthUserServiceGetPanelStatusResults *) GetPanelStatus {
	
	QXAuthUserServiceGetPanelStatusResults *results = [QXAuthUserServiceGetPanelStatusResults alloc];
	QXAuthUserServiceGetPanelStatusParams *params = [[QXAuthUserServiceGetPanelStatusParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPanelStatus.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetUserPreferences ---
- (QXAuthUserServiceGetUserPreferencesResults *) GetUserPreferences {
	
	QXAuthUserServiceGetUserPreferencesResults *results = [QXAuthUserServiceGetUserPreferencesResults alloc];
	QXAuthUserServiceGetUserPreferencesParams *params = [[QXAuthUserServiceGetUserPreferencesParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetUserPreferences.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateUserPreferences ---
- (QXAuthUserServiceUpdateUserPreferencesResults *) UpdateUserPreferences:(QXPreferencesInput *)input {
	
	QXAuthUserServiceUpdateUserPreferencesResults *results = [QXAuthUserServiceUpdateUserPreferencesResults alloc];
	QXAuthUserServiceUpdateUserPreferencesParams *params = [[QXAuthUserServiceUpdateUserPreferencesParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateUserPreferences.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetOrgEmbedUsers ---
- (QXAuthUserServiceGetOrgEmbedUsersResults *) GetOrgEmbedUsers {
	
	QXAuthUserServiceGetOrgEmbedUsersResults *results = [QXAuthUserServiceGetOrgEmbedUsersResults alloc];
	QXAuthUserServiceGetOrgEmbedUsersParams *params = [[QXAuthUserServiceGetOrgEmbedUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgEmbedUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetNonStandardGroupEmbedUsers ---
- (QXAuthUserServiceGetNonStandardGroupEmbedUsersResults *) GetNonStandardGroupEmbedUsers {
	
	QXAuthUserServiceGetNonStandardGroupEmbedUsersResults *results = [QXAuthUserServiceGetNonStandardGroupEmbedUsersResults alloc];
	QXAuthUserServiceGetNonStandardGroupEmbedUsersParams *params = [[QXAuthUserServiceGetNonStandardGroupEmbedUsersParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetNonStandardGroupEmbedUsers.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateUserProfile ---
- (QXAuthUserServiceUpdateUserProfileResults *) UpdateUserProfile:(QXUserProfileInput *)input {
	
	QXAuthUserServiceUpdateUserProfileResults *results = [QXAuthUserServiceUpdateUserProfileResults alloc];
	QXAuthUserServiceUpdateUserProfileParams *params = [[QXAuthUserServiceUpdateUserProfileParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateUserProfile.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetMyCount ---
- (QXAuthUserServiceGetMyCountResults *) GetMyCount {
	
	QXAuthUserServiceGetMyCountResults *results = [QXAuthUserServiceGetMyCountResults alloc];
	QXAuthUserServiceGetMyCountParams *params = [[QXAuthUserServiceGetMyCountParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyCount.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- ReadEntry ---
- (QXAuthUserServiceReadEntryResults *) ReadEntry:(NSString *)entryId groupId:(NSString *)groupId {
	
	QXAuthUserServiceReadEntryResults *results = [QXAuthUserServiceReadEntryResults alloc];
	QXAuthUserServiceReadEntryParams *params = [[QXAuthUserServiceReadEntryParams alloc] init];
	[params setEntryId:entryId];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ReadEntry.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetJoinOrgInvitations ---
- (QXAuthUserServiceGetJoinOrgInvitationsResults *) GetJoinOrgInvitations {
	
	QXAuthUserServiceGetJoinOrgInvitationsResults *results = [QXAuthUserServiceGetJoinOrgInvitationsResults alloc];
	QXAuthUserServiceGetJoinOrgInvitationsParams *params = [[QXAuthUserServiceGetJoinOrgInvitationsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetJoinOrgInvitations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetOrganization ---
- (QXAuthUserServiceGetOrganizationResults *) GetOrganization:(NSString *)orgId {
	
	QXAuthUserServiceGetOrganizationResults *results = [QXAuthUserServiceGetOrganizationResults alloc];
	QXAuthUserServiceGetOrganizationParams *params = [[QXAuthUserServiceGetOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetOrganizations ---
- (QXAuthUserServiceGetOrganizationsResults *) GetOrganizations:(NSArray *)orgIds {
	
	QXAuthUserServiceGetOrganizationsResults *results = [QXAuthUserServiceGetOrganizationsResults alloc];
	QXAuthUserServiceGetOrganizationsParams *params = [[QXAuthUserServiceGetOrganizationsParams alloc] init];
	[params setOrgIds:orgIds];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrganizations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- SearchOrganizations ---
- (QXAuthUserServiceSearchOrganizationsResults *) SearchOrganizations:(NSString *)keyword {
	
	QXAuthUserServiceSearchOrganizationsResults *results = [QXAuthUserServiceSearchOrganizationsResults alloc];
	QXAuthUserServiceSearchOrganizationsParams *params = [[QXAuthUserServiceSearchOrganizationsParams alloc] init];
	[params setKeyword:keyword];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SearchOrganizations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateOrganization ---
- (QXAuthUserServiceUpdateOrganizationResults *) UpdateOrganization:(QXOrganizationInput *)input {
	
	QXAuthUserServiceUpdateOrganizationResults *results = [QXAuthUserServiceUpdateOrganizationResults alloc];
	QXAuthUserServiceUpdateOrganizationParams *params = [[QXAuthUserServiceUpdateOrganizationParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- SwitchOrganization ---
- (NSError *) SwitchOrganization:(NSString *)orgId {
	
	QXAuthUserServiceSwitchOrganizationResults *results = [QXAuthUserServiceSwitchOrganizationResults alloc];
	QXAuthUserServiceSwitchOrganizationParams *params = [[QXAuthUserServiceSwitchOrganizationParams alloc] init];
	[params setOrgId:orgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SwitchOrganization.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- AcceptSharedGroupRequest ---
- (QXAuthUserServiceAcceptSharedGroupRequestResults *) AcceptSharedGroupRequest:(NSString *)fromOrgId sharedOrgId:(NSString *)sharedOrgId sharedGroupId:(NSString *)sharedGroupId fromUserId:(NSString *)fromUserId {
	
	QXAuthUserServiceAcceptSharedGroupRequestResults *results = [QXAuthUserServiceAcceptSharedGroupRequestResults alloc];
	QXAuthUserServiceAcceptSharedGroupRequestParams *params = [[QXAuthUserServiceAcceptSharedGroupRequestParams alloc] init];
	[params setFromOrgId:fromOrgId];
	[params setSharedOrgId:sharedOrgId];
	[params setSharedGroupId:sharedGroupId];
	[params setFromUserId:fromUserId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/AcceptSharedGroupRequest.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RejectSharedGroupRequest ---
- (QXAuthUserServiceRejectSharedGroupRequestResults *) RejectSharedGroupRequest:(NSString *)fromOrgId sharedOrgId:(NSString *)sharedOrgId sharedGroupId:(NSString *)sharedGroupId fromUserId:(NSString *)fromUserId {
	
	QXAuthUserServiceRejectSharedGroupRequestResults *results = [QXAuthUserServiceRejectSharedGroupRequestResults alloc];
	QXAuthUserServiceRejectSharedGroupRequestParams *params = [[QXAuthUserServiceRejectSharedGroupRequestParams alloc] init];
	[params setFromOrgId:fromOrgId];
	[params setSharedOrgId:sharedOrgId];
	[params setSharedGroupId:sharedGroupId];
	[params setFromUserId:fromUserId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/RejectSharedGroupRequest.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetOrgSettings ---
- (QXAuthUserServiceGetOrgSettingsResults *) GetOrgSettings {
	
	QXAuthUserServiceGetOrgSettingsResults *results = [QXAuthUserServiceGetOrgSettingsResults alloc];
	QXAuthUserServiceGetOrgSettingsParams *params = [[QXAuthUserServiceGetOrgSettingsParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetOrgSettings.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- UpdateOrgSettings ---
- (NSError *) UpdateOrgSettings:(QXOrgSettingsInput *)orgSettingInput {
	
	QXAuthUserServiceUpdateOrgSettingsResults *results = [QXAuthUserServiceUpdateOrgSettingsResults alloc];
	QXAuthUserServiceUpdateOrgSettingsParams *params = [[QXAuthUserServiceUpdateOrgSettingsParams alloc] init];
	[params setOrgSettingInput:orgSettingInput];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateOrgSettings.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- CanCreateGroup ---
- (QXAuthUserServiceCanCreateGroupResults *) CanCreateGroup {
	
	QXAuthUserServiceCanCreateGroupResults *results = [QXAuthUserServiceCanCreateGroupResults alloc];
	QXAuthUserServiceCanCreateGroupParams *params = [[QXAuthUserServiceCanCreateGroupParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CanCreateGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CanInvitePeople ---
- (QXAuthUserServiceCanInvitePeopleResults *) CanInvitePeople {
	
	QXAuthUserServiceCanInvitePeopleResults *results = [QXAuthUserServiceCanInvitePeopleResults alloc];
	QXAuthUserServiceCanInvitePeopleParams *params = [[QXAuthUserServiceCanInvitePeopleParams alloc] init];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CanInvitePeople.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- InvitePeople ---
- (QXAuthUserServiceInvitePeopleResults *) InvitePeople:(NSArray *)emails skipInvalidEmail:(BOOL)skipInvalidEmail {
	
	QXAuthUserServiceInvitePeopleResults *results = [QXAuthUserServiceInvitePeopleResults alloc];
	QXAuthUserServiceInvitePeopleParams *params = [[QXAuthUserServiceInvitePeopleParams alloc] init];
	[params setEmails:emails];
	[params setSkipInvalidEmail:skipInvalidEmail];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/InvitePeople.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CancelInvitation ---
- (NSError *) CancelInvitation:(NSString *)email {
	
	QXAuthUserServiceCancelInvitationResults *results = [QXAuthUserServiceCancelInvitationResults alloc];
	QXAuthUserServiceCancelInvitationParams *params = [[QXAuthUserServiceCancelInvitationParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CancelInvitation.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- ResendInvitation ---
- (NSError *) ResendInvitation:(NSString *)email {
	
	QXAuthUserServiceResendInvitationResults *results = [QXAuthUserServiceResendInvitationResults alloc];
	QXAuthUserServiceResendInvitationParams *params = [[QXAuthUserServiceResendInvitationParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ResendInvitation.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- UpdateMailUpdates ---
- (NSError *) UpdateMailUpdates:(QXMailUpdatesInput *)input {
	
	QXAuthUserServiceUpdateMailUpdatesResults *results = [QXAuthUserServiceUpdateMailUpdatesResults alloc];
	QXAuthUserServiceUpdateMailUpdatesParams *params = [[QXAuthUserServiceUpdateMailUpdatesParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateMailUpdates.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- PrepareChangingEmail ---
- (QXAuthUserServicePrepareChangingEmailResults *) PrepareChangingEmail:(NSString *)newEmail {
	
	QXAuthUserServicePrepareChangingEmailResults *results = [QXAuthUserServicePrepareChangingEmailResults alloc];
	QXAuthUserServicePrepareChangingEmailParams *params = [[QXAuthUserServicePrepareChangingEmailParams alloc] init];
	[params setNewEmail:newEmail];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/PrepareChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- ConfirmChangingEmail ---
- (NSError *) ConfirmChangingEmail:(NSString *)token {
	
	QXAuthUserServiceConfirmChangingEmailResults *results = [QXAuthUserServiceConfirmChangingEmailResults alloc];
	QXAuthUserServiceConfirmChangingEmailParams *params = [[QXAuthUserServiceConfirmChangingEmailParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ConfirmChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- UpdateAccount ---
- (QXAuthUserServiceUpdateAccountResults *) UpdateAccount:(QXMemberAccountInput *)input {
	
	QXAuthUserServiceUpdateAccountResults *results = [QXAuthUserServiceUpdateAccountResults alloc];
	QXAuthUserServiceUpdateAccountParams *params = [[QXAuthUserServiceUpdateAccountParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/UpdateAccount.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- SendSharingInvitation ---
- (QXAuthUserServiceSendSharingInvitationResults *) SendSharingInvitation:(NSString *)groupId email:(NSString *)email isResend:(BOOL)isResend {
	
	QXAuthUserServiceSendSharingInvitationResults *results = [QXAuthUserServiceSendSharingInvitationResults alloc];
	QXAuthUserServiceSendSharingInvitationParams *params = [[QXAuthUserServiceSendSharingInvitationParams alloc] init];
	[params setGroupId:groupId];
	[params setEmail:email];
	[params setIsResend:isResend];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/SendSharingInvitation.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetSharingInvitations ---
- (QXAuthUserServiceGetSharingInvitationsResults *) GetSharingInvitations:(NSString *)groupId {
	
	QXAuthUserServiceGetSharingInvitationsResults *results = [QXAuthUserServiceGetSharingInvitationsResults alloc];
	QXAuthUserServiceGetSharingInvitationsParams *params = [[QXAuthUserServiceGetSharingInvitationsParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetSharingInvitations.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CancelSharingInvitation ---
- (NSError *) CancelSharingInvitation:(NSString *)groupId email:(NSString *)email {
	
	QXAuthUserServiceCancelSharingInvitationResults *results = [QXAuthUserServiceCancelSharingInvitationResults alloc];
	QXAuthUserServiceCancelSharingInvitationParams *params = [[QXAuthUserServiceCancelSharingInvitationParams alloc] init];
	[params setGroupId:groupId];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/CancelSharingInvitation.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- StopSharedGroup ---
- (NSError *) StopSharedGroup:(NSString *)groupId toStopOrgId:(NSString *)toStopOrgId {
	
	QXAuthUserServiceStopSharedGroupResults *results = [QXAuthUserServiceStopSharedGroupResults alloc];
	QXAuthUserServiceStopSharedGroupParams *params = [[QXAuthUserServiceStopSharedGroupParams alloc] init];
	[params setGroupId:groupId];
	[params setToStopOrgId:toStopOrgId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/StopSharedGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- LeaveSharedGroup ---
- (NSError *) LeaveSharedGroup:(NSString *)groupId {
	
	QXAuthUserServiceLeaveSharedGroupResults *results = [QXAuthUserServiceLeaveSharedGroupResults alloc];
	QXAuthUserServiceLeaveSharedGroupParams *params = [[QXAuthUserServiceLeaveSharedGroupParams alloc] init];
	[params setGroupId:groupId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/LeaveSharedGroup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- GetMyChatEntries ---
- (QXAuthUserServiceGetMyChatEntriesResults *) GetMyChatEntries:(NSString *)before limit:(NSNumber *)limit {
	
	QXAuthUserServiceGetMyChatEntriesResults *results = [QXAuthUserServiceGetMyChatEntriesResults alloc];
	QXAuthUserServiceGetMyChatEntriesParams *params = [[QXAuthUserServiceGetMyChatEntriesParams alloc] init];
	[params setBefore:before];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetMyChatEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- ShareChat ---
- (QXAuthUserServiceShareChatResults *) ShareChat:(QXShareChatInput *)input {
	
	QXAuthUserServiceShareChatResults *results = [QXAuthUserServiceShareChatResults alloc];
	QXAuthUserServiceShareChatParams *params = [[QXAuthUserServiceShareChatParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/ShareChat.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetPrivateChat ---
- (QXAuthUserServiceGetPrivateChatResults *) GetPrivateChat:(NSString *)entryId searchKeyWords:(NSString *)searchKeyWords {
	
	QXAuthUserServiceGetPrivateChatResults *results = [QXAuthUserServiceGetPrivateChatResults alloc];
	QXAuthUserServiceGetPrivateChatParams *params = [[QXAuthUserServiceGetPrivateChatParams alloc] init];
	[params setEntryId:entryId];
	[params setSearchKeyWords:searchKeyWords];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/AuthUserService/GetPrivateChat.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}
@end

@implementation QXPublicService : NSObject

- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}


// --- GetSession ---
- (QXPublicServiceGetSessionResults *) GetSession:(NSString *)email password:(NSString *)password {
	
	QXPublicServiceGetSessionResults *results = [QXPublicServiceGetSessionResults alloc];
	QXPublicServiceGetSessionParams *params = [[QXPublicServiceGetSessionParams alloc] init];
	[params setEmail:email];
	[params setPassword:password];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetSession.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetAuthUserService ---
- (QXAuthUserService *) GetAuthUserService:(NSString *)session {
	
	QXAuthUserService *results = [QXAuthUserService alloc];
	[results setSession:session];
	
	return results;
}

// --- GetAuthorizedAdmin ---
- (QXPublicServiceGetAuthorizedAdminResults *) GetAuthorizedAdmin:(NSString *)session {
	
	QXPublicServiceGetAuthorizedAdminResults *results = [QXPublicServiceGetAuthorizedAdminResults alloc];
	QXPublicServiceGetAuthorizedAdminParams *params = [[QXPublicServiceGetAuthorizedAdminParams alloc] init];
	[params setSession:session];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetAuthorizedAdmin.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetAuthAdminService ---
- (QXAuthAdminService *) GetAuthAdminService:(NSString *)session {
	
	QXAuthAdminService *results = [QXAuthAdminService alloc];
	[results setSession:session];
	
	return results;
}

// --- PrepareChangingEmail ---
- (QXPublicServicePrepareChangingEmailResults *) PrepareChangingEmail:(NSString *)memberId newEmail:(NSString *)newEmail sharingToken:(NSString *)sharingToken invitationToken:(NSString *)invitationToken {
	
	QXPublicServicePrepareChangingEmailResults *results = [QXPublicServicePrepareChangingEmailResults alloc];
	QXPublicServicePrepareChangingEmailParams *params = [[QXPublicServicePrepareChangingEmailParams alloc] init];
	[params setMemberId:memberId];
	[params setNewEmail:newEmail];
	[params setSharingToken:sharingToken];
	[params setInvitationToken:invitationToken];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/PrepareChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- ConfirmChangingEmail ---
- (QXPublicServiceConfirmChangingEmailResults *) ConfirmChangingEmail:(NSString *)token {
	
	QXPublicServiceConfirmChangingEmailResults *results = [QXPublicServiceConfirmChangingEmailResults alloc];
	QXPublicServiceConfirmChangingEmailParams *params = [[QXPublicServiceConfirmChangingEmailParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ConfirmChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CancelChangingEmail ---
- (NSError *) CancelChangingEmail:(NSString *)token {
	
	QXPublicServiceCancelChangingEmailResults *results = [QXPublicServiceCancelChangingEmailResults alloc];
	QXPublicServiceCancelChangingEmailParams *params = [[QXPublicServiceCancelChangingEmailParams alloc] init];
	[params setToken:token];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/CancelChangingEmail.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- ChangeEmailToAcceptSharing ---
- (QXPublicServiceChangeEmailToAcceptSharingResults *) ChangeEmailToAcceptSharing:(NSString *)token newEmail:(NSString *)newEmail {
	
	QXPublicServiceChangeEmailToAcceptSharingResults *results = [QXPublicServiceChangeEmailToAcceptSharingResults alloc];
	QXPublicServiceChangeEmailToAcceptSharingParams *params = [[QXPublicServiceChangeEmailToAcceptSharingParams alloc] init];
	[params setToken:token];
	[params setNewEmail:newEmail];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ChangeEmailToAcceptSharing.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetSharingInviation ---
- (QXPublicServiceGetSharingInviationResults *) GetSharingInviation:(NSString *)sharingInviationToken memberId:(NSString *)memberId {
	
	QXPublicServiceGetSharingInviationResults *results = [QXPublicServiceGetSharingInviationResults alloc];
	QXPublicServiceGetSharingInviationParams *params = [[QXPublicServiceGetSharingInviationParams alloc] init];
	[params setSharingInviationToken:sharingInviationToken];
	[params setMemberId:memberId];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetSharingInviation.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- ContactUs ---
- (QXPublicServiceContactUsResults *) ContactUs:(QXContactInput *)input {
	
	QXPublicServiceContactUsResults *results = [QXPublicServiceContactUsResults alloc];
	QXPublicServiceContactUsParams *params = [[QXPublicServiceContactUsParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/ContactUs.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetBlogEntries ---
- (QXPublicServiceGetBlogEntriesResults *) GetBlogEntries:(NSString *)doi pageNum:(NSNumber *)pageNum limit:(NSNumber *)limit {
	
	QXPublicServiceGetBlogEntriesResults *results = [QXPublicServiceGetBlogEntriesResults alloc];
	QXPublicServiceGetBlogEntriesParams *params = [[QXPublicServiceGetBlogEntriesParams alloc] init];
	[params setDoi:doi];
	[params setPageNum:pageNum];
	[params setLimit:limit];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetBlogEntries.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetBlogEntryBySlug ---
- (QXPublicServiceGetBlogEntryBySlugResults *) GetBlogEntryBySlug:(NSString *)doi slug:(NSString *)slug {
	
	QXPublicServiceGetBlogEntryBySlugResults *results = [QXPublicServiceGetBlogEntryBySlugResults alloc];
	QXPublicServiceGetBlogEntryBySlugParams *params = [[QXPublicServiceGetBlogEntryBySlugParams alloc] init];
	[params setDoi:doi];
	[params setSlug:slug];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GetBlogEntryBySlug.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GenerateBlogEntrySlug ---
- (QXPublicServiceGenerateBlogEntrySlugResults *) GenerateBlogEntrySlug:(NSString *)doi slug:(NSString *)slug {
	
	QXPublicServiceGenerateBlogEntrySlugResults *results = [QXPublicServiceGenerateBlogEntrySlugResults alloc];
	QXPublicServiceGenerateBlogEntrySlugParams *params = [[QXPublicServiceGenerateBlogEntrySlugParams alloc] init];
	[params setDoi:doi];
	[params setSlug:slug];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/GenerateBlogEntrySlug.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- CreateNewsletter ---
- (QXPublicServiceCreateNewsletterResults *) CreateNewsletter:(QXNewsletterInput *)input {
	
	QXPublicServiceCreateNewsletterResults *results = [QXPublicServiceCreateNewsletterResults alloc];
	QXPublicServiceCreateNewsletterParams *params = [[QXPublicServiceCreateNewsletterParams alloc] init];
	[params setInput:input];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/CreateNewsletter.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RequestNewSignupToken ---
- (QXPublicServiceRequestNewSignupTokenResults *) RequestNewSignupToken:(NSString *)email {
	
	QXPublicServiceRequestNewSignupTokenResults *results = [QXPublicServiceRequestNewSignupTokenResults alloc];
	QXPublicServiceRequestNewSignupTokenParams *params = [[QXPublicServiceRequestNewSignupTokenParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewSignupToken.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RequestNewInvitationToken ---
- (QXPublicServiceRequestNewInvitationTokenResults *) RequestNewInvitationToken:(NSString *)orgId email:(NSString *)email {
	
	QXPublicServiceRequestNewInvitationTokenResults *results = [QXPublicServiceRequestNewInvitationTokenResults alloc];
	QXPublicServiceRequestNewInvitationTokenParams *params = [[QXPublicServiceRequestNewInvitationTokenParams alloc] init];
	[params setOrgId:orgId];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewInvitationToken.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RequestNewSharingToken ---
- (QXPublicServiceRequestNewSharingTokenResults *) RequestNewSharingToken:(NSString *)email {
	
	QXPublicServiceRequestNewSharingTokenResults *results = [QXPublicServiceRequestNewSharingTokenResults alloc];
	QXPublicServiceRequestNewSharingTokenParams *params = [[QXPublicServiceRequestNewSharingTokenParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestNewSharingToken.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- InviteMe ---
- (QXPublicServiceInviteMeResults *) InviteMe:(NSString *)organizationId email:(NSString *)email {
	
	QXPublicServiceInviteMeResults *results = [QXPublicServiceInviteMeResults alloc];
	QXPublicServiceInviteMeParams *params = [[QXPublicServiceInviteMeParams alloc] init];
	[params setOrganizationId:organizationId];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/InviteMe.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- RequestSignup ---
- (NSError *) RequestSignup:(NSString *)email {
	
	QXPublicServiceRequestSignupResults *results = [QXPublicServiceRequestSignupResults alloc];
	QXPublicServiceRequestSignupParams *params = [[QXPublicServiceRequestSignupParams alloc] init];
	[params setEmail:email];
	
	QXQortexapi * _api = [QXQortexapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/PublicService/RequestSignup.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [QXQortexapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}
@end



